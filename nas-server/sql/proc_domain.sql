-- /* version 40 */
SET AUTODDL OFF;
SET TERM ^ ;

/* Stored procedures */
CREATE PROCEDURE ADD_CONTACT_TYPE_TO_OWNER (I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTTYPE_ID INTEGER NOT NULL,
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE ADD_CUSTOMER (TOWNER_NAME VARCHAR(100) CHARACTER SET UTF8,
OWNER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
OWNER_PASSWD VARCHAR(100) CHARACTER SET UTF8,
TOWNER_STATE STATE DEFAULT 0,
EXTERNAL_ID VARCHAR(100) CHARACTER SET UTF8 DEFAULT '',
TOWNER_COMMENT VARCHAR(8164) CHARACTER SET UTF8 DEFAULT '',
FBHOST VARCHAR(255) CHARACTER SET UTF8 DEFAULT '',
TLIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8 DEFAULT '',
TLIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8 DEFAULT '',
TLIBRARY_PATH VARCHAR(255) CHARACTER SET UTF8 DEFAULT '',
TLIBRARY_STATE STATE DEFAULT 0,
SUB_START DATE DEFAULT CURRENT_DATE,
SUB_END DATE DEFAULT NULL,
TLIBRARY_CHARGEABLE BOOLEAN DEFAULT 0)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE ADD_GEDGROUP_TO_LIBRARY (I_TGEDGROUP_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL,
I_TPROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE ADD_GEDUSER_TO_GEDGROUP (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDGROUP_ID INTEGER NOT NULL,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE ADD_GEDUSER_TO_LIBRARY (I_TGEDUSER_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL,
I_TPROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE ADD_LOGSYNC (I_TLIBRARY_ID INTEGER NOT NULL,
I_SYNC_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL,
I_SYNC_STOP VARCHAR(20) CHARACTER SET UTF8 NOT NULL,
I_SYNC_SIZE_BEFORE BIGINT NOT NULL,
I_SYNC_SIZE_AFTER BIGINT NOT NULL,
I_SYNC_STATE BOOLEAN NOT NULL,
I_SYNC_ERR_COMMENT VARCHAR(4196) CHARACTER SET UTF8 NOT NULL DEFAULT '')
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_CONTACT (I_TCONTACT_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE DEL_CONTACT_TYPE_FOR_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL,
I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTTYPE_ID INTEGER NOT NULL)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_CONTACT_TYPE_FOR_OWNER (I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTTYPE_ID INTEGER NOT NULL)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_CONTTYPE (I_TCONTTYPE_ID INTEGER NOT NULL)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_DOMPARAM (I_TDOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TDOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_FBSERVER (I_TFBSERVER_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE DEL_GEDGROUP (I_TGEDGROUP_ID INTEGER NOT NULL)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_GEDGROUP_FOR_LIBRARY (I_TGEDGROUP_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_GEDPARAM (I_TGEDPARAM_ID INTEGER NOT NULL)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_GEDPARAMOWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_GEDPARAMPROF (I_TPROFILE_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_GEDPARAMUSER (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_GEDUSER (I_TGEDUSER_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE DEL_GEDUSER_FOR_GEDGROUP (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDGROUP_ID INTEGER NOT NULL)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_GEDUSER_FOR_LIBRARY (I_TGEDUSER_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE DEL_OWNER (I_TOWNER_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE DEL_PROFILE (I_TPROFILE_ID INTEGER NOT NULL)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE DEL_STORAGES (I_TOWNER_ID INTEGER NOT NULL,
I_TSTORAGE_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TSTORAGE_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TSTORAGE_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TSTORAGE_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '')
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE GET_ALL_LIBRARIES_FOR_GEDUSER (I_TGEDUSER_ID INTEGER NOT NULL,
I_WITH_DUPLICATE BOOLEAN NOT NULL DEFAULT 0,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
GEDUSER_GEDGROUP_ID INTEGER,
LIBRARY_ID INTEGER,
LIBRARY_ORIGIN SMALLINT,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
GEDUSER_STATE STATE,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_ALTER_STATE_OK (I_TARGETED_COLUMN VARCHAR(1000) CHARACTER SET UTF8 NOT NULL)
RETURNS (SQL_WHERE_DEFAULT_ALTER VARCHAR(255) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_CONTACTS (I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (CONTACT_ID INTEGER,
OWNER_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_STATE STATE,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_CONTACTS_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TCONTACT_ALL BOOLEAN NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPES_INFOS BLOB CHARACTER SET UTF8,
OWNER_STATE STATE,
CONTACT_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_CONTACTS_TYPES_FOR_CONTACT (I_TCONTACT_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (CONTACT_ID INTEGER,
OWNER_ID INTEGER,
LIBRARY_ID INTEGER,
CONTTYPE_ID INTEGER,
CONTLIB_SYNC_SENDMAIL SYNC_MAIL,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
CONTTYPE_NAME VARCHAR(150) CHARACTER SET UTF8,
FBSERVER_ID INTEGER,
CONTACT_STATE STATE,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_CONTACTS_TYPES_FOR_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPE_ID INTEGER,
CONTTYPE_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTLIB_SYNC_SENDMAIL SYNC_MAIL,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LIBRARY_STATE STATE,
CONTACT_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_CONTACTS_TYPES_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPE_ID INTEGER,
CONTTYPE_NAME VARCHAR(150) CHARACTER SET UTF8,
OWNER_STATE STATE,
CONTACT_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_CONTACT_INFOS (I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (CONTACT_ID INTEGER,
OWNER_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_STATE STATE,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_CONTACT_TYPE_FOR_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL,
I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTTYPE_ID INTEGER NOT NULL,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
CONTACT_ID INTEGER,
CONTTYPE_ID INTEGER,
CONTLIB_SYNC_SENDMAIL SYNC_MAIL,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LIBRARY_STATE STATE,
CONTACT_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_CONTTYPES RETURNS (CONTTYPE_ID INTEGER,
CONTTYPE_NAME VARCHAR(150) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_CONTTYPE_INFOS (I_TCONTYPE_ID INTEGER NOT NULL)
RETURNS (CONTTYPE_ID INTEGER,
CONTTYPE_NAME VARCHAR(150) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_CONTTYPE_MDF (I_TCONTACT_ID INTEGER NOT NULL)
RETURNS (CONTTYPES_INFOS BLOB CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_DATE_STRING (I_DATE TIMESTAMP)
RETURNS (DATE_STRING VARCHAR(20) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_DOMPARAM (I_TDOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TDOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL)
RETURNS (DOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
DOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
DOMPARAM_VALUE VARCHAR(255) CHARACTER SET UTF8,
DOMPARAM_VALUEBLB_FILLED BOOLEAN,
DOMPARAM_TYPE TYPE_PARAM,
DOMPARAM_COMMENT VARCHAR(512) CHARACTER SET UTF8,
DOMPARAM_PROTECTION STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_DOMPARAMS RETURNS (DOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
DOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
DOMPARAM_VALUE VARCHAR(255) CHARACTER SET UTF8,
DOMPARAM_VALUEBLB_FILLED BOOLEAN,
DOMPARAM_TYPE TYPE_PARAM,
DOMPARAM_COMMENT VARCHAR(512) CHARACTER SET UTF8,
DOMPARAM_PROTECTION STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_DOMPARAM_VALUEBLB (I_TDOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
I_TDOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8)
RETURNS (DOMPARAM_TYPE TYPE_PARAM,
DOMPARAM_VALUE VARCHAR(255) CHARACTER SET UTF8,
DOMPARAM_VALUEBLB BLOB)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_DOM_ACCESS (I_ACCESS_TYPE INTEGER NOT NULL DEFAULT 0)
RETURNS (ACCESS BOOLEAN)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_FBSERVERS (I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (FBSERVER_ID INTEGER,
FBSERVER_NAME VARCHAR(100) CHARACTER SET UTF8,
FBSERVER_TCPPORT INTEGER,
FBSERVER_HOST VARCHAR(255) CHARACTER SET UTF8,
FBSERVER_TUNNELPORT INTEGER,
FBSERVER_TUNNELHOST VARCHAR(255) CHARACTER SET UTF8,
FBSERVER_LIBROOTPATH VARCHAR(255) CHARACTER SET UTF8,
FBSERVER_FBADMLOGIN VARCHAR(31) CHARACTER SET UTF8,
FBSERVER_FBADMPASSWD VARCHAR(100) CHARACTER SET UTF8,
FBSERVER_SIZE_MB BIGINT,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_FBSERVER_INFOS (I_TFBSERVER_ID INTEGER NOT NULL,
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (FBSERVER_ID INTEGER,
FBSERVER_NAME VARCHAR(50) CHARACTER SET UTF8,
FBSERVER_TCPPORT INTEGER,
FBSERVER_HOST VARCHAR(255) CHARACTER SET UTF8,
FBSERVER_TUNNELPORT INTEGER,
FBSERVER_TUNNELHOST VARCHAR(255) CHARACTER SET UTF8,
FBSERVER_LIBROOTPATH VARCHAR(255) CHARACTER SET UTF8,
FBSERVER_FBADMLOGIN VARCHAR(31) CHARACTER SET UTF8,
FBSERVER_FBADMPASSWD VARCHAR(100) CHARACTER SET UTF8,
FBSERVER_SIZE_MB BIGINT,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDGROUPS_FOR_GEDUSER (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_COUNT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
GEDGROUP_ID INTEGER,
GEDGROUP_NAME VARCHAR(100) CHARACTER SET UTF8,
GEDGROUP_TYPE SMALLINT,
GEDGROUP_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDGROUP_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_GEDUSERS_COUNT INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
GEDUSER_STATE STATE,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDGROUPS_FOR_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '',
I_TGEDUSER_COUNT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
GEDGROUP_ID INTEGER,
GEDGROUP_NAME VARCHAR(100) CHARACTER SET UTF8,
GEDGROUP_TYPE SMALLINT,
GEDGROUP_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDGROUP_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_GEDUSERS_COUNT INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDGROUPS_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_COUNT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDGROUP_ID INTEGER,
GEDGROUP_NAME VARCHAR(100) CHARACTER SET UTF8,
GEDGROUP_TYPE SMALLINT,
GEDGROUP_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDGROUP_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_GEDUSERS_COUNT INTEGER,
PROFILE_ID INTEGER,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDGROUP_INFOS (I_TGEDGROUP_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_COUNT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDGROUP_ID INTEGER,
OWNER_ID INTEGER,
GEDGROUP_NAME VARCHAR(100) CHARACTER SET UTF8,
GEDGROUP_TYPE SMALLINT,
GEDGROUP_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDGROUP_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_GEDUSERS_COUNT INTEGER,
PROFILE_ID INTEGER,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAM (I_TGEDPARAM_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDPARAM_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAM_CLASS INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
GEDPARAM_DEFAULTVALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
LIBRARY_ID INTEGER,
FBSERVER_ID INTEGER,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAMOWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMOWNER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMOWNER_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMOWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAMOWNERS_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TGEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDPARAM_CLASS VARCHAR(15) CHARACTER SET UTF8 DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMOWNER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMOWNER_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMOWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAMOWNER_MDF (I_TOWNER_ID INTEGER NOT NULL)
RETURNS (GEDPARAMOWNERS_INFOS BLOB CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAMOWNER_VALUEBLB (I_TOWNER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL)
RETURNS (GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMOWNER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMOWNER_VALUEBLB BLOB,
GEDPARAMOWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAMPROF (I_TPROFILE_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (PROFILE_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMPROF_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMPROF_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMPROF_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAMPROFS_FOR_PROFILE (I_TPROFILE_ID INTEGER NOT NULL,
I_TGEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDPARAM_CLASS VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (PROFILE_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMPROF_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMPROF_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMPROF_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAMPROF_VALUEBLB (I_TPROFILE_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL)
RETURNS (GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMPROF_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMPROF_VALUEBLB BLOB,
GEDPARAMPROF_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAMS (I_TGEDPARAM_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAM_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAM_CLASS VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDPARAM_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAM_CLASS INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
GEDPARAM_DEFAULTVALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
LIBRARY_ID INTEGER,
FBSERVER_ID INTEGER,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAMUSER (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
LIBRARY_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMUSER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMUSER_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
GEDUSER_STATE STATE,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAMUSERS_FOR_USER (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
LIBRARY_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMUSER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMUSER_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
GEDUSER_STATE STATE,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAMUSER_VALUEBLB (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0)
RETURNS (GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMUSER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMUSER_VALUEBLB BLOB,
GEDPARAMUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAM_DEFAULTVALUEBLB (I_TGEDPARAM_ID INTEGER NOT NULL)
RETURNS (GEDPARAM_TYPE TYPE_PARAM,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
GEDPARAM_DEFAULTVALUEBLB BLOB,
OWNER_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAM_FOR_NAME (I_TGEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TGEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDPARAM_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAM_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDPARAM_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAM_CLASS INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
GEDPARAM_DEFAULTVALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
LIBRARY_ID INTEGER,
FBSERVER_ID INTEGER,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDPARAM_SECTION_OWNER_OK (SECTION VARCHAR(40) CHARACTER SET UTF8)
RETURNS (OK BOOLEAN)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDUSERS_COUNT_FOR_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
LIBRARY_GEDUSERS_COUNT INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDUSERS_COUNT_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDGROUP_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_COUNT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDGROUP_ID INTEGER,
GEDUSERS_COUNT INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDUSERS_FOR_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL,
I_TGEDUSER_LOGIN_FILTER VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_NAME_FILTER VARCHAR(150) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_FIRSTNAME_FILTER VARCHAR(150) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_MAX_ROWS INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
GEDUSER_ID INTEGER,
GEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
GEDUSER_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDUSER_CHARGEABLE BOOLEAN,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPES_INFOS BLOB CHARACTER SET UTF8,
PROFILE_ID INTEGER,
GEDUSER_GEDGROUP_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LIBRARY_STATE STATE,
GEDUSER_STATE STATE,
CONTACT_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDUSERS_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDGROUP_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_LOGIN_FILTER VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_NAME_FILTER VARCHAR(150) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_FIRSTNAME_FILTER VARCHAR(150) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_MAX_ROWS INTEGER NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDGROUP_ID INTEGER,
GEDUSER_ID INTEGER,
GEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
GEDUSER_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDUSER_CHARGEABLE BOOLEAN,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPES_INFOS BLOB CHARACTER SET UTF8,
PROFILE_ID INTEGER,
GEDUSER_GEDGROUP_ID INTEGER,
OWNER_STATE STATE,
GEDUSER_STATE STATE,
CONTACT_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDUSER_ID (I_TOWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TGEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TGEDUSER_PASSWD VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
OWNER_ID INTEGER,
PROFILE_ID INTEGER,
GEDUSER_GEDGROUP_ID INTEGER,
GEDGROUP_PROFILE_ID INTEGER,
CONTACT_ID INTEGER,
GEDUSER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_GEDUSER_INFOS (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
GEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
GEDUSER_PASSWD VARCHAR(100) CHARACTER SET UTF8,
GEDUSER_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDUSER_CHARGEABLE BOOLEAN,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPES_INFOS BLOB CHARACTER SET UTF8,
OWNER_ID INTEGER,
PROFILE_ID INTEGER,
GEDUSER_GEDGROUP_ID INTEGER,
GEDGROUP_PROFILE_ID INTEGER,
GEDUSER_STATE STATE,
OWNER_STATE STATE,
CONTACT_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_LASTSYNC_MDF (I_TLIBRARY_ID INTEGER NOT NULL)
RETURNS (LOGSYNCS_INFOS BLOB CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_LIBRARIES (I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
PROFILE_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_LIBRARIES_FOR_FBSERVER (I_TFBSERVER_ID INTEGER NOT NULL,
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (FBSERVER_ID INTEGER,
LIBRARY_ID INTEGER,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
OWNER_ID INTEGER,
PROFILE_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
FBSERVER_STATE STATE,
LIBRARY_STATE STATE,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_LIBRARIES_FOR_GEDGROUP (I_TGEDGROUP_ID INTEGER NOT NULL,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
RETURNS (GEDGROUP_ID INTEGER,
LIBRARY_ID INTEGER,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
GEDUSER_STATE STATE,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_LIBRARIES_FOR_GEDUSER (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
GEDUSER_GEDGROUP_ID INTEGER,
LIBRARY_ID INTEGER,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
GEDUSER_STATE STATE,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_LIBRARIES_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT'')
RETURNS (OWNER_ID INTEGER,
LIBRARY_ID INTEGER,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
FBSERVER_ID INTEGER,
PROFILE_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_LIBRARY_CONNECT (I_TLIBRARY_ID INTEGER NOT NULL)
RETURNS (LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_LIBRARY_INFOS (I_TLIBRARY_ID INTEGER NOT NULL,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
PROFILE_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_LOGSYNCS (I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TIME_CRIT_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TIME_CRIT_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_STATE_CRIT BOOLEAN NOT NULL DEFAULT 32767,
I_MAX_ROWS INTEGER NOT NULL DEFAULT 0)
RETURNS (LIBRARY_ID INTEGER,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
OWNER_ID INTEGER,
OWNER_NAME VARCHAR(100) CHARACTER SET UTF8,
SYNC_START VARCHAR(20) CHARACTER SET UTF8,
SYNC_STOP VARCHAR(20) CHARACTER SET UTF8,
SYNC_DURATION BIGINT,
SYNC_SIZE_BEFORE BIGINT,
SYNC_SIZE_AFTER BIGINT,
SYNC_SIZE_TRANSFERED BIGINT,
SYNC_STATE BOOLEAN,
SYNC_ERR_COMMENT VARCHAR(4196) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_LOGSYNCSTATS (I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TIME_CRIT_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TIME_CRIT_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_STATE_CRIT BOOLEAN NOT NULL DEFAULT 32767)
RETURNS (LIBRARY_ID INTEGER,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
OWNER_ID INTEGER,
OWNER_NAME VARCHAR(100) CHARACTER SET UTF8,
SYNC_NB INTEGER,
SYNC_SIZE_TRANSFERED_SUM BIGINT,
SYNC_SIZE_TRANSFERED_AVG BIGINT,
SYNC_DURATION_SUM BIGINT,
SYNC_DURATION_AVG BIGINT)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_LOGSYNC_MDF (I_TLOGSYNC_ID INTEGER NOT NULL)
RETURNS (LOGSYNCS_INFOS BLOB CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_OWNERS (I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
OWNER_NAME VARCHAR(100) CHARACTER SET UTF8,
OWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8,
OWNER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
OWNER_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
OWNER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
OWNER_EXTERNAL_ID VARCHAR(100) CHARACTER SET UTF8,
OWNER_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
OWNER_ISADMIN BOOLEAN,
OWNER_SIZE_MB BIGINT,
OWNER_SIZE_MB_CHARGEABLE BIGINT,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPES_INFOS BLOB CHARACTER SET UTF8,
GEDPARAMOWNERS_INFOS BLOB CHARACTER SET UTF8,
PROFILE_ID INTEGER,
OWNER_STATE STATE,
CONTACT_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_OWNER_ID (I_TOWNER_LOGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TOWNER_PASSWD VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
PROFILE_ID INTEGER,
CONTACT_ID INTEGER,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_OWNER_INFOS (I_TOWNER_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
OWNER_NAME VARCHAR(100) CHARACTER SET UTF8,
OWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8,
OWNER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
OWNER_PASSWD VARCHAR(100) CHARACTER SET UTF8,
OWNER_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
OWNER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
OWNER_EXTERNAL_ID VARCHAR(100) CHARACTER SET UTF8,
OWNER_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
OWNER_ISADMIN BOOLEAN,
OWNER_SIZE_MB BIGINT,
OWNER_SIZE_MB_CHARGEABLE BIGINT,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPES_INFOS BLOB CHARACTER SET UTF8,
GEDPARAMOWNERS_INFOS BLOB CHARACTER SET UTF8,
PROFILE_ID INTEGER,
OWNER_STATE STATE,
CONTACT_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_OWNER_IS_ADMIN (I_TOWNER_ID INTEGER NOT NULL)
RETURNS (OWNER_ADMIN BOOLEAN,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_PROFILES_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
LIBRARY_ID INTEGER,
GEDUSER_ID INTEGER,
PROFILE_ID INTEGER,
PROFILE_NAME VARCHAR(100) CHARACTER SET UTF8,
PROFILE_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
PROFILE_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
PROFILE_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
FBSERVER_ID INTEGER,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE,
GEDUSER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_PROFILE_FOR_GEDGROUPLIB (I_TLIBRARY_ID INTEGER NOT NULL,
I_TGEDGROUP_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
GEDGROUP_ID INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_PROFILE_FOR_GEDUSERLIB (I_TLIBRARY_ID INTEGER NOT NULL,
I_TGEDUSER_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
GEDUSER_ID INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE,
GEDUSER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_PROFILE_INFOS (I_TPROFILE_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (PROFILE_ID INTEGER,
PROFILE_NAME VARCHAR(100) CHARACTER SET UTF8,
OWNER_ID INTEGER,
PROFILE_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
LIBRARY_ID INTEGER,
GEDUSER_ID INTEGER,
PROFILE_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
PROFILE_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
FBSERVER_ID INTEGER,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
GEDUSER_STATE STATE,
FBSERVER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_STATES (I_TARGETED_TABLE VARCHAR(255) CHARACTER SET UTF8 NOT NULL,
I_CRITERIA VARCHAR(8000) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_RETURN_COLUMN VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT 'ID',
I_TARGETED_COLUMN VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT 'STATE')
RETURNS (COLUMN_ID VARCHAR(8000) CHARACTER SET UTF8,
STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_STATE_CRITERIA (I_EXPR_CRIT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL,
I_TARGETED_COLUMN VARCHAR(1000) CHARACTER SET UTF8 NOT NULL)
RETURNS (CRIT_FOR_STATE VARCHAR(1000) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_STORAGES (I_TOWNER_ID INTEGER NOT NULL,
I_TSTORAGE_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TSTORAGE_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TSTORAGE_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TSTORAGE_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDUSER_ID INTEGER,
LIBRARY_ID INTEGER,
STORAGE_SECTION VARCHAR(40) CHARACTER SET UTF8,
STORAGE_NAME VARCHAR(80) CHARACTER SET UTF8,
STORAGE_VALUE VARCHAR(8000) CHARACTER SET UTF8,
STORAGE_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_SUBDOMAIN_EXISTS (I_TOWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
PROFILE_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_VISIBILITY_STATE_OK (I_TARGETED_COLUMN VARCHAR(1000) CHARACTER SET UTF8 NOT NULL)
RETURNS (SQL_WHERE_DEFAULT_VISIBILITY VARCHAR(255) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE PURGE_ALL (I_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_PURGE_LOGSYNC BOOLEAN NOT NULL DEFAULT 0)
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE PURGE_CONTACTS (I_TCONTACT_ID INTEGER NOT NULL DEFAULT 0,
I_TCONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE PURGE_GEDUSERS (I_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE PURGE_LIBRARIES (I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE PURGE_LOGSYNC (I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TIME_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE PURGE_OWNERS (I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE PURGE_PROFILES (I_TPROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TPROFILE_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_ID INTEGER NOT NULL DEFAULT 0)
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_CONTACT_INFOS (I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTACT_TOWNER_ID INTEGER NOT NULL,
I_TCONTACT_NAME VARCHAR(150) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_TEL VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_REGION VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_CITY VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_NO_MODIF_DATE BOOLEAN NOT NULL DEFAULT 0,
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (CONTACT_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_CONTACT_TYPE_TO_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL,
I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTTYPE_ID INTEGER NOT NULL,
I_TCONTLIB_SYNC_SENDMAIL SYNC_MAIL NOT NULL DEFAULT 0,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE SET_CONTTYPE_INFOS (I_TCONTTYPE_ID INTEGER NOT NULL DEFAULT 0,
I_TCONTTYPE_NAME VARCHAR(150) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (CONTTYPE_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_DOMPARAM (I_TDOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TDOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL,
I_TDOMPARAM_VALUE VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TDOMPARAM_TYPE TYPE_PARAM NOT NULL DEFAULT 1,
I_TDOMPARAM_COMMENT VARCHAR(512) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TDOMPARAM_PROTECTION STATE NOT NULL DEFAULT 2)
RETURNS (DOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
DOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
DOMPARAM_VALUE VARCHAR(255) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_DOMPARAM_VALUEBLB (I_TDOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TDOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL,
I_TDOMPARAM_VALUEBLB BLOB NOT NULL DEFAULT '')
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE SET_FBSERVER_INFOS (I_TFBSERVER_ID INTEGER NOT NULL,
I_TFBSERVER_NAME VARCHAR(50) CHARACTER SET UTF8 NOT NULL,
I_TFBSERVER_HOST VARCHAR(255) CHARACTER SET UTF8 NOT NULL,
I_TFBSERVER_FBADMLOGIN VARCHAR(31) CHARACTER SET UTF8 NOT NULL,
I_TFBSERVER_FBADMPASSWD VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_TCPPORT TCPPORT NOT NULL DEFAULT 0,
I_TFBSERVER_TUNNELPORT TCPPORT NOT NULL DEFAULT 0,
I_TFBSERVER_TUNNELHOST VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_LIBROOTPATH VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (FBSERVER_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_GEDGROUP_INFOS (I_TGEDGROUP_ID INTEGER NOT NULL,
I_TGEDGROUP_TOWNER_ID INTEGER NOT NULL,
I_TGEDGROUP_NAME VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TGEDGROUP_TYPE SMALLINT NOT NULL DEFAULT 0,
I_TGEDGROUP_COMMENT VARCHAR(8164) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDGROUP_PROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDGROUP_NO_MODIF_DATE BOOLEAN NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDGROUP_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_GEDPARAM (I_TGEDPARAM_ID INTEGER NOT NULL,
I_TGEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TGEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDPARAM_TYPE TYPE_PARAM NOT NULL DEFAULT 1,
I_TGEDPARAM_CLASS INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDPARAM_PROTECTION STATE NOT NULL DEFAULT 2,
I_TGEDPARAM_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAM_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDPARAM_ID INTEGER,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_GEDPARAMOWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TGEDPARAMOWNER_VALUE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMOWNER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMOWNER_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMOWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
OWNER_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_GEDPARAMOWNER_VALUEBLB (I_TOWNER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TGEDPARAMOWNER_VALUEBLB BLOB NOT NULL DEFAULT '')
RETURNS (GEDPARAMOWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_GEDPARAMPROF (I_TPROFILE_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TGEDPARAMPROF_VALUE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (PROFILE_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMPROF_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMPROF_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMPROF_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_GEDPARAMPROF_VALUEBLB (I_TPROFILE_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TGEDPARAMPROFVALUEBLB BLOB NOT NULL DEFAULT '')
RETURNS (GEDPARAMPROF_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_GEDPARAMUSER (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAMUSER_VALUE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
LIBRARY_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMUSER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMUSER_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_GEDPARAMUSER_VALUEBLB (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAMUSER_VALUEBLB BLOB NOT NULL DEFAULT '')
RETURNS (GEDPARAMUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_GEDPARAM_DEFAULTVALUEBLB (I_TGEDPARAM_ID INTEGER NOT NULL,
I_TGEDPARAM_DEFAULTVALUEBLB BLOB NOT NULL DEFAULT '')
RETURNS (GEDPARAM_ID INTEGER,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_GEDUSER_INFOS (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDUSER_TOWNER_ID INTEGER NOT NULL,
I_TGEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TGEDUSER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_COMMENT VARCHAR(8164) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_CHARGEABLE BOOLEAN DEFAULT 0,
I_TGEDUSER_TPROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_TGEDGROUP_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_TCONTACT_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_NO_MODIF_DATE BOOLEAN NOT NULL DEFAULT 0,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_GEDUSER_PASSWD (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDUSER_PASSWD VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_LIBRARY_INFOS (I_TLIBRARY_ID INTEGER NOT NULL,
I_TLIBRARY_TOWNER_ID INTEGER NOT NULL,
I_TLIBRARY_TFBSERVER_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_VERSION INTEGER NOT NULL DEFAULT '',
I_TLIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_CHARGEABLE BOOLEAN NOT NULL DEFAULT 0,
I_TLIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_ACCESS_MODE SMALLINT NOT NULL DEFAULT 0,
I_TLIBRARY_ACCESS_TYPE INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_SIZE_MB BIGINT NOT NULL DEFAULT 0,
I_TLIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_SIZE_MB_ORG BIGINT NOT NULL DEFAULT 0,
I_TLIBRARY_TPROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_LISTORDER INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_NO_MODIF_DATE BOOLEAN NOT NULL DEFAULT 0,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_OWNER_INFOS (I_TOWNER_ID INTEGER NOT NULL,
I_TOWNER_LOGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TOWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TOWNER_NAME VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_EXTERNAL_ID VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_COMMENT VARCHAR(8164) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_TPROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_TCONTACT_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_NO_MODIF_DATE BOOLEAN NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_OWNER_PASSWD (I_TOWNER_ID INTEGER NOT NULL,
I_TOWNER_PASSWD VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_PROFILE_INFOS (I_TPROFILE_ID INTEGER NOT NULL,
I_TPROFILE_OWNER_ID INTEGER NOT NULL,
I_TPROFILE_NAME VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TPROFILE_COMMENT VARCHAR(8164) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TPROFILE_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TPROFILE_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TPROFILE_NO_MODIF_DATE BOOLEAN NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_GEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (PROFILE_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_STATE (I_EXPR_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL,
I_CRITERIA VARCHAR(8000) CHARACTER SET UTF8 NOT NULL,
I_TARGETED_TABLE VARCHAR(255) CHARACTER SET UTF8 NOT NULL,
I_TARGETED_COLUMN VARCHAR(255) CHARACTER SET UTF8 DEFAULT 'STATE')
RETURNS (NEW_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_STORAGE (I_TSTORAGE_TOWNER_ID INTEGER NOT NULL,
I_TSTORAGE_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TSTORAGE_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL,
I_TSTORAGE_VALUE VARCHAR(8000) CHARACTER SET UTF8 NOT NULL,
I_TSTORAGE_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TSTORAGE_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0)
AS 
BEGIN EXIT; END ^
CREATE PROCEDURE SET_STRING_DATE (I_STRING VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (DATE_STRING TIMESTAMP)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SPLIT_BLOB (SQL_GETBLOB VARCHAR(8000) CHARACTER SET UTF8 NOT NULL,
FIELD_SEP VARCHAR(5) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (RESULTS VARCHAR(255) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE UNDEL_CONTACT (I_TCONTACT_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE UNDEL_FBSERVER (I_TFBSERVER_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE UNDEL_GEDUSER (I_TGEDUSER_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE UNDEL_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE UNDEL_OWNER (I_TOWNER_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
BEGIN SUSPEND; END ^

ALTER PROCEDURE ADD_CONTACT_TYPE_TO_OWNER (I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTTYPE_ID INTEGER NOT NULL,
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
AS 
/*
    Ajout d'un type de contact pour un propriétaire

    Le contact ET le propiétaire doivent exister préalamblement à l'appel de cette procédure
    
    Les colonnes "STATE" des tables parentes sont évaluées afin de savoir s'il est possible d'utiliser l'un et/ou l'autre (cf. gestion des colonnes STATE dans la documentation)
    
    Ne renvoi rien (ie. si pas d'erreur, insertion Ok)
    
    Si le couple existe déjà, une erreur SQL standard est levée (violation PK)
    
*/

DECLARE VARIABLE SQL_WHERE_CONTACT VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);

DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TCONTACT_STATE=TRIM(I_TCONTACT_STATE);

    SQL_WHERE_CONTACT = '';
    SQL_WHERE_OWNER = '' ;

    ID_OK=Null;

    /* Owner utilisable outrepassable)... */
    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    /* contact utilisable outrepassable)... */
    IF (:I_TCONTACT_STATE = '' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TCONTACT.STATE') INTO :SQL_WHERE_CONTACT;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TCONTACT_STATE, 'TCONTACT.STATE') INTO :SQL_WHERE_CONTACT; 

    EXECUTE STATEMENT '
        SELECT TCONTACT.ID FROM TCONTACT INNER JOIN TOWNER ON TCONTACT.TOWNER_ID=TOWNER.ID
        WHERE TCONTACT.ID=' || :I_TCONTACT_ID ||
            IIF (:SQL_WHERE_CONTACT != '' , ' AND ' || :SQL_WHERE_CONTACT, '') ||
            IIF (:SQL_WHERE_OWNER != '' , ' AND ' || :SQL_WHERE_OWNER, '')
        INTO ID_OK;

    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOCONTACT;

	/* Type de contact présent */
	IF (NOT EXISTS (SELECT ID FROM TCONTTYPE WHERE ID=:I_TCONTTYPE_ID)) THEN EXCEPTION EX_NOCONTTYPE;
        
    /* L'environnement est correct, on peut insérer */
    BEGIN
        INSERT INTO TCONTOWNER(TCONTACT_ID, TCONTTYPE_ID)
        VALUES(
            :I_TCONTACT_ID,
            :I_TCONTTYPE_ID
        );

        WHEN GDSCODE unique_key_violation DO
            EXCEPTION EX_CONTOWN_EXISTS;
    END
        
END ^

ALTER PROCEDURE ADD_CUSTOMER (TOWNER_NAME VARCHAR(100) CHARACTER SET UTF8,
OWNER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
OWNER_PASSWD VARCHAR(100) CHARACTER SET UTF8,
TOWNER_STATE STATE DEFAULT 0,
EXTERNAL_ID VARCHAR(100) CHARACTER SET UTF8 DEFAULT '',
TOWNER_COMMENT VARCHAR(8164) CHARACTER SET UTF8 DEFAULT '',
FBHOST VARCHAR(255) CHARACTER SET UTF8 DEFAULT '',
TLIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8 DEFAULT '',
TLIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8 DEFAULT '',
TLIBRARY_PATH VARCHAR(255) CHARACTER SET UTF8 DEFAULT '',
TLIBRARY_STATE STATE DEFAULT 0,
SUB_START DATE DEFAULT CURRENT_DATE,
SUB_END DATE DEFAULT NULL,
TLIBRARY_CHARGEABLE BOOLEAN DEFAULT 0)
AS 
DECLARE VARIABLE
	OWN_ID INTEGER;
DECLARE VARIABLE
	LIB_ID INTEGER; 
DECLARE VARIABLE
	TFB_ID INTEGER; 

BEGIN

	/*
	Cette procédure permet de créer/ajouter les éléments correspondants à client et/ou une librairie hébergée :
	- Owner :
		TOWNER_NAME, LOGIN, PASSWORD, TOWNER_STATE ==> Éléments à ajouter dans la table OWNER (voir ci-dessous)
		EXTERNAL_ID :
			* Si passé et déjà existant dans la table OWNER, on considère que le propriétaire est déjà créé
			(les paramètres TOWNER_NAME, LOGIN, PASSWORD, TOWNER_STATE, TOWNER_COMMENT sont ignorés dans ce cas)
			* Si passé et non existant dans la table, utilisé avec les paramètres TOWNER_NAME, LOGIN, PASSWORD, TOWNER_STATE, TOWNER_COMMENT
			pour créer un NOUVEAU OWNER...
			* Si non passé, ajout d'un nouvel OWNER avec les paramètres TOWNER_NAME, LOGIN, PASSWORD, TOWNER_STATE, TOWNER_COMMENT
	- Serveur Firebird :
		FB_HOST : host fqdn devant exité dans la table TFBSERVER (aucun ajout de serveur Firebird n'est effectué)
	- Bilbiothèque
		TLIBRARY_NAME, TLIBRARY_TITLE, TLIBRARY_PATH, TLIBRARY_STATE, SUB_START, SUB_END, TLIBRARY_CHARGEABLE => Éléments à ajouter à la table TLIBRARY
		On considère que la labrairie doit toujours être ajoutée...
	- Profils
		TPROFILE_NAME, TPROFILE_WEB_THEME, TPROFILE_WEB_BACKGROUND, TPROFILE_DESC

	TODO : scinder pour traitement de chaque entité et voir 1 Méta procédure unique de traitement

MAJ V12 :
	- DOM_LOGIN/DOM_PASSWD ==> OWNER_LOGIN/OWNER_PASSWD
*/

	/* Recherche du hostname du serveur Firebird dans la trable idoine*/
	SELECT ID FROM TFBSERVER WHERE HOST=:FBHOST INTO TFB_ID;
	/* Si non trouvé, exception personnalisée*/
	IF (TFB_ID IS NULL) THEN 
		EXCEPTION EX_NOFBSER;
	
	/*
		Recherche d'un owner déjà existant (basé sur Code externe GENESYS passé en paramètre)
		Bien sur dans ce cas on n'estime que le OWNER existe déjà et il n'est pas créé...
	
	*/
	OWN_ID = NULL;
	IF (EXTERNAL_ID IS NOT NULL AND EXTERNAL_ID != '') THEN
		BEGIN
			SELECT ID FROM TOWNER WHERE EXTERNAL_ID=:EXTERNAL_ID INTO :OWN_ID;
        END

    IF (OWN_ID IS NULL) THEN
        BEGIN
            /* Ajout OWNER */
            INSERT INTO TOWNER (NAME, LOGIN, PASSWD, STATE, EXTERNAL_ID, "COMMENT")
                VALUES (
                    :TOWNER_NAME, 
                    :OWNER_LOGIN, 
                    :OWNER_PASSWD, 
                    COALESCE(:TOWNER_STATE,0), 
                    :EXTERNAL_ID, 
                    :TOWNER_COMMENT
                ) RETURNING ID INTO :OWN_ID;
        END
	
	/* Ajout LIBRARY */
	/*
	Les dates de début et de fin sont calculées si non fournies :
	- CURRENT_DATE
	- CURRENT_DATE + 1 YEAR - 1 DAY (par défaut, abonnement d'un an)
	*/
	INSERT INTO TLIBRARY (TOWNER_ID, TFBSERVER_ID, "COMMENT", TITLE, DBPATH, STATE, SUBSCRIBE_START, SUBSCRIBE_END, CHARGEABLE)
		VALUES (
			:OWN_ID, 
			:TFB_ID, 
			:TLIBRARY_COMMENT, 
			:TLIBRARY_TITLE, 
			:TLIBRARY_PATH, 
			COALESCE(:TLIBRARY_STATE,0), 
			COALESCE(:SUB_START,CURRENT_DATE), 
			COALESCE(:SUB_END, DATEADD(1 YEAR TO CURRENT_DATE)-1),
			COALESCE(:TLIBRARY_CHARGEABLE,1)
	) RETURNING ID INTO LIB_ID;
	
-- 	/* Ajout PROFILE */
-- 	/* Nom de profil = "Nom de client + (Profil par défaut)" si non fourni... */
-- 	INSERT INTO TPROFILE (NAME, TOWNER_ID, WEB_THEME, WEB_BACKGROUND, DESCRIPTION)
-- 		VALUES (
-- 			COALESCE(:TPROFILE_NAME, :TOWNER_NAME || ' (Profil par défaut)'),
-- 			:OWN_ID, 
-- 			:TPROFILE_WEB_THEME, 
-- 			:TPROFILE_WEB_BACKGROUND, 
-- 			:TPROFILE_DESC
-- 		) RETURNING ID INTO PROF_ID;
-- 
-- 	/* Ajout ACCESS */
-- 	INSERT INTO TACCESS (TPROFILE_ID, TLIBRARY_ID)
-- 		VALUES (
-- 			:PROF_ID, 
-- 			:LIB_ID
-- 		);

END ^

ALTER PROCEDURE ADD_GEDGROUP_TO_LIBRARY (I_TGEDGROUP_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL,
I_TPROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
AS 
/*
    Création d'une association Groute Utilisateur GED / Bibliothèque
    
    Les STATES de tous les parents sont examinés...

V32 :
	- Création
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDGROUP VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

	SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
	SQL_WHERE_GEDGROUP = '';

	ID_OK = Null;

	/* PROFILE existant */
	IF (I_TPROFILE_ID!=0 AND NOT EXISTS (SELECT ID FROM TPROFILE WHERE ID=:I_TPROFILE_ID)) THEN EXCEPTION EX_NOPROFILE;	

    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
	/* Même OWNER pour TLIBRARY et TGEDUSER */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    -- Groupe GED 
    EXECUTE STATEMENT '
        SELECT TOWNER.ID FROM TOWNER INNER JOIN TGEDGROUP ON TOWNER.ID=TGEDGROUP.TOWNER_ID
        WHERE TGEDGROUP.ID=' || :I_TGEDGROUP_ID ||
            IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
        INTO ID_OK;

    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDGROUP;

    ID_OK=Null;
    
   /* Serveur Firebird (si non Null) utilisable outrepassable...*/
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

   -- Library existante et modifiable...
    IF (:I_TLIBRARY_STATE ='' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

    /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TLIBRARY.ID
		FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;

    /* L'environnement est correct, on peut insérer */
    BEGIN
        INSERT INTO TGEDGROUPLIB(TGEDGROUP_ID, TLIBRARY_ID, TPROFILE_ID)
        VALUES(
            :I_TGEDGROUP_ID,
            :I_TLIBRARY_ID,
            NULLIF(:I_TPROFILE_ID,0)
        );
        
        /* Traitement violation PK */
        WHEN GDSCODE unique_key_violation DO
            EXCEPTION EX_GEDGROUPLIB_EXISTS;
    END


END ^

ALTER PROCEDURE ADD_GEDUSER_TO_GEDGROUP (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDGROUP_ID INTEGER NOT NULL,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
AS 
/*
    Création d'une association Utilisateur GED / Groupe d'utilisateur
    
    Les STATES de tous les parents sont examinés...
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);

	SQL_WHERE_OWNER = '';
	SQL_WHERE_GEDUSER = '';
	ID_OK = Null;

    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
	/* Même OWNER pour TLIBRARY et TGEDUSER */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    -- GEDGROUP Ok
    EXECUTE STATEMENT '
        SELECT TGEDGROUP.ID FROM TOWNER INNER JOIN TGEDGROUP ON TOWNER.ID=TGEDGROUP.TOWNER_ID
        WHERE TGEDGROUP.ID=' || :I_TGEDGROUP_ID ||
            IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
        INTO ID_OK;
        
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDGROUP;

    ID_OK=Null;

    -- Utilisateur GED 
    IF (I_TGEDUSER_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER; 

    -- GEDUSER Ok
    EXECUTE STATEMENT '
        SELECT TOWNER.ID FROM TOWNER INNER JOIN TGEDUSER ON TOWNER.ID=TGEDUSER.TOWNER_ID
        WHERE TGEDUSER.ID=' || :I_TGEDUSER_ID ||
            IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '') ||
            IIF (:SQL_WHERE_GEDUSER != '' , ' AND (' || :SQL_WHERE_GEDUSER || ')', '')
        INTO ID_OK;

    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDUSER;

    /* L'environnement est correct, on peut insérer */
    BEGIN
        INSERT INTO TGEDGROUPUSER(TGEDGROUP_ID, TGEDUSER_ID)
        VALUES(
            :I_TGEDGROUP_ID,
            :I_TGEDUSER_ID
        );
        
        /* Traitement violation PK */
        WHEN GDSCODE unique_key_violation DO
            EXCEPTION EX_GEDGROUPUSER_EXISTS;
    END


END ^

ALTER PROCEDURE ADD_GEDUSER_TO_LIBRARY (I_TGEDUSER_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL,
I_TPROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
AS 
/*
    Création d'une association Utilisateur GED / Bibliothèque
    
    Les STATES de tous les parents sont examinés...
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

	SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
	SQL_WHERE_GEDUSER = '';
	ID_OK = Null;



	/* PROFILE existant */
	IF (I_TPROFILE_ID!=0 AND NOT EXISTS (SELECT ID FROM TPROFILE WHERE ID=:I_TPROFILE_ID)) THEN EXCEPTION EX_NOPROFILE;	

    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
	/* Même OWNER pour TLIBRARY et TGEDUSER */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    -- Utilisateur GED 
    IF (I_TGEDUSER_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER; 

    -- GEDUSER Ok
    EXECUTE STATEMENT '
        SELECT TOWNER.ID FROM TOWNER INNER JOIN TGEDUSER ON TOWNER.ID=TGEDUSER.TOWNER_ID
        WHERE TGEDUSER.ID=' || :I_TGEDUSER_ID ||
            IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '') ||
            IIF (:SQL_WHERE_GEDUSER != '' , ' AND (' || :SQL_WHERE_GEDUSER || ')', '')
        INTO ID_OK;

    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDUSER;

    ID_OK=Null;
    
   /* Serveur Firebird (si non Null) utilisable outrepassable...*/
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

   -- Library existante et modifiable...
    IF (:I_TLIBRARY_STATE ='' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

    /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TLIBRARY.ID
		FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;

    /* L'environnement est correct, on peut insérer */
    BEGIN
        INSERT INTO TGEDUSERLIB(TGEDUSER_ID, TLIBRARY_ID, TPROFILE_ID)
        VALUES(
            :I_TGEDUSER_ID,
            :I_TLIBRARY_ID,
            NULLIF(:I_TPROFILE_ID,0)
        );
        
        /* Traitement violation PK */
        WHEN GDSCODE unique_key_violation DO
            EXCEPTION EX_GEDUSERLIB_EXISTS;
    END


END ^

ALTER PROCEDURE ADD_LOGSYNC (I_TLIBRARY_ID INTEGER NOT NULL,
I_SYNC_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL,
I_SYNC_STOP VARCHAR(20) CHARACTER SET UTF8 NOT NULL,
I_SYNC_SIZE_BEFORE BIGINT NOT NULL,
I_SYNC_SIZE_AFTER BIGINT NOT NULL,
I_SYNC_STATE BOOLEAN NOT NULL,
I_SYNC_ERR_COMMENT VARCHAR(4196) CHARACTER SET UTF8 NOT NULL DEFAULT '')
AS 
/*
    Enregistrement d'un log de synchro...
    Attention, tous les apramètres sont obligatoires (sauf comment)
    
V13 :
    - création

V19 :
	- Tailles enregistrées telles quelles (et plus NULL si = 0)

V25
    - Mise à jour du TOWNER_ID dans le trigger (plus dans la PS) ==> plus propre...
*/

BEGIN
    IF (NOT EXISTS (SELECT ID FROM TLIBRARY WHERE ID=:I_TLIBRARY_ID)) THEN
        EXCEPTION EX_NOLIB;
        
    -- On y va directement
    INSERT INTO TLOGSYNC(TLIBRARY_ID, TIME_START, TIME_END, SIZE_BEFORE, SIZE_AFTER, STATE, ERR_COMMENT)
    VALUES (
        :I_TLIBRARY_ID,
        (SELECT DATE_STRING FROM SET_STRING_DATE(:I_SYNC_START)),
        (SELECT DATE_STRING FROM SET_STRING_DATE(:I_SYNC_STOP)),
        :I_SYNC_SIZE_BEFORE,
        :I_SYNC_SIZE_AFTER,
        :I_SYNC_STATE,
        NULLIF(:I_SYNC_ERR_COMMENT,'')
    );
END ^

ALTER PROCEDURE DEL_CONTACT (I_TCONTACT_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
/*
    Suppression logique d'un contact dans la table correspondante
    
    Paramètres : 
    - I_CONTACT_ID : Code contact

    Particularités :
    Cette suppression est une suppression logique (ie. on garde l'enregistrement physique présent dans la table) qui correspond à la mise à jour
    de la colonne STATE de l'enregistrement cible avec la valeur "1" (valeur d'état référencée comme étant la suppression)
        
    Retourne :
    - NEW_STATE : Nouvel état du proriétaire obtenu après suppression logique
        
    Attention
    - cette procédure lève des erreurs en cas de "suppresion" (mise à jour de colonne STATE) impossible

V17 :
    - Nouvelle Gestion SECTION TDOMPARAM
*/

BEGIN

    /* Contact existant */
    IF (NOT EXISTS (SELECT ID FROM TCONTACT WHERE ID=:I_TCONTACT_ID)) THEN EXCEPTION EX_NOCONTACT;
    
    /* MAJ de la colonne STATE, on ajoute la valeur DOM_RECORD_DELETED (1 par défaut) */
    SELECT NEW_STATE FROM SET_STATE('+' || COALESCE(CAST((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')) AS INTEGER),1),'TCONTACT.ID=' || :I_TCONTACT_ID,'TCONTACT','STATE') INTO :NEW_STATE;
    SUSPEND;
    
END ^

ALTER PROCEDURE DEL_CONTACT_TYPE_FOR_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL,
I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTTYPE_ID INTEGER NOT NULL)
AS 
/*
    Suppression *physique* d'une  association contact/librairie dans la table TACCESS
    
    Paramètres : 
    - I_TLIBRARY_ID : Code librairie
    - I_TCONTACT_ID : Code contact
    
    Particularités :
    Cette suppression est une suppression *physique* (ie. DELETE SQL)
    Les STATE des parents NE SONT PAS évalués (choix arbitraire)
        
    Retourne :
    - Rien
        
    Attention
    - cette procédure lève des erreurs en cas de "suppression" impossible    
*/
BEGIN
    DELETE FROM TCONTLIB WHERE TLIBRARY_ID=:I_TLIBRARY_ID AND TCONTACT_ID=:I_TCONTACT_ID AND TCONTTYPE_ID=:I_TCONTTYPE_ID;
    
    IF (ROW_COUNT=0) THEN EXCEPTION EX_NOCONTLIB;

END ^

ALTER PROCEDURE DEL_CONTACT_TYPE_FOR_OWNER (I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTTYPE_ID INTEGER NOT NULL)
AS 
/*
    Suppression *physique* d'une  association contact Type dans la table TCONTOWNER
    
    Paramètres : 
    - I_TCONTACT_ID : Code contact
	- I_TCONTTYPE_ID : Code type de contact
    
    Particularités :
    Cette suppression est une suppression *physique* (ie. DELETE SQL)
    Les STATE des parents NE SONT PAS évalués (choix arbitraire)
        
    Retourne :
    - Rien
        
    Attention
    - cette procédure lève des erreurs en cas de "suppression" impossible    
*/
BEGIN
    DELETE FROM TCONTOWNER WHERE TCONTTYPE_ID=:I_TCONTTYPE_ID AND TCONTACT_ID=:I_TCONTACT_ID;
    
    IF (ROW_COUNT=0) THEN EXCEPTION EX_NOCONTOWN;

END ^

ALTER PROCEDURE DEL_CONTTYPE (I_TCONTTYPE_ID INTEGER NOT NULL)
AS 
/*
    Suppression (physique) d'un type de contact
    
*/

BEGIN
	DELETE FROM TCONTTYPE WHERE ID=:I_TCONTTYPE_ID;

	IF (ROW_COUNT=0) THEN EXCEPTION EX_NOCONTTYPE;

	WHEN GDSCODE foreign_key DO
		EXCEPTION EX_CONTTYPE_INUSE;
END ^

ALTER PROCEDURE DEL_DOMPARAM (I_TDOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TDOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL)
AS 
/*
	Suppression (physique) d'un paramètre DOMAIN

V13 :
	- Création

V 17 :
	- Ajout SECTION

V18 :
	- Force les paramètres NOT NULL En entrée...

V20 :
    - SYSTEM ==> PROTECTION
    - Plus de test (NAS s'en occupe directement)
	- Paramètre I_FORCE BOOLEAN NOT NULL DEFAULT 0 supprimé
	
*/
BEGIN

    -- Test existence et SYSTEM
    /* V 20 : obsolète
    IF (EXISTS (SELECT NAME FROM TDOMPARAM WHERE SECTION=:I_TDOMPARAM_SECTION AND NAME = :I_TDOMPARAM_NAME AND SYSTEM=1) AND I_FORCE !=1) THEN
        EXCEPTION EX_DOMPARAMSYSTEM;
    */

    DELETE FROM TDOMPARAM WHERE SECTION=:I_TDOMPARAM_SECTION AND NAME = :I_TDOMPARAM_NAME;
    
	IF (ROW_COUNT=0) THEN EXCEPTION EX_NODOMPARAM;
    
END ^

ALTER PROCEDURE DEL_FBSERVER (I_TFBSERVER_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
/*
    Suppression logique d'un Serveur Firebirf dans la table correspondante
    
    Paramètres : 
    - I_TFBSERVER_ID : Code serveur Firebird

    Particularités :
    Cette suppression est une suppression logique (ie. on garde l'enregistrement physique présent dans la table) qui correspond à la mise à jour
    de la colonne STATE de l'enregistrement cible avec la valeur "1" (valeur d'état référencée comme étant la suppression)
        
    Retourne :
    - NEW_STATE : Nouvel état du proriétaire obtenu après suppression logique
        
    Attention
    - cette procédure lève des erreurs en cas de "suppresion" (mise à jour de colonne STATE) impossible

V17 :    
    - Nouvelle Gestion SECTION TDOMPARAM

V31 :
	- Exception spécifique
*/

DECLARE VARIABLE TAGDEL VARCHAR(30);

BEGIN

    /* Serveur existant */
    IF (NOT EXISTS (SELECT ID FROM TFBSERVER WHERE ID=:I_TFBSERVER_ID)) THEN EXCEPTION EX_NOFBSER;

    /* MAJ de la colonne STATE, on ajoute la valeur DOM_RECORD_DELETED (1 par défaut) */
    SELECT NEW_STATE FROM SET_STATE('+' || COALESCE(CAST((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')) AS INTEGER),1),'TFBSERVER.ID=' || :I_TFBSERVER_ID,'TFBSERVER','STATE') INTO :NEW_STATE;

    -- Récupération du paramètre ou init par défaut
    TAGDEL =COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','SEP_TM_DELETED')),' ### ') ||
            (SELECT DATE_STRING FROM GET_DATE_STRING(CURRENT_TIMESTAMP)) ||
            COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','SEP_TM_DELETED')),' ### ');
    UPDATE
        TFBSERVER SET
            NAME = TRIM(TRIM(NAME) || :TAGDEL)
    WHERE ID = :I_TFBSERVER_ID;

    SUSPEND;

    -- NAME trop court pour stocker le tag de suppression
    WHEN GDSCODE arith_except
        DO EXCEPTION EX_DELCOLOVERFLOW;
    
END ^

ALTER PROCEDURE DEL_GEDGROUP (I_TGEDGROUP_ID INTEGER NOT NULL)
AS 
/*
    Suppression physique d'un Groupe d'utilisateur GED

MAJ V 33 :
	- Ajout de suppression TGEDGROUPLIB et UPDATE TGEDUSER
*/

BEGIN

    -- Suppression des records enfants
    DELETE FROM TGEDGROUPUSER WHERE TGEDGROUP_ID=:I_TGEDGROUP_ID;
	DELETE FROM TGEDGROUPLIB WHERE TGEDGROUP_ID=:I_TGEDGROUP_ID;
	-- MAJ Groupes principaux
	UPDATE TGEDUSER SET TGEDGROUP_ID=NULL WHERE TGEDGROUP_ID=:I_TGEDGROUP_ID;

	DELETE FROM TGEDGROUP WHERE ID=:I_TGEDGROUP_ID;

	IF (ROW_COUNT=0) THEN EXCEPTION EX_NOGEDGROUP;

	-- Ne devrait plus arriver depuis V33 car nettoyage "complet" des records enfants...
	WHEN GDSCODE foreign_key DO
		EXCEPTION EX_GEDGROUP_INUSE;

END ^

ALTER PROCEDURE DEL_GEDGROUP_FOR_LIBRARY (I_TGEDGROUP_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL)
AS 
/*
	Suppression (physique) d'une association Groupde d'Utlisateur GED/Library dans la table TGEDGROUPLIB

    Les STATE des parents NE SONT PAS évalués (choix arbitraire)
        
    Retourne :
    - Rien
        
    Attention
    - cette procédure lève des erreurs en cas de "suppression" impossible   

V 32 :
	Création

*/
BEGIN

	DELETE FROM TGEDGROUPLIB WHERE TLIBRARY_ID=:I_TLIBRARY_ID AND TGEDGROUP_ID=:I_TGEDGROUP_ID;

    IF (ROW_COUNT=0) THEN EXCEPTION EX_NOGEDGROUPLIB;

END ^

ALTER PROCEDURE DEL_GEDPARAM (I_TGEDPARAM_ID INTEGER NOT NULL)
AS 
/*
	Suppression (physique) d'un paramètre GED
	Une erreur est levée si le paramètre est utilisé ou inexistant

V13 :
	- MAJ pour exception si GEDPARAM inexistant...
V18 :
	- Force les paramètres NOT NULL En entrée...
*/
BEGIN
    DELETE FROM TGEDPARAM WHERE ID = :I_TGEDPARAM_ID;

	IF (ROW_COUNT=0) THEN EXCEPTION EX_NOGEDPARAM;

	WHEN GDSCODE foreign_key DO -- FK Not FOUND (GEDPARAM car PROFILE est testé en début de PS)
		EXCEPTION EX_GEDPARAM_INUSE;
END ^

ALTER PROCEDURE DEL_GEDPARAMOWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL)
AS 
/*
	Suppression d'un paramètre GED pour un Propriétaire

	Les STATE parents ne sont PAS évalués (choix arbitraire)

	Une erreur est levée si l'association n'existe pas...

V21 :
    - Création

V40 :
	- Factorisation TGEDPARAM 
*/

BEGIN

	DELETE FROM TGEDPARAMOWNER WHERE TOWNER_ID=:I_TOWNER_ID AND TGEDPARAM_ID = :I_TGEDPARAM_ID;-- (SELECT ID FROM TGEDPARAM TGP WHERE TGP."SECTION"=:I_TGEDPARAM_SECTION AND TGP."NAME" = :I_TGEDPARAM_NAME);
	IF (ROW_COUNT=0) THEN EXCEPTION EX_NOGEDPARAMOWNER;

END ^

ALTER PROCEDURE DEL_GEDPARAMPROF (I_TPROFILE_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL)
AS 
/*
	Suppression d'un paramètre GED dans un Profil

	Les STATE parents ne sont PAS évalués (choix arbitraire)

	Une erreur est levée si l'association n'existe pas...

V40 :
	- Factorisation TGEDPARAM
*/

BEGIN

	DELETE FROM TGEDPARAMPROF WHERE TPROFILE_ID=:I_TPROFILE_ID AND TGEDPARAM_ID=:I_TGEDPARAM_ID ;--(SELECT ID FROM TGEDPARAM TGP WHERE TGP."SECTION"=:I_TGEDPARAM_SECTION AND TGP."NAME" = :I_TGEDPARAM_NAME);

	IF (ROW_COUNT=0) THEN EXCEPTION EX_NOGEDPARAMPROF;

END ^

ALTER PROCEDURE DEL_GEDPARAMUSER (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0)
AS 
/*
	Suppression d'un paramètre GED pour un GEDUSER

	Les STATE parents ne sont PAS évalués (choix arbitraire)

	Une erreur est levée si l'association n'existe pas...

V40 :
	- Factorisation TGEDPARAM 
*/

DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);

BEGIN

    IF (I_TLIBRARY_ID = 0) THEN
        DELETE FROM TGEDPARAMUSER 
        WHERE TGEDUSER_ID=:I_TGEDUSER_ID AND TGEDPARAM_ID=:I_TGEDPARAM_ID; -- (SELECT ID FROM TGEDPARAM TGP WHERE TGP."SECTION"=:I_TGEDPARAM_SECTION AND TGP."NAME" = :I_TGEDPARAM_NAME);

    ELSE
        DELETE FROM TGEDPARAMUSER 
        WHERE TGEDUSER_ID=:I_TGEDUSER_ID AND TLIBRARY_ID=:I_TLIBRARY_ID AND TGEDPARAM_ID=:I_TGEDPARAM_ID;  --(SELECT ID FROM TGEDPARAM TGP WHERE TGP."SECTION"=:I_TGEDPARAM_SECTION AND TGP."NAME" = :I_TGEDPARAM_NAME) 


	IF (ROW_COUNT=0) THEN EXCEPTION EX_NOGEDPARAMUSER;

END ^

ALTER PROCEDURE DEL_GEDUSER (I_TGEDUSER_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
/*
    Suppression logique d'un utilisateur GED
    
    Paramètres : 
    - I_TGEDUSER_ID : Code Utilisateur GED

    Particularités :
    Cette suppression est une suppression logique (ie. on garde l'enregistrement physique présent dans la table) qui correspond à la mise à jour
    de la colonne STATE de l'enregistrement cible avec la valeur "1" (valeur d'état référencée comme étant la suppression)
    On ne teste aucun STATE (ni parent, ni enfant), puisqu'on est en train de le mettre à jour...
        
    Retourne :
    - NEW_STATE : Nouvel état de la bibliothèque obtenu après suppression logique
        
    Attention
    - cette procédure lève des erreurs en cas de "suppression" (mise à jour de colonne STATE) impossible

MAJ V12 :
	- GED_LOGIN ==> LOGIN (gestion des tag suppression)
    
V17 :
    - Nouvelle Gestion SECTION TDOMPARAM

V31 :
	- Exception spécifique
	
V34 :
    - MAJ TPROFILE.NAME avec TIMESTAMP pour pouvoir recréer un profil avec le nom "libéré"
*/
BEGIN
    /* Utilisateur GED existante */
    IF (NOT EXISTS (SELECT ID FROM TGEDUSER WHERE ID=:I_TGEDUSER_ID)) THEN EXCEPTION EX_NOGEDUSER;    
    
    /* MAJ de la colonne STATE, on ajoute la valeur DOM_RECORD_DELETED (1 par défaut) */
    SELECT NEW_STATE FROM SET_STATE('+' || COALESCE(CAST((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')) AS INTEGER),1),'TGEDUSER.ID=' || :I_TGEDUSER_ID,'TGEDUSER','STATE') INTO :NEW_STATE;

    /* MAJ du login du geduser pour marquage avec la date de suppression */
    UPDATE TGEDUSER SET LOGIN = TRIM(LOGIN || 
        -- Récupération du paramètre ou init par défaut
        COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','SEP_TM_DELETED')),' ### ') ||
        (SELECT DATE_STRING FROM GET_DATE_STRING(CURRENT_TIMESTAMP)) || 
        COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','SEP_TM_DELETED')),' ### ')
		)
    WHERE ID = :I_TGEDUSER_ID;

    -- Ajout V34
    UPDATE TPROFILE SET "NAME" = TRIM("NAME" || 
        -- Récupération du paramètre ou init par défaut
        COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','SEP_TM_DELETED')),' ### ') ||
        (SELECT DATE_STRING FROM GET_DATE_STRING(CURRENT_TIMESTAMP)) || 
        COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','SEP_TM_DELETED')),' ### ')
		)
    WHERE TGEDUSER_ID = :I_TGEDUSER_ID;
    
    SUSPEND;

	-- LOGIN trop court pour stocker le tag de suppression
    WHEN GDSCODE arith_except
        DO EXCEPTION EX_DELCOLOVERFLOW;
    
END ^

ALTER PROCEDURE DEL_GEDUSER_FOR_GEDGROUP (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDGROUP_ID INTEGER NOT NULL)
AS 
/*
	Suppression (physique) d'une association Utlisateur GED/Groupe GED

    Les STATE des parents NE SONT PAS évalués (choix arbitraire)
        
    Retourne :
    - Rien
        
    Attention
    - cette procédure lève des erreurs en cas de "suppression" impossible   
*/
BEGIN

	DELETE FROM TGEDGROUPUSER WHERE TGEDGROUP_ID=:I_TGEDGROUP_ID AND TGEDUSER_ID=:I_TGEDUSER_ID;

    IF (ROW_COUNT=0) THEN EXCEPTION EX_NOGEDGROUPUSER;

END ^

ALTER PROCEDURE DEL_GEDUSER_FOR_LIBRARY (I_TGEDUSER_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL)
AS 
/*
	Suppression (physique) d'une association Utlisateur GED/Library dans la table TGEDUSERLIB

    Les STATE des parents NE SONT PAS évalués (choix arbitraire)
        
    Retourne :
    - Rien
        
    Attention
    - cette procédure lève des erreurs en cas de "suppression" impossible   
*/
BEGIN

	DELETE FROM TGEDUSERLIB WHERE TLIBRARY_ID=:I_TLIBRARY_ID AND TGEDUSER_ID=:I_TGEDUSER_ID;

    IF (ROW_COUNT=0) THEN EXCEPTION EX_NOGEDUSERLIB;

END ^

ALTER PROCEDURE DEL_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
/*
    Suppression logique d'une bibliothèque dans la table correspondante
    
    Paramètres : 
    - I_TLIBRARY_ID : Code bibliothèque

    Particularités :
    Cette suppression est une suppression logique (ie. on garde l'enregistrement physique présent dans la table) qui correspond à la mise à jour
    de la colonne STATE de l'enregistrement cible avec la valeur "1" (valeur d'état référencée comme étant la suppression)
    On ne teste aucun STATE (ni parent, ni enfant), puisqu'on est en train de le mettre à jour...
        
    Retourne :
    - NEW_STATE : Nouvel état de la bibliothèque obtenu après suppression logique
        
    Attention
    - cette procédure lève des erreurs en cas de "suppression" (mise à jour de colonne STATE) impossible
    
V17 :
    - Nouvelle Gestion SECTION TDOMPARAM

V31 :
	- Exception spécifique

V34
    - MAJ TPROFILE.NAME avec TIMESTAMP pour pouvoir recréer un profil avec le nom "libéré"

*/

BEGIN

    /* Library existante */
    IF (NOT EXISTS (SELECT ID FROM TLIBRARY WHERE ID=:I_TLIBRARY_ID)) THEN EXCEPTION EX_NOLIB;    
    
    /* MAJ de la colonne STATE, on ajoute la valeur DOM_RECORD_DELETED (1 par défaut) */
    SELECT NEW_STATE FROM SET_STATE('+' || COALESCE(CAST((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')) AS INTEGER),1),'TLIBRARY.ID=' || :I_TLIBRARY_ID,'TLIBRARY','STATE') INTO :NEW_STATE;
    /* MAJ du title de la library pour marquage avec la date de suppression (Unicité TONWER_ID+TITLE) */
    UPDATE TLIBRARY SET TITLE = TRIM(TITLE || 
        -- Récupération du paramètre ou init par défaut
        COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','SEP_TM_DELETED')),' ### ') ||
        (SELECT DATE_STRING FROM GET_DATE_STRING(CURRENT_TIMESTAMP)) || 
        COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','SEP_TM_DELETED')),' ### ')
		)
    WHERE ID = :I_TLIBRARY_ID;
    
    -- Ajout V34
    UPDATE TPROFILE SET "NAME" = TRIM("NAME" || 
        -- Récupération du paramètre ou init par défaut
        COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','SEP_TM_DELETED')),' ### ') ||
        (SELECT DATE_STRING FROM GET_DATE_STRING(CURRENT_TIMESTAMP)) || 
        COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','SEP_TM_DELETED')),' ### ')
		)
    WHERE  TLIBRARY_ID = :I_TLIBRARY_ID;
    
    SUSPEND;

	-- TITLE trop court pour stocker le tag de suppression
    WHEN GDSCODE arith_except
        DO EXCEPTION EX_DELCOLOVERFLOW;
    
END ^

ALTER PROCEDURE DEL_OWNER (I_TOWNER_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
/*
    Suppression logique d'un propriétaire dans la table correspondante
   
    Paramètres :
    - I_TOWNER_ID : Code propriétaire

    Particularités :
    Cette suppression est une suppression logique (ie. on garde l'enregistrement physique présent dans la table) qui correspond à la mise à jour
    de la colonne STATE de l'enregistrement cible avec la valeur "1" (valeur d'état référencée comme étant la suppression)
       
    Retourne :
    - NEW_STATE : Nouvel état du proriétaire obtenu après suppression logique
       
    Attention
    - cette procédure lève des erreurs en cas de "suppresion" (mise à jour de colonne STATE) impossible
   
MAJ V12 :
	- DOM_LOGIN ==> LOGIN (gestion des tag suppression)

V17 :
    - Nouvelle Gestion SECTION TDOMPARAM

V31 :
	- Exception spécifique
*/

DECLARE VARIABLE TAGDEL VARCHAR(30);

BEGIN

    /* Owner existant */
    IF (NOT EXISTS (SELECT ID FROM TOWNER WHERE ID=:I_TOWNER_ID)) THEN EXCEPTION EX_NOOWNER;
   
    /* MAJ de la colonne STATE, on ajoute la valeur DOM_RECORD_DELETED (1 par défaut) */
    SELECT NEW_STATE FROM SET_STATE('+' || COALESCE(CAST((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')) AS INTEGER),1),'TOWNER.ID=' || :I_TOWNER_ID,'TOWNER','STATE') INTO :NEW_STATE;
   
    -- Récupération du paramètre ou init par défaut
    TAGDEL =COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','SEP_TM_DELETED')),' ### ') ||
            (SELECT DATE_STRING FROM GET_DATE_STRING(CURRENT_TIMESTAMP)) ||
            COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','SEP_TM_DELETED')),' ### ');

    UPDATE
        TOWNER SET
            LOGIN = TRIM(TRIM(LOGIN) || :TAGDEL),
            SUBDOMAIN = TRIM(TRIM(SUBDOMAIN) || :TAGDEL),
            EXTERNAL_ID = TRIM(TRIM(COALESCE(EXTERNAL_ID,'')) || :TAGDEL)
    WHERE ID = :I_TOWNER_ID;

    SUSPEND;

    -- LOGIN trop court pour stocker le tag de suppression
    WHEN GDSCODE arith_except
        DO EXCEPTION EX_DELCOLOVERFLOW;
END ^

ALTER PROCEDURE DEL_PROFILE (I_TPROFILE_ID INTEGER NOT NULL)
AS 
/*
    Suppression (physique ==> Pas de STATE...) d'un Profil
V18 :
	- Force les paramètres NOT NULL En entrée...
*/

BEGIN
    -- Suppression des records enfants dans TGEDPARAMPROF
    DELETE FROM TGEDPARAMPROF WHERE TPROFILE_ID = :I_TPROFILE_ID;

	DELETE FROM TPROFILE WHERE ID = :I_TPROFILE_ID;

	IF (ROW_COUNT=0) THEN EXCEPTION EX_NOPROFILE;

	WHEN GDSCODE foreign_key DO
		EXCEPTION EX_PROFILE_INUSE;
END ^

ALTER PROCEDURE DEL_STORAGES (I_TOWNER_ID INTEGER NOT NULL,
I_TSTORAGE_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TSTORAGE_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TSTORAGE_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TSTORAGE_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '')
AS 
/*
	Suppression de paramètre(s) TSTORAGE

	Si TLIBRARY_ID et/ou TGEDUSER_ID est passé, on ne vérifie pas qu'il(s) corresponde(nt) au OWNER_ID...
	Les STATES OWNER/GEDUSER/LIBRARY ne sont PAS évaluées par cette procédure...
	On pratique par filtage successif sur les paramètres passés, DANS l'ORDRE de l'index "STORAGE_UNI" (pour l'accrocher)
	TODO :
		Revoir les index car si TOWNER et/ou SECTION/NAME non passée(s) on n'accroche pas l'index TSTORAGE_UNI
		Prévoi rdes index additionnels sur SECTION/NAME ?
	
	

V40 :
	- Création

*/

DECLARE VARIABLE NULL_PARAM INTEGER;

DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
DECLARE VARIABLE COUNT_DEL INTEGER;

BEGIN

    -- OWNER obligatoire si GEDUSER/LIBRARY non fourni
    IF (:I_TOWNER_ID=0 AND :I_TSTORAGE_TGEDUSER_ID<=0 AND I_TSTORAGE_TLIBRARY_ID<=0) THEN
        EXCEPTION EX_BAD_PARAM;
    
    -- dummy WHERE pour OWNER_ID non passé...
    -- Dans ce cas, on n'accroche pas l'index :-(
    SQL_WHERE=IIF(:I_TOWNER_ID!=0,'TOWNER_ID=' || :I_TOWNER_ID,'1=1');
        
    I_TSTORAGE_NAME = TRIM(:I_TSTORAGE_NAME);
    I_TSTORAGE_SECTION = TRIM(:I_TSTORAGE_SECTION);
    
    SQL_WHERE=:SQL_WHERE || IIF(:I_TSTORAGE_SECTION!='',' AND SECTION=''' || :I_TSTORAGE_SECTION ||'''','');
    
    SQL_WHERE=:SQL_WHERE || IIF(:I_TSTORAGE_NAME!='',' AND "NAME"=''' || :I_TSTORAGE_NAME ||'''','');

	-- Récupération du DOM_PARAM représentant la recherche de valeur NULL
	NULL_PARAM=COALESCE((SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('DOMAIN','PARAM_EQUIV_NULL')),-9);
    
    IF (:I_TSTORAGE_TGEDUSER_ID!=0) THEN
        SQL_WHERE=:SQL_WHERE || ' AND TGEDUSER_ID' || IIF(:I_TSTORAGE_TGEDUSER_ID=NULL_PARAM,' IS NULL', '=' || :I_TSTORAGE_TGEDUSER_ID);
    
    IF (:I_TSTORAGE_TLIBRARY_ID!=0) THEN
        SQL_WHERE=:SQL_WHERE || ' AND TLIBRARY_ID' || IIF(:I_TSTORAGE_TLIBRARY_ID=NULL_PARAM,' IS NULL', '=' || :I_TSTORAGE_TLIBRARY_ID);
        
    EXECUTE STATEMENT 'SELECT COUNT(TOWNER_ID) FROM TSTORAGE WHERE ' || :SQL_WHERE INTO COUNT_DEL;
    IF (:COUNT_DEL=0) THEN EXCEPTION EX_NOSTORAGE;
    
    EXECUTE STATEMENT 'DELETE FROM TSTORAGE WHERE ' || :SQL_WHERE;

        
END ^

ALTER PROCEDURE GET_ALL_LIBRARIES_FOR_GEDUSER (I_TGEDUSER_ID INTEGER NOT NULL,
I_WITH_DUPLICATE BOOLEAN NOT NULL DEFAULT 0,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
GEDUSER_GEDGROUP_ID INTEGER,
LIBRARY_ID INTEGER,
LIBRARY_ORIGIN SMALLINT,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
GEDUSER_STATE STATE,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
Création V32 :
	- Ajout de ORDER + Tri sur ORDER...
	- Ajout GEDGROUP_ID
	- On renvoi les libs directement associées à un utilisateur + les Libs associées aux groupes de l'utilisateur
	- Ajout de colonne LIBRARY_ORIGIN = 0 : sans doublons donc origine idem dans les 2 cas, 1 =GEDUSER; 2=GEDGROUP

- V34
    - GEDGROUP_ID => GEDUSER_GEDGROUP_ID en sortie (clarification paramètre)
    
- V 36
    - LIBRARY_SIZE_MB_ORG en sortie

-V40
	GUID VARCHAR(40) => VARCHAR(255)
	Ajout TLIBRARY.VERSION
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    
DECLARE VARIABLE GROUP_ID INTEGER;
BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);

	SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
	SQL_WHERE_GEDUSER = '';
	ID_OK = Null;


    /* Owner utilisable outrepassable... */
	/* Même OWNER pour TLIBRARY et TPROFILE */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    -- Utilisateur GED 
    IF (I_TGEDUSER_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER; 


    /*
        Existence/visibilité de l'utilisateur GED lui-même et ses parents
        On en profite pour récupérer le GROUP_ID du GEDUSER
    
    */
    EXECUTE STATEMENT '
        SELECT TGEDUSER.ID, COALESCE(TGEDUSER.TGEDGROUP_ID,0), COALESCE(TGEDUSER.STATE,0)
		FROM TGEDUSER INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
        WHERE TGEDUSER.ID=' || :I_TGEDUSER_ID ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_GEDUSER != '' ,' AND ' || :SQL_WHERE_GEDUSER, '')
        INTO :ID_OK, :GROUP_ID, :GEDUSER_STATE;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDUSER;

   /* Serveur Firebird (si non Null) utilisable outrepassable...*/
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

   -- Library existante et modifiable...
    IF (:I_TLIBRARY_STATE ='' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

	/* Recherche des Bibliothèques Utilisateurs*/
	FOR EXECUTE STATEMENT '
        SELECT
			-- Ajout V32
            COALESCE(TLIBRARY.LISTORDER,0),

            COALESCE(TLIBRARY.TITLE,''''),

			TGEDUSERLIB.TGEDUSER_ID,
			TGEDUSER.TGEDGROUP_ID,
			TGEDUSERLIB.TLIBRARY_ID,
			' || IIF (:I_WITH_DUPLICATE = 0, '0', '1') || ', -- ORIGIN GEDUSERLIB...
			' || IIF (:I_WITH_DUPLICATE = 0, '0', 'COALESCE(TGEDUSERLIB.TPROFILE_ID,0)') || ',
			TGEDUSER.TOWNER_ID,
			COALESCE(TFBSERVER.ID,0),
			TLIBRARY.STATE,
			TGEDUSER.STATE,
            TOWNER.STATE,
			COALESCE(TFBSERVER.STATE,0),
			
            COALESCE(TLIBRARY."COMMENT",''''),
			COALESCE((SELECT LIBRARY_CONNECT FROM GET_LIBRARY_CONNECT(TLIBRARY.ID)),'''') AS PATH,
            COALESCE(TLIBRARY.GUID, ''''),
            COALESCE(TLIBRARY.VERSION, 0),
            COALESCE(TLIBRARY.DBPATH,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_END)),
			TLIBRARY.ACCESS_MODE,
            COALESCE(TLIBRARY.ACCESS_TYPE,0),
            TLIBRARY.CHARGEABLE,
            COALESCE(TLIBRARY.SIZE_MB,0),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.LAST_SIZE_CHECK)),
            COALESCE(TLIBRARY.SIZE_MB_ORG,0),

            -- Ajout V25
            COALESCE(TLIBRARY.TLOGSYNC_ID,0)
           			
		FROM TGEDUSERLIB INNER JOIN TGEDUSER ON TGEDUSERLIB.TGEDUSER_ID=TGEDUSER.ID
            INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
            INNER JOIN TLIBRARY  ON TGEDUSERLIB.TLIBRARY_ID=TLIBRARY.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
		WHERE
			TGEDUSERLIB.TGEDUSER_ID=' || :I_TGEDUSER_ID || 
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') || '
        UNION
		SELECT 
            -- Ajout V32
            COALESCE(TLIBRARY.LISTORDER,0),

            COALESCE(TLIBRARY.TITLE,''''),

            ' || :I_TGEDUSER_ID || ',
			TGEDGROUPLIB.TGEDGROUP_ID,
			TGEDGROUPLIB.TLIBRARY_ID,
			' || IIF (:I_WITH_DUPLICATE = 0, '0', '2') || ', -- ORIGIN GEDGROUPLIB...
			' || IIF (:I_WITH_DUPLICATE = 0, '0', 'COALESCE(TGEDGROUPLIB.TPROFILE_ID,0)') || ',
			TLIBRARY.TOWNER_ID,
			COALESCE(TFBSERVER.ID,0),
			TLIBRARY.STATE,
			' || :GEDUSER_STATE || ',
            TOWNER.STATE,
			COALESCE(TFBSERVER.STATE,0),
			
            COALESCE(TLIBRARY."COMMENT",''''),
			COALESCE((SELECT LIBRARY_CONNECT FROM GET_LIBRARY_CONNECT(TLIBRARY.ID)),'''') AS PATH,
            COALESCE(TLIBRARY.GUID, ''''),
            COALESCE(TLIBRARY.VERSION, 0),
            COALESCE(TLIBRARY.DBPATH,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_END)),
			TLIBRARY.ACCESS_MODE,
            COALESCE(TLIBRARY.ACCESS_TYPE,0),
            TLIBRARY.CHARGEABLE,
            COALESCE(TLIBRARY.SIZE_MB,0),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.LAST_SIZE_CHECK)),
            COALESCE(TLIBRARY.SIZE_MB_ORG,0),

            -- Ajout V25
            COALESCE(TLIBRARY.TLOGSYNC_ID,0)
  			
		FROM TGEDGROUPLIB INNER JOIN TGEDGROUP ON TGEDGROUPLIB.TGEDGROUP_ID=TGEDGROUP.ID
            INNER JOIN TOWNER ON TGEDGROUP.TOWNER_ID=TOWNER.ID
            INNER JOIN TLIBRARY  ON TGEDGROUPLIB.TLIBRARY_ID=TLIBRARY.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
		WHERE
			TGEDGROUPLIB.TGEDGROUP_ID=' || :GROUP_ID || 
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') || '
        
		-- MAJ v32
        ORDER BY 1,2'
		INTO
            -- Ajouté en V32
            :LIBRARY_LISTORDER,

            :LIBRARY_TITLE,
			:GEDUSER_ID,
			:GEDUSER_GEDGROUP_ID,
			:LIBRARY_ID,
			:LIBRARY_ORIGIN,
			:PROFILE_ID,
			:OWNER_ID,
			:FBSERVER_ID,
			:LIBRARY_STATE,
			:GEDUSER_STATE,
			:OWNER_STATE,
			:FBSERVER_STATE,
			-- Ajoutés en version 22
            :LIBRARY_COMMENT,
            :LIBRARY_CONNECT,
            :LIBRARY_GUID,
            :LIBRARY_VERSION,
            :LIBRARY_DBPATH,
            :LIBRARY_CREATE_DATE,
            :LIBRARY_MODIF_DATE,
            :LIBRARY_SUBSCRIBE_START,
            :LIBRARY_SUBSCRIBE_END,
            -- Ajout V31
			:LIBRARY_ACCESS_MODE,
            :LIBRARY_ACCESS_TYPE,
            :LIBRARY_CHARGEABLE,
            :LIBRARY_SIZE_MB,
            :LIBRARY_LAST_SIZE_CHECK,
            :LIBRARY_SIZE_MB_ORG,
            -- Ajouté en V25
            :LOGSYNC_ID
			
	DO
	BEGIN
        SELECT LOGSYNCS_INFOS FROM GET_LASTSYNC_MDF(:LIBRARY_ID) INTO :LASTSYNC_INFOS;	
		SUSPEND;
    END
END ^

ALTER PROCEDURE GET_ALTER_STATE_OK (I_TARGETED_COLUMN VARCHAR(1000) CHARACTER SET UTF8 NOT NULL)
RETURNS (SQL_WHERE_DEFAULT_ALTER VARCHAR(255) CHARACTER SET UTF8)
AS 
/*
    Cette procédure renvoie un critère de modification des enregistrements par rapport à une colonne STATE
    Rappel : Les procédures stockées de mise à jour permettent de modifier cet état par défaut par l'intermédiaire d'un paramètre formel, le cas échéant
    
	Paramètres : I_TARGETED_COLUMN : Nom (pleinement qualifié recommandé) d'une colonne (par exemple "TOWNER.STATE")
	Aucun contrôle de validation n'est effectué par rapport à ce paramètre (pas de recherche de colonne présente par exemple)

    On utilise deux paramètres du domaine (DOM_RECORD_ALTER_KO et ADM_RECORDS_ALTER_KO) afin de connaitre les états NE PERMETTANT PAS la modification.
        - Le premier est rattaché à l'application (et ne devrait pas être modifié par d'autres personnes que les programmeurs)
        - Le second est laissé à la discrétion de l'administrateur de site afin qu'il gère ces propres états de non modification
        - La valeur de ce second paramètre est ajouté à la valeur du premier afin de déterminer, finalement, quels sont les enregistrements visibles ou pas...
    
    Ces paramètres doivent indiquer les combinaisons d'état ne permettant pas une modification, par exemple :
    - DOM_RECORDS_ALTER_KO = 1
        ==> seuls les enregistrements STATE ne contenant pas 1 sont modifiables (valeur par défaut)
    - ADM_RECORD_ALTER_KO = 1 (inutile car cet état est déja considéré comme inaltérable par défaut dans DOM_RECORDS_ALTER_KO)
    - DOM_RECORD_ALTER_KO = 6 ==> seuls les enregistrements STATE = 0 ou état ne contient pas 1 (DOM_RECORDS_ALTER_KO) ou état ne contient pas 2 ou état ne contient pas 4 sont modifiables
        (attention, ce n'est pas la valeur atomique de la colonne qui est prise en compte, mais le ou les états présents ou non dans cette colonne)

V17 :
    - Nouvelle Gestion SECTION TDOMPARAM
*/
DECLARE VARIABLE STATE_TEST STATE;
BEGIN
    /* Ensemble d'états considérés comme devant toujours être inaltérables 
    Si le paramètre DOM_RECORDS_ALTER_KO n'est pas trouvé, on essai avec (au moins) le paramètres des enregistrements supprimé (DOM_RECORD_DELETED)
    Si aucun des paramètres n'est disponible, on init en dur à 1
    */
    STATE_TEST=COALESCE((SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('DOMAIN','RECORDS_ALTER_KO')),
        (SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')),1);
    /* Init des états Admin à tester */
    STATE_TEST=BIN_OR(:STATE_TEST,COALESCE((SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('ADMIN','RECORDS_ALTER_KO')),0)); 
    
    /*
    On compare la colonne par rapport au paramètre en ajoutant les états considérés comme devant être TOUJOURS masqués
    */
    SQL_WHERE_DEFAULT_ALTER =  'BIN_AND(' || :I_TARGETED_COLUMN || ',' || :STATE_TEST || ')=0';
    
    SUSPEND;
    
END ^

ALTER PROCEDURE GET_CONTACTS (I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (CONTACT_ID INTEGER,
OWNER_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_STATE STATE,
OWNER_STATE STATE)
AS 
/*
	Renvoie la liste des informations détaillées de tous les contacts
	
MAJ :
	v12 : ORDER BY NAME

MAJ V32 :
	- Ajout de ORGANIZATION, etc...
*/
DECLARE VARIABLE SQL_WHERE_CONTACT VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);

BEGIN

    I_TCONTACT_STATE=TRIM(I_TCONTACT_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);

    SQL_WHERE_CONTACT = '';
    SQL_WHERE_OWNER = '' ;

    IF (I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 
        
    IF (I_TCONTACT_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TCONTACT.STATE') INTO :SQL_WHERE_CONTACT;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TCONTACT_STATE, 'TCONTACT.STATE') INTO :SQL_WHERE_CONTACT; 


	/* Recherche des contacts */
	FOR EXECUTE STATEMENT '
		SELECT
			TCONTACT.ID,
			TCONTACT.TOWNER_ID,
			TCONTACT.NAME,
			COALESCE(TCONTACT.FIRSTNAME,''''),
			COALESCE(TCONTACT.PREFIX,''''),
			COALESCE(TCONTACT.EMAIL,''''),
			COALESCE(TCONTACT.TEL,''''),
			COALESCE(TCONTACT.ADDRESS,''''),
			COALESCE(TCONTACT.POSTCODE,''''),
			COALESCE(TCONTACT.REGION,''''),
			COALESCE(TCONTACT.CITY,''''),
			COALESCE(TCONTACT.COUNTRY,''''),

			COALESCE(TCONTACT.ORGANIZATION,''''),
			COALESCE(TCONTACT.SERVICE,''''),
			COALESCE(TCONTACT.IDENTIFIER,''''),
			COALESCE(TCONTACT.CELLTEL,''''),

            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.MODIF_DATE)),
			TOWNER.STATE,
			TCONTACT.STATE
        FROM TCONTACT INNER JOIN TOWNER ON TCONTACT.TOWNER_ID=TOWNER.ID '
        -- WHERE "bidon" pour simplification des critères suivants (AND...)
		|| ' WHERE (1=1) ' || 
		IIF (:SQL_WHERE_CONTACT != '' , ' AND ' || :SQL_WHERE_CONTACT, '') ||
		IIF (:SQL_WHERE_OWNER != '' , ' AND ' || :SQL_WHERE_OWNER, '')
		|| 'ORDER BY TCONTACT.NAME'
		INTO
			:CONTACT_ID,
			:OWNER_ID,
			:CONTACT_NAME,
			:CONTACT_FIRSTNAME, 
			:CONTACT_PREFIX ,
			:CONTACT_EMAIL,
			:CONTACT_TEL,
			:CONTACT_ADDRESS,
			:CONTACT_POSTCODE,
			:CONTACT_REGION,
			:CONTACT_CITY,
			:CONTACT_COUNTRY,

			-- Ajout V32
			:CONTACT_ORGANIZATION,
			:CONTACT_SERVICE,
			:CONTACT_IDENTIFIER,
			:CONTACT_CELLTEL,

            :CONTACT_CREATE_DATE,
            :CONTACT_MODIF_DATE,
			:OWNER_STATE,
			:CONTACT_STATE 
	DO
    BEGIN
        SUSPEND;
    END

END ^

ALTER PROCEDURE GET_CONTACTS_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TCONTACT_ALL BOOLEAN NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPES_INFOS BLOB CHARACTER SET UTF8,
OWNER_STATE STATE,
CONTACT_STATE STATE)
AS 
/*
    Renvoie la liste des contacts associés à un propriétaire

    Il est possible qu'il y en ai aucune (pas de contacts visibles/actifs pour 1 propriétaire donné)
    ==> recordset vide

    Attend :
    - I_TOWNER_ID : un code numérique identifiant de propriétaire (FK TOWNER)
    - OWNER_STATE : Etat particulier du owner (0 ==> actif par défaut)
    - I_TCONTACT_STATE : Etat particulier de contact (0 ==> actif par défaut)

V17 :
    - Gestion CONTACT PRIINCIPAL
    
V 22
    - Ajout des informations détaillées contact

MAJ V 24 :
    - CONTTYPES_INFOS renvoyé en tant que BLOB

MAJ V32 :
	- Ajout de ORGANIZATION, etc...

MAJ V34
	- Optimisation de la requête sous jacente pour traitement de I_TCONTACT_ALL

*/
DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;
DECLARE CONT_ID Integer;

BEGIN
  
    I_TCONTACT_STATE=TRIM(I_TCONTACT_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);

    /* construction des WHERE */
    SQL_WHERE = '';
    ID_OK = Null;

    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE;

    EXECUTE STATEMENT '
        SELECT ID,TCONTACT_ID FROM TOWNER
        WHERE ID=' || :I_TOWNER_ID || IIF (:SQL_WHERE != '' , ' AND (' || :SQL_WHERE || ')', '')
        INTO ID_OK, CONT_ID;
      
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;


    SQL_WHERE = '';

    IF (:I_TCONTACT_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TCONTACT.STATE') INTO :SQL_WHERE;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TCONTACT_STATE, 'TCONTACT.STATE') INTO :SQL_WHERE;

    -- On exclu les contacts principaux OWNER/GEDUSER dans ce cas
    IF (I_TCONTACT_ALL != 1) THEN
        SQL_WHERE=:SQL_WHERE || IIF (:SQL_WHERE != '',' AND ','') ||
            IIF (:CONT_ID IS NOT NULL, '(TCONTACT.ID != ' || :CONT_ID || ') AND ','') ||
			-- V34 Dans ce cas le LEFT JOIN est plus performant que la sous-requête (voir aussi le FROM plus bas...)
            --'(TCONTACT.ID NOT IN (SELECT TCONTACT_ID FROM TGEDUSER WHERE TGEDUSER.TOWNER_ID=' || :I_TOWNER_ID || ' AND TCONTACT_ID IS NOT NULL))';
            'TGEDUSER.TCONTACT_ID IS NULL';


      
    /* Recherche des contacts */
    FOR EXECUTE STATEMENT '
        SELECT
            TCONTACT.ID,
            TCONTACT.STATE,
            TCONTACT.TOWNER_ID,
            TOWNER.STATE,
            
			COALESCE(TCONTACT.NAME,''''),
			COALESCE(TCONTACT.FIRSTNAME,''''),
			COALESCE(TCONTACT.PREFIX,''''),
			COALESCE(TCONTACT.EMAIL,''''),
			COALESCE(TCONTACT.TEL,''''),
			COALESCE(TCONTACT.ADDRESS,''''),
			COALESCE(TCONTACT.POSTCODE,''''),
			COALESCE(TCONTACT.REGION,''''),
			COALESCE(TCONTACT.CITY,''''),
			COALESCE(TCONTACT.COUNTRY,''''),
			COALESCE(TCONTACT.ORGANIZATION,''''),
			COALESCE(TCONTACT.SERVICE,''''),
			COALESCE(TCONTACT.IDENTIFIER,''''),
			COALESCE(TCONTACT.CELLTEL,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.MODIF_DATE))
            

        FROM TCONTACT
			-- Ajout en V34 (gain de perf sur le filtrage des contacts principaux)
            LEFT OUTER JOIN TGEDUSER ON TCONTACT.ID =TGEDUSER.TCONTACT_ID
            INNER JOIN TOWNER ON TCONTACT.TOWNER_ID=TOWNER.ID
        WHERE
            TCONTACT.TOWNER_ID=' || :I_TOWNER_ID || IIF (:SQL_WHERE != '' , ' AND ' || :SQL_WHERE, '')
        INTO
            :CONTACT_ID,
            :CONTACT_STATE,
            :OWNER_ID,
            :OWNER_STATE,
			-- Ajout V22
			:CONTACT_NAME,
			:CONTACT_FIRSTNAME, 
			:CONTACT_PREFIX ,
			:CONTACT_EMAIL,
			:CONTACT_TEL,
			:CONTACT_ADDRESS,
			:CONTACT_POSTCODE,
			:CONTACT_REGION,
			:CONTACT_CITY,
			:CONTACT_COUNTRY,

			-- Ajout V32
			:CONTACT_ORGANIZATION,
			:CONTACT_SERVICE,
			:CONTACT_IDENTIFIER,
			:CONTACT_CELLTEL,

            :CONTACT_CREATE_DATE,
            :CONTACT_MODIF_DATE
            
    DO
    BEGIN
        SELECT CONTTYPES_INFOS FROM GET_CONTTYPE_MDF(:CONTACT_ID) INTO :CONTTYPES_INFOS;
        SUSPEND;
    END
END ^

ALTER PROCEDURE GET_CONTACTS_TYPES_FOR_CONTACT (I_TCONTACT_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (CONTACT_ID INTEGER,
OWNER_ID INTEGER,
LIBRARY_ID INTEGER,
CONTTYPE_ID INTEGER,
CONTLIB_SYNC_SENDMAIL SYNC_MAIL,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
CONTTYPE_NAME VARCHAR(150) CHARACTER SET UTF8,
FBSERVER_ID INTEGER,
CONTACT_STATE STATE,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
    Renvoie l'ensemble des "utilisations" d'un contact (dans TCONTLIB et TCONTOWNER)
    Il s'agit donc d'une UNION...
    
V17 :
    - Création...

V19 :
	- Correction STATE OWNER erroné en entrée
    
*/

DECLARE VARIABLE SQL_WHERE_CONTACT VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);

DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TCONTACT_STATE=TRIM(I_TCONTACT_STATE);
    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

    /* construction des WHERE */
    SQL_WHERE_CONTACT = '';
    SQL_WHERE_OWNER= '';
    SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';

	ID_OK = Null;

    IF (:I_TFBSERVER_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER; 

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    IF (:I_TLIBRARY_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

    IF (:I_TCONTACT_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TCONTACT.STATE') INTO :SQL_WHERE_CONTACT;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TCONTACT_STATE, 'TCONTACT.STATE') INTO :SQL_WHERE_CONTACT; 

    /* Existence/visibilité du contact demandé (lui-même ou son OWNER)*/
    EXECUTE STATEMENT '
        SELECT TCONTACT.ID
		FROM TCONTACT
            INNER JOIN TOWNER ON TCONTACT.TOWNER_ID=TOWNER.ID
        WHERE TCONTACT.ID=' || :I_TCONTACT_ID ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_CONTACT != '' ,' AND ' || :SQL_WHERE_CONTACT, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOCONTACT;

	/* Recherche des contacts */
	FOR EXECUTE STATEMENT '
        SELECT
            TCONTACT.ID,
            TCONTACT.TOWNER_ID,
            TCONTLIB.TLIBRARY_ID,
            TCONTLIB.TCONTTYPE_ID,
            TCONTLIB.SYNC_SENDMAIL,
            COALESCE(TLIBRARY.TITLE,''''),
            TCONTTYPE.NAME,
            COALESCE(TFBSERVER.ID,0),
            TCONTACT.STATE,
            TOWNER.STATE,
            TLIBRARY.STATE,
            COALESCE(TFBSERVER.STATE,0)
        FROM TCONTACT
            INNER JOIN TCONTLIB ON TCONTACT.ID=TCONTLIB.TCONTACT_ID
                INNER JOIN TCONTTYPE ON TCONTLIB.TCONTTYPE_ID=TCONTTYPE.ID
            INNER JOIN TOWNER ON TCONTACT.TOWNER_ID=TOWNER.ID
            INNER JOIN TLIBRARY  ON TCONTLIB.TLIBRARY_ID=TLIBRARY.ID
                LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TCONTACT.ID=' || I_TCONTACT_ID || 
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_LIB != '' ,' AND (' || :SQL_WHERE_LIB || ' OR TLIBRARY.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_CONTACT != '' ,' AND ' || :SQL_WHERE_CONTACT, '')
        || '
        
        UNION
        SELECT
            TCONTACT.ID,
            TCONTACT.TOWNER_ID,
            0,
            TCONTOWNER.TCONTTYPE_ID,
            0,
            '''',
            TCONTTYPE.NAME,
            0,
            TCONTACT.STATE,
            TOWNER.STATE,
            0,
            0
        FROM TCONTACT
            INNER JOIN TCONTOWNER ON TCONTACT.ID=TCONTOWNER.TCONTACT_ID
                INNER JOIN TCONTTYPE ON TCONTOWNER.TCONTTYPE_ID=TCONTTYPE.ID
            INNER JOIN TOWNER ON TCONTACT.TOWNER_ID=TOWNER.ID
        WHERE TCONTACT.ID=' || I_TCONTACT_ID || 
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_CONTACT != '' ,' AND ' || :SQL_WHERE_CONTACT, '')
        || ' ORDER BY 3;
        '
		INTO
			:CONTACT_ID,
			:OWNER_ID,
			:LIBRARY_ID,
			:CONTTYPE_ID , 
            :CONTLIB_SYNC_SENDMAIL,
            :LIBRARY_TITLE,
            :CONTTYPE_NAME,
            :FBSERVER_ID,
            :CONTACT_STATE,
            :OWNER_STATE,
            :LIBRARY_STATE,
            :FBSERVER_STATE
	DO
		SUSPEND;
END ^

ALTER PROCEDURE GET_CONTACTS_TYPES_FOR_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPE_ID INTEGER,
CONTTYPE_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTLIB_SYNC_SENDMAIL SYNC_MAIL,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LIBRARY_STATE STATE,
CONTACT_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
	Renvoie la liste des contacts associées à une bibliothèque
	
	Il est possible qu'il y en ai aucune (pas de librairie visible/active pour 1 bibliothèque donnée)
	==> recordset vide

	Attend :
	- I_TLIBRARY_ID : un code numérique identCREATE OR ALTER PROCEDURE GET_CONTACT_INFOS (identifiant de bibliothèque
	- I_TLIBRARY_STATE : Etat particulier du bibliothèque (0 ==> actif par défaut)
	- I_TCONTACT_STATE : Etat particulier de contact (0 ==> actif par défaut)
	
MAJ :
	V15 : ajout de TCONTLIB_SYNC_SENDMAIL

MAJ V22:
    - Ajout détail CONTACT + CONTTYPE pour améliorations performances NAS

MAJ V32 :
	- Ajout de ORGANIZATION, etc...

*/
DECLARE VARIABLE SQL_WHERE_CONTACT VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);

DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TCONTACT_STATE=TRIM(I_TCONTACT_STATE);
    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

    /* construction des WHERE */
    SQL_WHERE_CONTACT = '';
    SQL_WHERE_OWNER= '';
    SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';

	ID_OK = Null;

    IF (:I_TFBSERVER_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER; 

    IF (SQL_WHERE_OWNER = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    IF (I_TLIBRARY_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

    /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TLIBRARY.ID
		FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;
    
    IF (I_TCONTACT_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TCONTACT.STATE') INTO :SQL_WHERE_CONTACT;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TCONTACT_STATE, 'TCONTACT.STATE') INTO :SQL_WHERE_CONTACT; 

	/* Recherche des contacts */
	FOR EXECUTE STATEMENT '
		SELECT
			TCONTACT.ID,
			
			-- Ajout V22
			TCONTACT.NAME,
			COALESCE(TCONTACT.FIRSTNAME,''''),
			COALESCE(TCONTACT.PREFIX,''''),
			COALESCE(TCONTACT.EMAIL,''''),
			COALESCE(TCONTACT.TEL,''''),
			COALESCE(TCONTACT.ADDRESS,''''),
			COALESCE(TCONTACT.POSTCODE,''''),
			COALESCE(TCONTACT.REGION,''''),
			COALESCE(TCONTACT.CITY,''''),
			COALESCE(TCONTACT.COUNTRY,''''),
			COALESCE(TCONTACT.ORGANIZATION,''''),
			COALESCE(TCONTACT.SERVICE,''''),
			COALESCE(TCONTACT.IDENTIFIER,''''),
			COALESCE(TCONTACT.CELLTEL,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.MODIF_DATE)),
			
			TCONTACT.STATE,
			TCONTLIB.TCONTTYPE_ID,

			-- Ajout V22
			TCONTTYPE.NAME,
			
			TCONTLIB.SYNC_SENDMAIL,
			TCONTLIB.TLIBRARY_ID,
			TLIBRARY.STATE,
			TCONTACT.TOWNER_ID,
			COALESCE(TFBSERVER.ID,0),
			COALESCE(TFBSERVER.STATE,0),
            TOWNER.STATE
		FROM TCONTACT
            INNER JOIN TCONTLIB ON TCONTACT.ID=TCONTLIB.TCONTACT_ID
                INNER JOIN TCONTTYPE ON TCONTLIB.TCONTTYPE_ID=TCONTTYPE.ID
                INNER JOIN TLIBRARY  ON TCONTLIB.TLIBRARY_ID=TLIBRARY.ID
                    LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
            INNER JOIN TOWNER ON TCONTACT.TOWNER_ID=TOWNER.ID
		WHERE
			TCONTLIB.TLIBRARY_ID=' || :I_TLIBRARY_ID ||
			IIF (:SQL_WHERE_OWNER != '' , ' AND ' || :SQL_WHERE_OWNER, '') || 
            IIF (:SQL_WHERE_CONTACT != '' , ' AND ' || :SQL_WHERE_CONTACT, '') || 
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
        'ORDER BY TCONTACT.NAME;'
		INTO
			:CONTACT_ID,
			-- Ajout V22
			:CONTACT_NAME,
			:CONTACT_FIRSTNAME, 
			:CONTACT_PREFIX ,
			:CONTACT_EMAIL,
			:CONTACT_TEL,
			:CONTACT_ADDRESS,
			:CONTACT_POSTCODE,
			:CONTACT_REGION,
			:CONTACT_CITY,
			:CONTACT_COUNTRY,

			-- Ajout V32
			:CONTACT_ORGANIZATION,
			:CONTACT_SERVICE,
			:CONTACT_IDENTIFIER,
			:CONTACT_CELLTEL,
            :CONTACT_CREATE_DATE,
            :CONTACT_MODIF_DATE,
			
			:CONTACT_STATE,
			:CONTTYPE_ID, 
			
			-- Ajout V22
			:CONTTYPE_NAME,
			
			:CONTLIB_SYNC_SENDMAIL,
			:LIBRARY_ID,
			:LIBRARY_STATE,
			:OWNER_ID,
			:FBSERVER_ID,
			:FBSERVER_STATE,
			:OWNER_STATE
	DO
		SUSPEND;
END ^

ALTER PROCEDURE GET_CONTACTS_TYPES_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPE_ID INTEGER,
CONTTYPE_NAME VARCHAR(150) CHARACTER SET UTF8,
OWNER_STATE STATE,
CONTACT_STATE STATE)
AS 
/*
	Renvoie la liste des contacts par types associés à un propriétaire

	Il est possible qu'il y en ai aucune (pas de contacts visibles/actifs pour 1 propriétaire donné)
	==> recordset vide
	Il est possible qu'il y ait des doublons (CONTACTTYPE)

	Attend :
	- I_TOWNER_ID : un code numérique identifiant de propriétaire (FK TOWNER)
	- OWNER_STATE : Etat particulier du owner (0 ==> actif par défaut)
	- I_TCONTACT_STATE : Etat particulier de contact (0 ==> actif par défaut)

MAJ V22:
    - Ajout détail CONTACT + CONTTYPE pour améliorations performances NAS
	
MAJ V32 :
	- Ajout de ORGANIZATION, etc...

*/
DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    

BEGIN
    
    I_TCONTACT_STATE=TRIM(I_TCONTACT_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);

    /* construction des WHERE */
    SQL_WHERE = '';
	ID_OK = Null;

    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 

    EXECUTE STATEMENT '
        SELECT ID FROM TOWNER
        WHERE ID=' || :I_TOWNER_ID || IIF (:SQL_WHERE != '' , ' AND (' || :SQL_WHERE || ')', '')
        INTO ID_OK;
        
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;


    SQL_WHERE = '';

    IF (:I_TCONTACT_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TCONTACT.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TCONTACT_STATE, 'TCONTACT.STATE') INTO :SQL_WHERE; 

	/* Recherche des contacts */
	FOR EXECUTE STATEMENT '
		SELECT
			TCONTACT.ID,
			
			-- Ajout V22
			TCONTACT.NAME,
			COALESCE(TCONTACT.FIRSTNAME,''''),
			COALESCE(TCONTACT.PREFIX,''''),
			COALESCE(TCONTACT.EMAIL,''''),
			COALESCE(TCONTACT.TEL,''''),
			COALESCE(TCONTACT.ADDRESS,''''),
			COALESCE(TCONTACT.POSTCODE,''''),
			COALESCE(TCONTACT.REGION,''''),
			COALESCE(TCONTACT.CITY,''''),
			COALESCE(TCONTACT.COUNTRY,''''),
			COALESCE(TCONTACT.ORGANIZATION,''''),
			COALESCE(TCONTACT.SERVICE,''''),
			COALESCE(TCONTACT.IDENTIFIER,''''),
			COALESCE(TCONTACT.CELLTEL,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.MODIF_DATE)),
			
			TCONTOWNER.TCONTTYPE_ID,
			
			-- Ajout V22
			TCONTTYPE.NAME,

			TCONTACT.STATE,
			TCONTACT.TOWNER_ID,
			TOWNER.STATE

		FROM TCONTACT
            INNER JOIN TCONTOWNER ON TCONTACT.ID=TCONTOWNER.TCONTACT_ID
                INNER JOIN TCONTTYPE ON TCONTOWNER.TCONTTYPE_ID=TCONTTYPE.ID
        INNER JOIN TOWNER ON TCONTACT.TOWNER_ID=TOWNER.ID
		WHERE
			TCONTACT.TOWNER_ID=' || :I_TOWNER_ID || IIF (:SQL_WHERE != '' , ' AND ' || :SQL_WHERE, '') 
		INTO
			:CONTACT_ID,
			-- Ajout V22
			:CONTACT_NAME,
			:CONTACT_FIRSTNAME, 
			:CONTACT_PREFIX ,
			:CONTACT_EMAIL,
			:CONTACT_TEL,
			:CONTACT_ADDRESS,
			:CONTACT_POSTCODE,
			:CONTACT_REGION,
			:CONTACT_CITY,
			:CONTACT_COUNTRY,

			-- Ajout V32
			:CONTACT_ORGANIZATION,
			:CONTACT_SERVICE,
			:CONTACT_IDENTIFIER,
			:CONTACT_CELLTEL,

            :CONTACT_CREATE_DATE,
            :CONTACT_MODIF_DATE,
			
			:CONTTYPE_ID,
            -- Ajout V22
			:CONTTYPE_NAME,
			
            :CONTACT_STATE,
			:OWNER_ID,
			:OWNER_STATE 
	DO
		SUSPEND;
END ^

ALTER PROCEDURE GET_CONTACT_INFOS (I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (CONTACT_ID INTEGER,
OWNER_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_STATE STATE,
OWNER_STATE STATE)
AS 
/*
	Renvoie les informations détaillées d'un contact
	
MAJ V32 :
	- Ajout de ORGANIZATION, etc...

*/
DECLARE VARIABLE SQL_WHERE_CONTACT VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE REC_FOUND INTEGER;

BEGIN

    I_TCONTACT_STATE=TRIM(I_TCONTACT_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);

    REC_FOUND=0;

    SQL_WHERE_CONTACT = '';
    SQL_WHERE_OWNER = '' ;

    IF (I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 
        
    IF (I_TCONTACT_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TCONTACT.STATE') INTO :SQL_WHERE_CONTACT;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TCONTACT_STATE, 'TCONTACT.STATE') INTO :SQL_WHERE_CONTACT; 


	/* Recherche des contacts */
	FOR EXECUTE STATEMENT '
		SELECT
			TCONTACT.ID,
			TCONTACT.TOWNER_ID,
			TCONTACT.NAME,
			COALESCE(TCONTACT.FIRSTNAME,''''),
			COALESCE(TCONTACT.PREFIX,''''),
			COALESCE(TCONTACT.EMAIL,''''),
			COALESCE(TCONTACT.TEL,''''),
			COALESCE(TCONTACT.ADDRESS,''''),
			COALESCE(TCONTACT.POSTCODE,''''),
			COALESCE(TCONTACT.REGION,''''),
			COALESCE(TCONTACT.CITY,''''),
			COALESCE(TCONTACT.COUNTRY,''''),
			COALESCE(TCONTACT.ORGANIZATION,''''),
			COALESCE(TCONTACT.SERVICE,''''),
			COALESCE(TCONTACT.IDENTIFIER,''''),
			COALESCE(TCONTACT.CELLTEL,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.MODIF_DATE)),
			TOWNER.STATE,
			TCONTACT.STATE
        FROM TCONTACT INNER JOIN TOWNER ON TCONTACT.TOWNER_ID=TOWNER.ID
		WHERE TCONTACT.ID=' || :I_TCONTACT_ID || 
		IIF (:SQL_WHERE_CONTACT != '' , ' AND ' || :SQL_WHERE_CONTACT, '') ||
		IIF (:SQL_WHERE_OWNER != '' , ' AND ' || :SQL_WHERE_OWNER, '')
		INTO
			:CONTACT_ID,
			:OWNER_ID,
			:CONTACT_NAME,
			:CONTACT_FIRSTNAME, 
			:CONTACT_PREFIX ,
			:CONTACT_EMAIL,
			:CONTACT_TEL,
			:CONTACT_ADDRESS,
			:CONTACT_POSTCODE,
			:CONTACT_REGION,
			:CONTACT_CITY,
			:CONTACT_COUNTRY,

			-- Ajout V32
			:CONTACT_ORGANIZATION,
			:CONTACT_SERVICE,
			:CONTACT_IDENTIFIER,
			:CONTACT_CELLTEL,

            :CONTACT_CREATE_DATE,
            :CONTACT_MODIF_DATE,
			:OWNER_STATE,
			:CONTACT_STATE 
	DO
    BEGIN
        REC_FOUND=:REC_FOUND+1;
        SUSPEND;
    END

    IF (REC_FOUND=0) THEN EXCEPTION EX_NOCONTACT;
END ^

ALTER PROCEDURE GET_CONTACT_TYPE_FOR_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL,
I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTTYPE_ID INTEGER NOT NULL,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
CONTACT_ID INTEGER,
CONTTYPE_ID INTEGER,
CONTLIB_SYNC_SENDMAIL SYNC_MAIL,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LIBRARY_STATE STATE,
CONTACT_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
	Renvoie un contact associé à une bibliothèque
	
	Il est possible qu'il y en ai aucune (pas de librairie visible/active pour 1 bibliothèque donnée)
	==> Error

	Attend :
	- I_TLIBRARY_ID : un code numérique identCREATE OR ALTER PROCEDURE GET_CONTACT_INFOS (identifiant de bibliothèque
	- I_TLIBRARY_STATE : Etat particulier du bibliothèque (0 ==> actif par défaut)
	- I_TCONTACT_STATE : Etat particulier de contact (0 ==> actif par défaut)
	
V16 :
	Création
*/
DECLARE VARIABLE SQL_WHERE_CONTACT VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);

DECLARE VARIABLE ID_OK Integer;    
DECLARE VARIABLE REC_FOUND INTEGER;

BEGIN

    I_TCONTACT_STATE=TRIM(I_TCONTACT_STATE);
    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    
    REC_FOUND=0;
    
    /* construction des WHERE */
    SQL_WHERE_CONTACT = '';
    SQL_WHERE_OWNER= '';
    SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';

	ID_OK = Null;

    IF (:I_TFBSERVER_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER; 

    IF (SQL_WHERE_OWNER = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    IF (I_TLIBRARY_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

    /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TLIBRARY.ID
		FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;
    
    IF (I_TCONTACT_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TCONTACT.STATE') INTO :SQL_WHERE_CONTACT;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TCONTACT_STATE, 'TCONTACT.STATE') INTO :SQL_WHERE_CONTACT; 

	/* Recherche des contacts */
	FOR EXECUTE STATEMENT '
		SELECT
			TCONTACT.ID,
			TCONTACT.STATE,
			TCONTLIB.TCONTTYPE_ID,
			TCONTLIB.SYNC_SENDMAIL,
			TCONTLIB.TLIBRARY_ID,
			TLIBRARY.STATE,
			TCONTACT.TOWNER_ID,
			COALESCE(TFBSERVER.ID,0),
			COALESCE(TFBSERVER.STATE,0),
            TOWNER.STATE
		FROM TCONTACT INNER JOIN TCONTLIB ON TCONTACT.ID=TCONTLIB.TCONTACT_ID
            INNER JOIN TOWNER ON TCONTACT.TOWNER_ID=TOWNER.ID
            INNER JOIN TLIBRARY  ON TCONTLIB.TLIBRARY_ID=TLIBRARY.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
		WHERE
			TCONTLIB.TLIBRARY_ID=' || :I_TLIBRARY_ID || '
			AND TCONTACT.ID=' || :I_TCONTACT_ID || '
			AND TCONTLIB.TCONTTYPE_ID=' || :I_TCONTTYPE_ID ||
			IIF (:SQL_WHERE_OWNER != '' , ' AND ' || :SQL_WHERE_OWNER, '') || 
            IIF (:SQL_WHERE_CONTACT != '' , ' AND ' || :SQL_WHERE_CONTACT, '') || 
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
        'ORDER BY TCONTACT.NAME;
        '
		INTO
			:CONTACT_ID,
			:CONTACT_STATE,
			:CONTTYPE_ID , 
			:CONTLIB_SYNC_SENDMAIL,
			:LIBRARY_ID,
			:LIBRARY_STATE,
			:OWNER_ID,
			:FBSERVER_ID,
			:FBSERVER_STATE,
			:OWNER_STATE
	DO
    BEGIN
        REC_FOUND=:REC_FOUND+1;	
		SUSPEND;
    END
    
    IF (REC_FOUND=0) THEN EXCEPTION EX_NOCONTLIB;
    
END ^

ALTER PROCEDURE GET_CONTTYPES RETURNS (CONTTYPE_ID INTEGER,
CONTTYPE_NAME VARCHAR(150) CHARACTER SET UTF8)
AS 
/* 
	Liste des type de contacts

MAJ V12 : 
	- ORDER BY NAME
 */

BEGIN
	FOR SELECT ID,
		COALESCE(NAME,'') -- Ne devrait jamais arriver...
	    FROM TCONTTYPE
		ORDER BY NAME
	    INTO :CONTTYPE_ID, :CONTTYPE_NAME
	DO
	BEGIN
		SUSPEND;
	END
END ^

ALTER PROCEDURE GET_CONTTYPE_INFOS (I_TCONTYPE_ID INTEGER NOT NULL)
RETURNS (CONTTYPE_ID INTEGER,
CONTTYPE_NAME VARCHAR(150) CHARACTER SET UTF8)
AS 
/* Informations détaillées sur un type de contact */

BEGIN

	FOR SELECT ID,
		COALESCE(NAME,'') -- Ne devrait jamais arriver...
		FROM TCONTTYPE
	    WHERE ID = :I_TCONTYPE_ID
	    INTO :CONTTYPE_ID, :CONTTYPE_NAME
	DO
		SUSPEND;
		
    IF (ROW_COUNT=0) THEN EXCEPTION EX_NOCONTTYPE;
END ^

ALTER PROCEDURE GET_CONTTYPE_MDF (I_TCONTACT_ID INTEGER NOT NULL)
RETURNS (CONTTYPES_INFOS BLOB CHARACTER SET UTF8)
AS 
/*
    Retourne une chaine contenant la concaténation des types de contacts pour un contact donné, par exemple :
     "1";""|"3";"Technique et autre" 

V22 :
    - Création

V24 : 
	- Changement du type de sortie de VARCHAR(6000) en BLOB
*/
DECLARE VARIABLE CONTTYPE_INFOS VARCHAR(1000);
DECLARE VARIABLE CONTYPE_NUM INTEGER;

DECLARE VARIABLE FIELD_SEP VARCHAR(5);
DECLARE VARIABLE RECORD_SEP VARCHAR(5);
BEGIN

    CONTYPE_NUM = 0;
    CONTTYPE_INFOS = '';
    CONTTYPES_INFOS = '';
	SELECT COALESCE(CAST(DOMPARAM_VALUE AS VARCHAR(5)),';') FROM GET_DOMPARAM('DOMAIN','MDF_FIELD_SEP')  INTO FIELD_SEP;
	SELECT COALESCE(CAST(DOMPARAM_VALUE AS VARCHAR(5)),'|') FROM GET_DOMPARAM('DOMAIN','MDF_RECORD_SEP') INTO RECORD_SEP;

    FOR SELECT
        '"' || TCONTOWNER.TCONTTYPE_ID || '"' ||
         :FIELD_SEP ||
        '"' || TCONTTYPE.NAME || '"'
    FROM TCONTACT
        INNER JOIN TCONTOWNER ON TCONTACT.ID=TCONTOWNER.TCONTACT_ID
            INNER JOIN TCONTTYPE ON TCONTOWNER.TCONTTYPE_ID=TCONTTYPE.ID
        WHERE TCONTACT.ID=:I_TCONTACT_ID
    INTO :CONTTYPE_INFOS
    DO
    BEGIN
        IF (CONTYPE_NUM > 0) THEN
            CONTTYPES_INFOS = CONTTYPES_INFOS || :RECORD_SEP;
            
        CONTTYPES_INFOS = 
            CONTTYPES_INFOS || 
            CONTTYPE_INFOS;
        CONTYPE_NUM = CONTYPE_NUM + 1;
    END
    SUSPEND;
END ^

ALTER PROCEDURE GET_DATE_STRING (I_DATE TIMESTAMP)
RETURNS (DATE_STRING VARCHAR(20) CHARACTER SET UTF8)
AS 
/*
	Renvoie une chaine formatée SQL/Novaxel ('CCYY-MM-DD HH:NN:SS') par rapport à une date donnée

	Accepte une date ou timestamp

*/
BEGIN
    IF (I_DATE IS NULL) THEN
        DATE_STRING = '';
    ELSE
        DATE_STRING = LPAD(CAST(EXTRACT(YEAR FROM I_DATE) AS CHAR(4)),4,'0') ||'-'|| LPAD(EXTRACT(MONTH FROM I_DATE),2,'0')
            ||'-'|| LPAD(EXTRACT(DAY FROM I_DATE),2,'0') || ' ' || LPAD(EXTRACT(HOUR FROM I_DATE),2,'0')
            ||':'|| LPAD(EXTRACT(MINUTE FROM I_DATE),2,'0') ||':'|| LPAD(TRUNC(EXTRACT(SECOND FROM I_DATE)),2,'0');

    SUSPEND;
END ^

ALTER PROCEDURE GET_DOMPARAM (I_TDOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TDOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL)
RETURNS (DOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
DOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
DOMPARAM_VALUE VARCHAR(255) CHARACTER SET UTF8,
DOMPARAM_VALUEBLB_FILLED BOOLEAN,
DOMPARAM_TYPE TYPE_PARAM,
DOMPARAM_COMMENT VARCHAR(512) CHARACTER SET UTF8,
DOMPARAM_PROTECTION STATE)
AS 
/*
    
    Renvoi la valeur d'un paramètre présent dans la table TDOMPARAM
    
    Si le paramètre est inconnu, renvoi NULL...
    
    ATTENTION : La valeur du paramètre est TOUJOURS renvoyée en tant que VARCHAR;
    
    Il appartient à la procédure appelante de convertir (CAST) cette valeur dans le type attendu/utilisable...

V9 :
    - Ajout TYPE
V15 :
    - Ajout VALUEBLB

V17 :
	- VALUE VIDE en sortie...
	- Ajout SECTION
	
V20 :
    - SYSTEM ==> PROTECTION
    
V22 :
    - DOMPARAM_VALUEBLB est remplacé par DOMPARAM_VALUEBLB_FILLED (boolean) et l'extraction du BLOB est géré par une PS à part (GET_DOMPARAM_VALUEBLB)

V32
	- VALUE VARCHAR(100) ==> VARCHAR(255)

*/

BEGIN

    FOR
        SELECT
			tp.SECTION,
			tp.NAME,
            COALESCE(tp."VALUE",''),
            IIF(tp.VALUEBLB IS NULL,0,1),
            tp."TYPE",
            COALESCE(tp."COMMENT",''),
            tp.PROTECTION -- NOT NULL
        FROM TDOMPARAM tp
        WHERE tp.SECTION=:I_TDOMPARAM_SECTION AND NAME=:I_TDOMPARAM_NAME
        INTO
			:DOMPARAM_SECTION,
			:DOMPARAM_NAME,
            :DOMPARAM_VALUE,
            :DOMPARAM_VALUEBLB_FILLED,
            :DOMPARAM_TYPE,
            :DOMPARAM_COMMENT,
            :DOMPARAM_PROTECTION
    DO
        SUSPEND;
END ^

ALTER PROCEDURE GET_DOMPARAMS RETURNS (DOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
DOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
DOMPARAM_VALUE VARCHAR(255) CHARACTER SET UTF8,
DOMPARAM_VALUEBLB_FILLED BOOLEAN,
DOMPARAM_TYPE TYPE_PARAM,
DOMPARAM_COMMENT VARCHAR(512) CHARACTER SET UTF8,
DOMPARAM_PROTECTION STATE)
AS 
/*
    
    Renvoi la liste des paramètre de la table TDOMPARAM
    
    ATTENTION : La valeur du paramètre est TOUJOURS renvoyée en tant que VARCHAR;
    
    Il appartient à la procédure appelante de convertir (CAST) cette valeur dans le type attendu/utilisable...

V13 :
	- Création
V15 :
    - ajout VALUEBLB
V17 :
	- Value vide possible en sortie...
	- Ajout SECTION
V20 :
    - SYSTEM ==> PROTECTION

V32
	- VALUE VARCHAR(100) ==> VARCHAR(255)

*/
BEGIN
    FOR
        SELECT
			tp.SECTION,
			tp.NAME,
            COALESCE(tp."VALUE",''),
            IIF(tp.VALUEBLB IS NULL,0,1),
            tp."TYPE",
            COALESCE(tp."COMMENT",''),
            tp.PROTECTION -- NOT NULL
        FROM TDOMPARAM tp
        INTO
			:DOMPARAM_SECTION,
			:DOMPARAM_NAME,
            :DOMPARAM_VALUE,
            :DOMPARAM_VALUEBLB_FILLED,
            :DOMPARAM_TYPE,
            :DOMPARAM_COMMENT,
            :DOMPARAM_PROTECTION
    DO
        SUSPEND;
END ^

ALTER PROCEDURE GET_DOMPARAM_VALUEBLB (I_TDOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
I_TDOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8)
RETURNS (DOMPARAM_TYPE TYPE_PARAM,
DOMPARAM_VALUE VARCHAR(255) CHARACTER SET UTF8,
DOMPARAM_VALUEBLB BLOB)
AS 
/*
	Retourne une valeur BLOB pour un paramètre domaine
	Les STATES ne sont PAS  évalués
	Le paramètre concerné doit exister préalablement à l'appel de cette PS

V22 :
    - Création

V32
	- VALUE VARCHAR(100) ==> VARCHAR(255)
*/
BEGIN
    FOR
        SELECT 
            "TYPE",
            COALESCE("VALUE",''),
            COALESCE(VALUEBLB,'')
        FROM TDOMPARAM
        WHERE
            SECTION = :I_TDOMPARAM_SECTION AND  NAME =:I_TDOMPARAM_NAME
        INTO
            DOMPARAM_TYPE, DOMPARAM_VALUE,DOMPARAM_VALUEBLB
    DO
        SUSPEND;
        
	IF (ROW_COUNT = 0) THEN
		EXCEPTION EX_NODOMPARAM;
            
END ^

ALTER PROCEDURE GET_DOM_ACCESS (I_ACCESS_TYPE INTEGER NOT NULL DEFAULT 0)
RETURNS (ACCESS BOOLEAN)
AS 
/*
        Renvoi 1 si l'accès au domaine est possible ou 0 dans le cas contraire
        Doit être appelée par les procédures de login (ou équivalent) de plus haut niveau (NAS)
        
        Paramètre :
        I_ACCESS_TYPE : Type d'accès à consulter, peut-être (version DB domain 5) :
            0/NULL : Accès domaine général ==> correspond à TDOMPARAM.NAME='DOM_ACCESS'
            1 : Accès domaine WEB ==> correspond à TDOMPARAM.NAME='WEB_ACCESS'
            2 : Accès domaine Mobile ==> correspond à TDOMPARAM.NAME='MOBILE_ACCESS'
            3 : Accès domaine Client Lourd (novaxel.exe) ==> correspond à TDOMPARAM.NAME='NOVAXEL_ACCESS'
            
            Autre : Erreur SQL (Exception EX_BAD_PARAM)
            
            Attention, si un des paramètres n'est pas présents dans la table TDOMPARAM, cette procédure lève une erreur...

V17 :
    - Nouvelle Gestion SECTION TDOMPARAM
            
*/

DECLARE VARIABLE ACCESS_TYPE
    VARCHAR(100);
DECLARE VARIABLE ACCESS_VALUE
    VARCHAR(255);


BEGIN

    /* Énumération */
    ACCESS_TYPE = DECODE(I_ACCESS_TYPE
        ,0,'DOMAIN'
        ,1,'WEB'
        ,2,'MOBILE'
        ,3,'CLOUD_CLIENT'
        ,Null
        );
        
    /* Autres paramètres non acceptés */
    IF (ACCESS_TYPE IS NULL) THEN
        BEGIN
            EXCEPTION EX_BAD_PARAM;
            EXIT;
        END
        
    /* Recherche de la valeur du paramètre */
    /* TODO : trouver un moyen de retourner le type en fontion de TDOMPARAM.PARAM_TYPE ??? */
    
    /* On teste d'abord l'accès général */
	SELECT CAST(DOMPARAM_VALUE AS SMALLINT) FROM GET_DOMPARAM('ACCESS','DOMAIN') INTO ACCESS_VALUE;
--    SELECT CAST(PARAM_VALUE AS SMALLINT) FROM TDOMPARAM WHERE PARAM_NAME='DOM_ACCESS' ;

    /* Le résutat doit être non Null (sinon cela veut dire que l'on teste un accès inexistant dans la table TDOMPARAM) */
    IF (ACCESS_VALUE IS NULL) THEN
        BEGIN
            EXCEPTION EX_NOPARAM;
            EXIT;
        END

    /* Si cet accès n'est pas autorisé ou est le seul à tester, on sort immédiatement */
    IF (I_ACCESS_TYPE = 0 OR ACCESS_VALUE != 1) THEN
        BEGIN
            ACCESS=ACCESS_VALUE;
            SUSPEND;
            EXIT;
        END

    ACCESS_VALUE=NULL;
    
    /* Dans le cas contraire, on va tester l'accès correspondant */
	SELECT CAST(DOMPARAM_VALUE AS SMALLINT) FROM GET_DOMPARAM('ACCESS',:ACCESS_TYPE) INTO ACCESS_VALUE;
    --SELECT CAST(PARAM_VALUE AS SMALLINT) FROM TDOMPARAM WHERE PARAM_NAME=:ACCESS_TYPE INTO ACCESS_VALUE;
    IF (ACCESS_VALUE IS NULL) THEN
        BEGIN
            EXCEPTION EX_NOPARAM;
            EXIT;
        END

    ACCESS=ACCESS_VALUE;
    SUSPEND;
        
END ^

ALTER PROCEDURE GET_FBSERVERS (I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (FBSERVER_ID INTEGER,
FBSERVER_NAME VARCHAR(100) CHARACTER SET UTF8,
FBSERVER_TCPPORT INTEGER,
FBSERVER_HOST VARCHAR(255) CHARACTER SET UTF8,
FBSERVER_TUNNELPORT INTEGER,
FBSERVER_TUNNELHOST VARCHAR(255) CHARACTER SET UTF8,
FBSERVER_LIBROOTPATH VARCHAR(255) CHARACTER SET UTF8,
FBSERVER_FBADMLOGIN VARCHAR(31) CHARACTER SET UTF8,
FBSERVER_FBADMPASSWD VARCHAR(100) CHARACTER SET UTF8,
FBSERVER_SIZE_MB BIGINT,
FBSERVER_STATE STATE)
AS 
/*
    Renvoie la liste des serveurs Firebird

    Attend :
    - I_TFBSERVER_STATE : critère de sélection des états à afficher
    
    Renvoie: cf. table FBSERVER
    
    Par défaut, on ne renvoie que les serveurs en état actif
    
MAJ V13 :
    - Ajout FBSERVER_LIB_ROOT_PATH
    - Ajout FBADM*
V18 :
	- Force les paramètres NOT NULL En entrée...

V 19 :
	- Correction FBSERVER_NAME Varchar(50) ==> Varchar (100)

MAJ V31 :
	- Ajout SIZE_MB
*/

DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
BEGIN

    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

    /* construction des WHERE */
    SQL_WHERE_FBSERVER = '';

    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER; 

	FOR EXECUTE STATEMENT '
        SELECT
            TFBSERVER.ID,
            TFBSERVER.NAME,
            COALESCE(TFBSERVER.TCPPORT,0),
            TFBSERVER.HOST,
            COALESCE(TFBSERVER.TUNNELPORT,0),
            COALESCE(TFBSERVER.TUNNELHOST,''''),
            COALESCE(TFBSERVER.LIBROOTPATH,''''),
            FBADMLOGIN,
            COALESCE(FBADMPASSWD,''''),
			COALESCE(TFBSERVER.SIZE_MB,0),
            TFBSERVER.STATE
        FROM TFBSERVER' || IIF (:SQL_WHERE_FBSERVER != '' , ' WHERE ' || :SQL_WHERE_FBSERVER, '') || '
        ORDER BY TFBSERVER.NAME'
    INTO
	    :FBSERVER_ID,
	    :FBSERVER_NAME,
	    :FBSERVER_TCPPORT,
	    :FBSERVER_HOST,
	    :FBSERVER_TUNNELPORT,
	    :FBSERVER_TUNNELHOST,
	    :FBSERVER_LIBROOTPATH,
	    :FBSERVER_FBADMLOGIN,
	    :FBSERVER_FBADMPASSWD,
		:FBSERVER_SIZE_MB,
	    :FBSERVER_STATE
	DO
		SUSPEND;
END ^

ALTER PROCEDURE GET_FBSERVER_INFOS (I_TFBSERVER_ID INTEGER NOT NULL,
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (FBSERVER_ID INTEGER,
FBSERVER_NAME VARCHAR(50) CHARACTER SET UTF8,
FBSERVER_TCPPORT INTEGER,
FBSERVER_HOST VARCHAR(255) CHARACTER SET UTF8,
FBSERVER_TUNNELPORT INTEGER,
FBSERVER_TUNNELHOST VARCHAR(255) CHARACTER SET UTF8,
FBSERVER_LIBROOTPATH VARCHAR(255) CHARACTER SET UTF8,
FBSERVER_FBADMLOGIN VARCHAR(31) CHARACTER SET UTF8,
FBSERVER_FBADMPASSWD VARCHAR(100) CHARACTER SET UTF8,
FBSERVER_SIZE_MB BIGINT,
FBSERVER_STATE STATE)
AS 
/*
    Renvoie les informations détaillées associées à un serveur Firebird

    Attend :
    - I_TFBSERVER_ID : un code numérique identifiant de propriétaire (FK TOWNER)
    - I_TFBSERVER_STATE : critère de sélection des états à afficher

MAJ V13 :
    - Ajout FBSERVER_LIB_ROOT_PATH
    - Ajout FBADM*

MAJ V31 :
	- Ajout SIZE_MB
*/
DECLARE VARIABLE REC_FOUND INTEGER;
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
BEGIN

    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    
    /* construction des WHERE */
    SQL_WHERE_FBSERVER = '';
    
    REC_FOUND=0;

    IF (:I_TFBSERVER_STATE ='' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER; 

	FOR EXECUTE STATEMENT '
        SELECT
            TFBSERVER.ID,
            TFBSERVER.NAME,
            COALESCE(TFBSERVER.TCPPORT,0),
            TFBSERVER.HOST,
            COALESCE(TFBSERVER.TUNNELPORT,0),
            COALESCE(TFBSERVER.TUNNELHOST,''''),
            COALESCE(TFBSERVER.LIBROOTPATH,''''),
            FBADMLOGIN,
            COALESCE(FBADMPASSWD,''''),
			COALESCE(TFBSERVER.SIZE_MB,0),
            TFBSERVER.STATE
        FROM TFBSERVER
        WHERE
            TFBSERVER.ID=' || :I_TFBSERVER_ID || IIF (:SQL_WHERE_FBSERVER != '' , ' AND ' || :SQL_WHERE_FBSERVER, '')
    INTO
	    :FBSERVER_ID,
	    :FBSERVER_NAME,
	    :FBSERVER_TCPPORT,
	    :FBSERVER_HOST,
	    :FBSERVER_TUNNELPORT,
	    :FBSERVER_TUNNELHOST,
	    :FBSERVER_LIBROOTPATH,
	    :FBSERVER_FBADMLOGIN,
	    :FBSERVER_FBADMPASSWD,
		:FBSERVER_SIZE_MB,
	    :FBSERVER_STATE
	DO
    BEGIN
        REC_FOUND=:REC_FOUND+1;
        SUSPEND;
    END

    IF (REC_FOUND=0) THEN EXCEPTION EX_NOFBSER;
    
END ^

ALTER PROCEDURE GET_GEDGROUPS_FOR_GEDUSER (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_COUNT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
GEDGROUP_ID INTEGER,
GEDGROUP_NAME VARCHAR(100) CHARACTER SET UTF8,
GEDGROUP_TYPE SMALLINT,
GEDGROUP_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDGROUP_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_GEDUSERS_COUNT INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
GEDUSER_STATE STATE,
OWNER_STATE STATE)
AS 
/*
	Renvoie la liste des groupes associés à un Utilisateur GED
	
MAJ V22 :
    - Ajout des informations détaillées GROUP pour améliorations performances NAS

MAJ V 32
	- Ajout TYPE + PROFILE ID + COMMENT + DATE's
	
MAJ V34
    - Ajout GEDUSERS_COUNT en sortie...

*/
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);

DECLARE VARIABLE SQL_WHERE_GEDUSER_COUNT VARCHAR(8000);

DECLARE VARIABLE ID_OK Integer;    
BEGIN
    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);
    I_TGEDUSER_COUNT_STATE = TRIM(I_TGEDUSER_COUNT_STATE);

    SQL_WHERE_OWNER = '';
	SQL_WHERE_GEDUSER = '';
	SQL_WHERE_GEDUSER_COUNT='';
    ID_OK = Null;

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER;

    -- Utilisateur GED 
    IF (:I_TGEDUSER_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER; 

    /* Existence/visibilité de l'utilisateur GED lui-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TGEDUSER.ID
		FROM TGEDUSER INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
        WHERE TGEDUSER.ID=' || :I_TGEDUSER_ID ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_GEDUSER != '' ,' AND ' || :SQL_WHERE_GEDUSER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDUSER;
    
	IF (:I_TGEDUSER_COUNT_STATE ='') THEN
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER_COUNT;
	ELSE
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_COUNT_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER_COUNT;

	/* Recherche des groupes GED */
	FOR EXECUTE STATEMENT '
		SELECT
            TGEDUSER.ID,
			TGEDGROUPUSER.TGEDGROUP_ID,
			-- Ajout V22
			TGEDGROUP.NAME,
			TGEDGROUP.TOWNER_ID,
			-- Ajout V32
			TGEDGROUP."TYPE",
			COALESCE(TGEDGROUP.COMMENT,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDGROUP.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDGROUP.MODIF_DATE)),
			COALESCE(TGEDGROUP.TPROFILE_ID,0),
            (
                SELECT COUNT(TGEDGROUPUSER.TGEDUSER_ID)
                FROM TGEDGROUPUSER INNER JOIN TGEDUSER ON TGEDGROUPUSER.TGEDUSER_ID=TGEDUSER.ID
                WHERE TGEDGROUPUSER.TGEDGROUP_ID=TGEDGROUP.ID '
                || IIF (:SQL_WHERE_GEDUSER_COUNT != '' , ' AND (' || :SQL_WHERE_GEDUSER_COUNT || ')', '') || '
            ),
			
			TGEDUSER.STATE,
			TOWNER.STATE
		FROM
			TGEDGROUPUSER
                INNER JOIN TGEDUSER ON TGEDGROUPUSER.TGEDUSER_ID=TGEDUSER.ID
                    INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
                INNER JOIN TGEDGROUP ON TGEDGROUPUSER.TGEDGROUP_ID=TGEDGROUP.ID
                
		WHERE
			TGEDGROUPUSER.TGEDUSER_ID=' || :I_TGEDUSER_ID ||
--			Finalement nous retournons aussi les groupes primaires
-- 			-- Même si aucun groupe primaire n'est censé être retourné ici, on s'en assure...
-- 			' AND TGEDGROUP.ID<> COALESCE(TGEDUSER.TGEDGROUP_ID,0)' ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
		INTO
			:GEDUSER_ID,
			:GEDGROUP_ID,
			-- Ajout V22
			:GEDGROUP_NAME,
			:OWNER_ID,
			-- Ajout V32
			:GEDGROUP_TYPE,
			:GEDGROUP_COMMENT,
			:GEDGROUP_CREATE_DATE,
			:GEDGROUP_MODIF_DATE,
			:PROFILE_ID,
            -- Ajout V34
			:GEDGROUP_GEDUSERS_COUNT,
			
			:GEDUSER_STATE,
			:OWNER_STATE
	DO
		SUSPEND;

END ^

ALTER PROCEDURE GET_GEDGROUPS_FOR_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '',
I_TGEDUSER_COUNT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
GEDGROUP_ID INTEGER,
GEDGROUP_NAME VARCHAR(100) CHARACTER SET UTF8,
GEDGROUP_TYPE SMALLINT,
GEDGROUP_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDGROUP_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_GEDUSERS_COUNT INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
	Renvoie les groupes d'Utilisateurs GED  liés à une bibliothèque dans la table TGEDGROUPLIB
	
V 32 :
	Création

MAJ V34
    - Ajout GEDUSERS_COUNT en sortie...
    - Ajout de COMMENT + DATES en sortie...

*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);

DECLARE VARIABLE SQL_WHERE_GEDUSER_COUNT VARCHAR(8000);

DECLARE VARIABLE ID_OK Integer;    
BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    I_TGEDUSER_COUNT_STATE = TRIM(I_TGEDUSER_COUNT_STATE);

	SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
	SQL_WHERE_GEDUSER_COUNT='';
	ID_OK = Null;


    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
	/* Même OWNER pour TLIBRARY et TPROFILE */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

   /* Serveur Firebird (si non Null) utilisable outrepassable...*/
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

   -- Library existante et modifiable...
    IF (:I_TLIBRARY_STATE ='' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

    /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TLIBRARY.ID
		FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;

	IF (:I_TGEDUSER_COUNT_STATE ='') THEN
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER_COUNT;
	ELSE
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_COUNT_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER_COUNT;


	/* Recherche des Groupes */
	FOR EXECUTE STATEMENT '
		SELECT
			TGEDGROUPLIB.TLIBRARY_ID,
			TGEDGROUPLIB.TGEDGROUP_ID,
			TGEDGROUP."NAME",
			COALESCE(TGEDGROUP."TYPE",0),
			COALESCE(TGEDGROUP.COMMENT,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDGROUP.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDGROUP.MODIF_DATE)),			
			COALESCE(TGEDGROUPLIB.TPROFILE_ID,0),
			TGEDGROUP.TOWNER_ID,
			COALESCE(TFBSERVER.ID,0),
            (
                SELECT COUNT(TGEDGROUPUSER.TGEDUSER_ID)
                FROM TGEDGROUPUSER INNER JOIN TGEDUSER ON TGEDGROUPUSER.TGEDUSER_ID=TGEDUSER.ID
                WHERE TGEDGROUPUSER.TGEDGROUP_ID=TGEDGROUP.ID '
                || IIF (:SQL_WHERE_GEDUSER_COUNT != '' , ' AND (' || :SQL_WHERE_GEDUSER_COUNT || ')', '') || '
            ),
			TLIBRARY.STATE,
            TOWNER.STATE,
			COALESCE(TFBSERVER.STATE,0)
			
		FROM TGEDGROUPLIB
            INNER JOIN TGEDGROUP ON TGEDGROUPLIB.TGEDGROUP_ID=TGEDGROUP.ID
            INNER JOIN TLIBRARY  ON TGEDGROUPLIB.TLIBRARY_ID=TLIBRARY.ID
                LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
            INNER JOIN TOWNER ON TGEDGROUP.TOWNER_ID=TOWNER.ID
		WHERE
			TGEDGROUPLIB.TLIBRARY_ID=' || :I_TLIBRARY_ID || 
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
        '
        ORDER BY TGEDGROUP."NAME" '
		INTO
			:LIBRARY_ID,
			:GEDGROUP_ID,
			:GEDGROUP_NAME,
			:GEDGROUP_TYPE,
            -- Ajout V34
			:GEDGROUP_COMMENT,
			:GEDGROUP_CREATE_DATE,
			:GEDGROUP_MODIF_DATE,
			:PROFILE_ID,
			:OWNER_ID,
			:FBSERVER_ID,
            -- Ajout V34
			:GEDGROUP_GEDUSERS_COUNT,
			:LIBRARY_STATE,
			:OWNER_STATE,
			:FBSERVER_STATE

	DO
	BEGIN
		SUSPEND;
    END
END ^

ALTER PROCEDURE GET_GEDGROUPS_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_COUNT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDGROUP_ID INTEGER,
GEDGROUP_NAME VARCHAR(100) CHARACTER SET UTF8,
GEDGROUP_TYPE SMALLINT,
GEDGROUP_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDGROUP_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_GEDUSERS_COUNT INTEGER,
PROFILE_ID INTEGER,
OWNER_STATE STATE)
AS 
/*
	Renvoie la liste des groupes associés à un Propriétaire
	
MAJ V22 :
    - Ajout informaitons détaillées GROUP pour amélioration performances NAS

MAJ V32 :
	- Ajout TYPE + PROFILE ID + COMMENT + DATE's

MAJ v34 :
    - Ajout GEDUSERS_COUNT en sortie...
*/
DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;

DECLARE VARIABLE SQL_WHERE_GEDUSER_COUNT VARCHAR(8000);
BEGIN
    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TGEDUSER_COUNT_STATE = TRIM(I_TGEDUSER_COUNT_STATE);

	SQL_WHERE = '';
	ID_OK = Null;

    SQL_WHERE_GEDUSER_COUNT='';
    
    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE;

    EXECUTE STATEMENT '
        SELECT ID FROM TOWNER
        WHERE ID=' || :I_TOWNER_ID || IIF (:SQL_WHERE != '' , ' AND (' || :SQL_WHERE || ')', '')
        INTO ID_OK;

	IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;

	IF (:I_TGEDUSER_COUNT_STATE ='') THEN
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER_COUNT;
	ELSE
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_COUNT_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER_COUNT;

    
	/* Recherche des Utilisateurs GED */
	FOR EXECUTE STATEMENT '
		SELECT
			TGEDGROUP.ID,

			-- Ajout V22
			TGEDGROUP.NAME,
			-- Ajout V32
			COALESCE(TGEDGROUP."TYPE",0),
			COALESCE(TGEDGROUP.COMMENT,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDGROUP.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDGROUP.MODIF_DATE)),
			COALESCE(TGEDGROUP.TPROFILE_ID,0),
            (
                SELECT COUNT(TGEDGROUPUSER.TGEDUSER_ID)
                FROM TGEDGROUPUSER INNER JOIN TGEDUSER ON TGEDGROUPUSER.TGEDUSER_ID=TGEDUSER.ID
                WHERE TGEDGROUPUSER.TGEDGROUP_ID=TGEDGROUP.ID '
                || IIF (:SQL_WHERE_GEDUSER_COUNT != '' , ' AND (' || :SQL_WHERE_GEDUSER_COUNT || ')', '') || '
            ),
			
			TGEDGROUP.TOWNER_ID,
			TOWNER.STATE AS TOWNER_STATE
		FROM
			TGEDGROUP
                INNER JOIN TOWNER ON TGEDGROUP.TOWNER_ID=TOWNER.ID
		WHERE
			TGEDGROUP.TOWNER_ID=' || :I_TOWNER_ID ||
        '
        ORDER BY TGEDGROUP.ID
        '
		INTO
			:GEDGROUP_ID,
			-- Ajout V22
			:GEDGROUP_NAME,

			-- Ajout V32
			:GEDGROUP_TYPE,
			:GEDGROUP_COMMENT,
			:GEDGROUP_CREATE_DATE,
			:GEDGROUP_MODIF_DATE,
			:PROFILE_ID,

            -- Ajout V34
			:GEDGROUP_GEDUSERS_COUNT,

			:OWNER_ID,
			:OWNER_STATE
	DO
		SUSPEND;

END ^

ALTER PROCEDURE GET_GEDGROUP_INFOS (I_TGEDGROUP_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_COUNT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDGROUP_ID INTEGER,
OWNER_ID INTEGER,
GEDGROUP_NAME VARCHAR(100) CHARACTER SET UTF8,
GEDGROUP_TYPE SMALLINT,
GEDGROUP_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDGROUP_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDGROUP_GEDUSERS_COUNT INTEGER,
PROFILE_ID INTEGER,
OWNER_STATE STATE)
AS 
/*
	Renvoie les informations détaillées sur un groupe d'Utilisateur GED...

MAJ V32 :
	- Ajout TYPE + PROFILE ID + COMMENT + DATE's

MAJ v34 :
    - Ajout GEDUSERS_COUNT en sortie...

*/
DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
DECLARE VARIABLE REC_FOUND INTEGER;

DECLARE VARIABLE SQL_WHERE_GEDUSER_COUNT VARCHAR(8000);
BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TGEDUSER_COUNT_STATE = TRIM(I_TGEDUSER_COUNT_STATE);

	SQL_WHERE = '';
	REC_FOUND = 0;

    SQL_WHERE_GEDUSER_COUNT='';

    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 

	IF (:I_TGEDUSER_COUNT_STATE ='') THEN
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER_COUNT;
	ELSE
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_COUNT_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER_COUNT;
    
    FOR EXECUTE STATEMENT '
        SELECT
            TGEDGROUP.ID,
			TGEDGROUP.TOWNER_ID,
			TGEDGROUP.NAME,
			-- Ajout V32
			COALESCE(TGEDGROUP."TYPE",0),
			COALESCE(TGEDGROUP.COMMENT,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDGROUP.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDGROUP.MODIF_DATE)),
			COALESCE(TGEDGROUP.TPROFILE_ID,0),
            (
                SELECT COUNT(TGEDGROUPUSER.TGEDUSER_ID)
                FROM TGEDGROUPUSER INNER JOIN TGEDUSER ON TGEDGROUPUSER.TGEDUSER_ID=TGEDUSER.ID
                WHERE TGEDGROUPUSER.TGEDGROUP_ID=TGEDGROUP.ID '
                || IIF (:SQL_WHERE_GEDUSER_COUNT != '' , ' AND (' || :SQL_WHERE_GEDUSER_COUNT || ')', '') || '
            ),
            TOWNER.STATE
        FROM TGEDGROUP INNER JOIN TOWNER ON TGEDGROUP.TOWNER_ID=TOWNER.ID
        WHERE
            TGEDGROUP.ID=' || :I_TGEDGROUP_ID ||
            IIF (:SQL_WHERE != '' , ' AND (' || :SQL_WHERE || ')', '')
        INTO
            :GEDGROUP_ID,
            :OWNER_ID,
            :GEDGROUP_NAME,

			-- Ajout V32
			:GEDGROUP_TYPE,
			:GEDGROUP_COMMENT,
			:GEDGROUP_CREATE_DATE,
			:GEDGROUP_MODIF_DATE,
			:PROFILE_ID,
            -- Ajout V34
			:GEDGROUP_GEDUSERS_COUNT,

            :OWNER_STATE
    DO
    BEGIN
        REC_FOUND=:REC_FOUND+1;
        SUSPEND;
    END

    IF (REC_FOUND=0) THEN EXCEPTION EX_NOGEDGROUP;

END ^

ALTER PROCEDURE GET_GEDPARAM (I_TGEDPARAM_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDPARAM_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAM_CLASS INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
GEDPARAM_DEFAULTVALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
LIBRARY_ID INTEGER,
FBSERVER_ID INTEGER,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
	Renvoie les informations détaillées d'un paramètre GED_LOGIN

	Une erreur est levée si le paramètre n'existe pas...

MAJ V11 :
    - Ajout SYSTEM

V20 :
    - SYSTEM ==> PROTECTION

V21 :
	- ajout TGEDDPARAM.CLASS
	
V22 :
    - GEDPARAM_DEFAULTVALUEBLB est remplacé par GEDPARAM_DEFAULTVALUEBLB (boolean) et l'extraction du BLOB est géré par une PS à part (GET_GEDPARAM_VALUEBLB)

V40 :
	- Ajout d'infos GEDPARAM en sortie
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE REC_FOUND INTEGER;

BEGIN
    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

    SQL_WHERE_OWNER= '';
    SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';

    REC_FOUND=0;

    IF (I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER;

        IF (I_TLIBRARY_STATE = '') THEN
            /* Etat de visibilité par défaut */
            SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
        ELSE 
            /* Etat de visibilité demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB;

       /* Serveur Firebird (si non Null) utilisable outrepassable...*/
        IF (:I_TFBSERVER_STATE = '' ) THEN
            /* Etat de visibilité par défaut */
            SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
        ELSE 
            /* Etat de visibilité demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         


	FOR
        EXECUTE STATEMENT
             'SELECT
                TGEDPARAM.ID,
                TGEDPARAM.SECTION,
                COALESCE(TGEDPARAM.NAME,''''),
                TGEDPARAM."TYPE",
				TGEDPARAM."CLASS",
                COALESCE(TGEDPARAM.DEFAULTVALUE,''''),
                IIF(TGEDPARAM.DEFAULTVALUEBLB IS NULL,0,1),
                COALESCE(TGEDPARAM."COMMENT",''''),
				TGEDPARAM.PROTECTION,
                (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)),
                COALESCE(TGEDPARAM.TOWNER_ID, 0),
                COALESCE(TGEDPARAM.TLIBRARY_ID,0),
                COALESCE(TFBSERVER.ID,0),
                COALESCE(TOWNER.STATE,0),
                COALESCE(TLIBRARY.STATE,0),
                COALESCE(TFBSERVER.STATE,0)
            FROM TGEDPARAM 
                LEFT JOIN TOWNER ON TGEDPARAM.TOWNER_ID=TOWNER.ID
                LEFT JOIN TLIBRARY ON TGEDPARAM.TLIBRARY_ID=TLIBRARY.ID
                    LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
            WHERE TGEDPARAM.ID=' || :I_TGEDPARAM_ID ||
                IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || 'OR TOWNER.STATE IS NULL)', '') ||
                IIF (:SQL_WHERE_LIB != '' , ' AND (' || :SQL_WHERE_LIB || 'OR TLIBRARY.STATE IS NULL)', '') ||
                IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '')
                
        INTO
            :GEDPARAM_ID,
            :GEDPARAM_SECTION,
            :GEDPARAM_NAME,
            :GEDPARAM_TYPE,
			:GEDPARAM_CLASS,
            :GEDPARAM_DEFAULTVALUE,
            :GEDPARAM_DEFAULTVALUEBLB_FILLED,
            :GEDPARAM_COMMENT,
			:GEDPARAM_PROTECTION,
			:GEDPARAM_MODIF_DATE,
            :OWNER_ID,
            :LIBRARY_ID,
            :FBSERVER_ID,
            :OWNER_STATE,
            :LIBRARY_STATE,
            :FBSERVER_STATE

	DO
    BEGIN
		SUSPEND;
        REC_FOUND=:REC_FOUND+1;
    END

    IF (REC_FOUND=0) THEN EXCEPTION EX_NOGEDPARAM;
END ^

ALTER PROCEDURE GET_GEDPARAMOWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMOWNER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMOWNER_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMOWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
OWNER_STATE STATE)
AS 
/*
	Renvoie tous les détails pour un paramètre GED donné d'un Propriétaire donné...

V21 :
- Création

V22 :
    - GEDPARAMOWNER_VALUEBLB est remplacé par GEDPARAMOWNER_VALUEBLB_FILLED (boolean)

V40 :
	- Factorisation TGEDPARAM
	- Ajout d'infos GEDPARAM en sortie

*/

DECLARE VARIABLE ID_OK Integer;
DECLARE VARIABLE SQL_WHERE VARCHAR(8000);

BEGIN

	SQL_WHERE = '';
	ID_OK= Null;

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 

    /* Existence/visibilité du OWNER demandé (OWNER STATE OK)*/
    EXECUTE STATEMENT '
        SELECT TOWNER.ID
		FROM TOWNER
        WHERE TOWNER.ID=' || :I_TOWNER_ID ||
            IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '') 
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;

	FOR
		SELECT
			TGEDPARAMOWNER.TOWNER_ID,
			TGEDPARAM.SECTION,
			TGEDPARAM.NAME,
			TGEDPARAM."TYPE",
			COALESCE(TGEDPARAMOWNER."VALUE",''),
			IIF(TGEDPARAMOWNER.VALUEBLB IS NULL,0,1),
			COALESCE(TGEDPARAM."COMMENT",''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMOWNER.MODIF_DATE)),
            TGEDPARAM.ID,
			TGEDPARAM.CLASS,
			TGEDPARAM.PROTECTION,
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)),
			COALESCE(TGEDPARAM.TOWNER_ID,0),
			COALESCE(TGEDPARAM.TLIBRARY_ID,0),
			COALESCE(TGEDPARAM.DEFAULTVALUE,''),
			TOWNER.STATE
		FROM TGEDPARAMOWNER
			INNER JOIN TGEDPARAM ON TGEDPARAMOWNER.TGEDPARAM_ID=TGEDPARAM.ID
			INNER JOIN TOWNER ON TGEDPARAMOWNER.TOWNER_ID=TOWNER.ID
		-- V40 V2
		WHERE TGEDPARAMOWNER.TOWNER_ID=:I_TOWNER_ID AND TGEDPARAMOWNER.TGEDPARAM_ID=:I_TGEDPARAM_ID -- TGEDPARAM.SECTION=:I_TGEDPARAM_SECTION AND TGEDPARAM.NAME=:I_TGEDPARAM_NAME
		INTO
			:OWNER_ID,
			:GEDPARAM_SECTION,
			:GEDPARAM_NAME,
			:GEDPARAM_TYPE,
			:GEDPARAMOWNER_VALUE,
			:GEDPARAMOWNER_VALUEBLB_FILLED,
			:GEDPARAM_COMMENT,
			:GEDPARAMOWNER_MODIF_DATE,
			:GEDPARAM_ID,
			:GEDPARAM_CLASS,
			:GEDPARAM_PROTECTION,
			:GEDPARAM_MODIF_DATE,
			:GEDPARAM_OWNER_ID,
			:GEDPARAM_LIBRARY_ID,
			:GEDPARAM_DEFAULTVALUE,
			:OWNER_STATE
	DO
		SUSPEND;
		
    IF (ROW_COUNT = 0) THEN EXCEPTION EX_NOGEDPARAMOWNER;

END ^

ALTER PROCEDURE GET_GEDPARAMOWNERS_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TGEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDPARAM_CLASS VARCHAR(15) CHARACTER SET UTF8 DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMOWNER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMOWNER_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMOWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
OWNER_STATE STATE)
AS 
/*
	Renvoie la liste de tous les paramètres pour un Propriétaire
	
	Particularités :
	- Pour des raisons de performances NAS, GEDPARAMOWNER_VALUEBLB_FILLED ne renvoie pas la valeur du BLOB
	mais indique si VALUEBLB est utilisé (NOT NULL) ou NON
	- Le paramètre SECTION permet de filtrer le résultat par rapport à une seule section dans TGEDPARAMOWNER pour le OWNER_ID donné (ie. pas tous les paramètres du profil)
	
	On utilisera la PS GET_GEDPARAM_FOR_OWNER pour obtenir la valeur de ce blob, le cas échéant...
	
V21:
    - Création

V40 :
	- Factorisation TGEDPARAM
    - Ajout d'infos GEDPARAM en sortie
    - Ajout I_TGEDPARAM_CLASS
*/

DECLARE VARIABLE ID_OK Integer;
DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_CLASS VARCHAR(8000);

BEGIN

	SQL_WHERE = '';
	ID_OK= Null;

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 

    /* Existence/visibilité du OWNER demandé (OWNER STATE OK)*/
    EXECUTE STATEMENT '
        SELECT TOWNER.ID
		FROM TOWNER
        WHERE TOWNER.ID=' || :I_TOWNER_ID ||
            IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '') 
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;
    
    I_TGEDPARAM_SECTION=TRIM(I_TGEDPARAM_SECTION);
    I_TGEDPARAM_CLASS=TRIM(I_TGEDPARAM_CLASS);    
    
    SQL_WHERE = '';
    
    -- Ajout du critère sur la section si le paramètre est passé
    IF (I_TGEDPARAM_SECTION != '') THEN
        SQL_WHERE='TGEDPARAM.SECTION=''' || :I_TGEDPARAM_SECTION || '''';

    -- Dernier filtre sur class
    IF (I_TGEDPARAM_CLASS!='') THEN
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDPARAM_CLASS,'TGEDPARAM.CLASS') INTO SQL_WHERE_CLASS;
	FOR
        EXECUTE STATEMENT
            'SELECT
                TGEDPARAMOWNER.TOWNER_ID,
                TGEDPARAM.SECTION,
                TGEDPARAM.NAME,
                TGEDPARAM."TYPE",
                COALESCE(TGEDPARAMOWNER."VALUE",''''),
                IIF(TGEDPARAMOWNER.VALUEBLB IS NULL,0,1),
                COALESCE(TGEDPARAM."COMMENT",''''),
				(SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMOWNER.MODIF_DATE)),
				TGEDPARAM.ID,
				TGEDPARAM.CLASS,
				TGEDPARAM.PROTECTION,
                (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)),
				COALESCE(TGEDPARAM.TOWNER_ID,0),
				COALESCE(TGEDPARAM.TLIBRARY_ID,0),
				COALESCE(TGEDPARAM.DEFAULTVALUE,''''),
                TOWNER.STATE
            FROM TGEDPARAMOWNER
				INNER JOIN TGEDPARAM ON TGEDPARAMOWNER.TGEDPARAM_ID = TGEDPARAM.ID
                INNER JOIN TOWNER ON TGEDPARAMOWNER.TOWNER_ID=TOWNER.ID
            WHERE TGEDPARAMOWNER.TOWNER_ID=' || :I_TOWNER_ID || 
                IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '') ||
                IIF (:SQL_WHERE_CLASS !='','AND ' || :SQL_WHERE_CLASS,'') || '
            ORDER BY TGEDPARAM.SECTION,TGEDPARAM.NAME'
		INTO
			:OWNER_ID,
			:GEDPARAM_SECTION,
			:GEDPARAM_NAME,
			:GEDPARAM_TYPE,
			:GEDPARAMOWNER_VALUE,
			:GEDPARAMOWNER_VALUEBLB_FILLED,
			:GEDPARAM_COMMENT,
			:GEDPARAMOWNER_MODIF_DATE,
			:GEDPARAM_ID,
			:GEDPARAM_CLASS,
			:GEDPARAM_PROTECTION,
			:GEDPARAM_MODIF_DATE,
			:GEDPARAM_OWNER_ID,
			:GEDPARAM_LIBRARY_ID,
			:GEDPARAM_DEFAULTVALUE,
			:OWNER_STATE
	DO
		SUSPEND;

END ^

ALTER PROCEDURE GET_GEDPARAMOWNER_MDF (I_TOWNER_ID INTEGER NOT NULL)
RETURNS (GEDPARAMOWNERS_INFOS BLOB CHARACTER SET UTF8)
AS 
/*
    Retourne une chaine contenant la concaténation des paramètres GED d'un OWNER exemple :
     "LICENCE";"PANIERES_WEB_DOSSIER";"2";"1";"0"|"LICENCE";"TYPE";"7";"FAMILY";"0"

V24 :
    - Création
    
V27 :
	- Correction de l'appel de GET_GEDPARAMOWNERS_FOR_OWNER avec tous les STATES...

V40 :
	- Factorisation TGEDPARAM
	- Format GEDPARAMOWNERS_INFOS modifié :
	SECTION;NAME;TYPE;VALUE;VALUEBLB_FILLED + ;GEDPARAM_ID;GEDPARAM_CLASS,GEDPARAM_PROTECTION
	V40 V2 : voir si besoin ajout GEDPARAM_OWNER_ID + GEDPARAM_LIBRARY_ID ???
	V40 V3 : ajout de TGEDPARAM.DEFAULTVALUE...
	SECTION;NAME;TYPE;VALUE;VALUEBLB_FILLED + ;GEDPARAM_ID;GEDPARAM_CLASS,GEDPARAM_PROTECTION +,DEFAULTVALUE
*/
DECLARE VARIABLE GEDPARAM_INFOS VARCHAR(8000);
DECLARE VARIABLE GEDPARAM_NUM INTEGER;

DECLARE VARIABLE FIELD_SEP VARCHAR(5);
DECLARE VARIABLE RECORD_SEP VARCHAR(5);

BEGIN
    GEDPARAMOWNERS_INFOS='';
    GEDPARAM_NUM=0;
    GEDPARAM_INFOS='';
	SELECT COALESCE(CAST(DOMPARAM_VALUE AS VARCHAR(5)),';') FROM GET_DOMPARAM('DOMAIN','MDF_FIELD_SEP')  INTO FIELD_SEP;
	SELECT COALESCE(CAST(DOMPARAM_VALUE AS VARCHAR(5)),'|') FROM GET_DOMPARAM('DOMAIN','MDF_RECORD_SEP') INTO RECORD_SEP;

    FOR SELECT 
        '"' || GEDPARAM_SECTION || '"' ||
        :FIELD_SEP ||        
        '"' || GEDPARAM_NAME || '"' ||
        :FIELD_SEP ||        
        '"' || GEDPARAM_TYPE || '"' ||
        :FIELD_SEP ||        
        '"' || GEDPARAMOWNER_VALUE || '"' ||	
        :FIELD_SEP ||        
        '"' || GEDPARAMOWNER_VALUEBLB_FILLED || '"' ||
        :FIELD_SEP ||        
        '"' || GEDPARAM_ID || '"' ||
        :FIELD_SEP ||        
        '"' || GEDPARAM_CLASS || '"' ||
        :FIELD_SEP ||        
        '"' || GEDPARAM_PROTECTION || '"' ||
        :FIELD_SEP ||        
        '"' || GEDPARAM_DEFAULTVALUE || '"'
        
    
	-- Correction d'appel en V40 pour intégrer le paramètre de flitre sur la class (passé à vide ici, ie tous les paramètres)...
    FROM GET_GEDPARAMOWNERS_FOR_OWNER(:I_TOWNER_ID,'','','*')
    INTO GEDPARAM_INFOS
    DO
    BEGIN
        IF (GEDPARAM_NUM > 0) THEN
            GEDPARAMOWNERS_INFOS = GEDPARAMOWNERS_INFOS || :RECORD_SEP;
            
        GEDPARAMOWNERS_INFOS = 
            GEDPARAMOWNERS_INFOS || 
            GEDPARAM_INFOS;
        GEDPARAM_NUM = GEDPARAM_NUM + 1;
    END

    SUSPEND;
END ^

ALTER PROCEDURE GET_GEDPARAMOWNER_VALUEBLB (I_TOWNER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL)
RETURNS (GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMOWNER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMOWNER_VALUEBLB BLOB,
GEDPARAMOWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER)
AS 
/*
	Retourne une valeur BLOB pour un paramètre GED d'un propriétaire
	Les STATES ne sont PAS  évalués
	Le paramètre concerné doit exister préalablement à l'appel de cette PS

V22 :
    - Création

V40 :
	- Factorisation TGEDPARAM
	- Ajout d'infos GEDPARAM en sortie
*/
BEGIN
    FOR
        SELECT
			TGEDPARAM."TYPE",
			COALESCE(TGEDPARAMOWNER."VALUE",''),
            COALESCE(TGEDPARAMOWNER.VALUEBLB,''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMOWNER.MODIF_DATE)),
			TGEDPARAM.ID,
			TGEDPARAM.CLASS,
			TGEDPARAM.PROTECTION,
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)),
			COALESCE(TGEDPARAM.TOWNER_ID,0),
			COALESCE(TGEDPARAM.TLIBRARY_ID,0)

        FROM TGEDPARAMOWNER
			INNER JOIN TGEDPARAM ON TGEDPARAMOWNER.TGEDPARAM_ID = TGEDPARAM.ID
			-- V40 V2
		WHERE TGEDPARAMOWNER.TOWNER_ID=:I_TOWNER_ID AND TGEDPARAMOWNER.TGEDPARAM_ID=:I_TGEDPARAM_ID --TGEDPARAM.SECTION=:I_TGEDPARAM_SECTION AND TGEDPARAM.NAME=:I_TGEDPARAM_NAME
        INTO
			:GEDPARAM_TYPE, 
			:GEDPARAMOWNER_VALUE,
			:GEDPARAMOWNER_VALUEBLB,
			:GEDPARAMOWNER_MODIF_DATE,
			:GEDPARAM_ID,
			:GEDPARAM_CLASS,
			:GEDPARAM_PROTECTION,
			:GEDPARAM_MODIF_DATE,
			:GEDPARAM_OWNER_ID,
			:GEDPARAM_LIBRARY_ID


    DO
        SUSPEND;
        
	IF (ROW_COUNT = 0) THEN EXCEPTION EX_NOGEDPARAMOWNER;
END ^

ALTER PROCEDURE GET_GEDPARAMPROF (I_TPROFILE_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (PROFILE_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMPROF_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMPROF_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMPROF_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
OWNER_STATE STATE)
AS 
/*
	Renvoie tous les détails pour un paramètre GED donné d'un Profil donné...

MAJ V11 :
- Ajout MODIF_DATE

V22 :
    - GEDPARAMPROF_VALUEBLB est remplacé par GEDPARAMPROF_VALUEBLB_FILLED (boolean)
    
V40 :
    - Factorisation GEDPARAM
    - Ajout d'infos GEDPARAM en sortie

*/

DECLARE VARIABLE ID_OK Integer;
DECLARE VARIABLE SQL_WHERE VARCHAR(8000);

BEGIN

	SQL_WHERE = '';
	ID_OK= Null;

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 

    /* Existence/visibilité du PROFILE demandé (OWNER STATE OK)*/
    EXECUTE STATEMENT '
        SELECT TPROFILE.ID
		FROM TPROFILE INNER JOIN TOWNER ON TPROFILE.TOWNER_ID=TOWNER.ID
        WHERE TPROFILE.ID=' || :I_TPROFILE_ID ||
            IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '') 
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOPROFILE;

	FOR
		SELECT
			TGEDPARAMPROF.TPROFILE_ID,
			TGEDPARAM.SECTION,
			TGEDPARAM.NAME,
			TGEDPARAM."TYPE",
			COALESCE(TGEDPARAMPROF."VALUE",''),
			IIF(TGEDPARAMPROF.VALUEBLB IS NULL,0,1),
			COALESCE(TGEDPARAM."COMMENT",''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMPROF.MODIF_DATE)),
			TPROFILE.TOWNER_ID,
			TGEDPARAM.ID,
			TGEDPARAM.CLASS,
			TGEDPARAM.PROTECTION,
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)),
			COALESCE(TGEDPARAM.TOWNER_ID,0),
			COALESCE(TGEDPARAM.TLIBRARY_ID,0),
			COALESCE(TGEDPARAM.DEFAULTVALUE,''),
			TOWNER.STATE
		FROM TGEDPARAMPROF
            INNER JOIN TGEDPARAM ON TGEDPARAMPROF.TGEDPARAM_ID = TGEDPARAM.ID
            INNER JOIN TPROFILE ON TGEDPARAMPROF.TPROFILE_ID=TPROFILE.ID
                INNER JOIN TOWNER ON TPROFILE.TOWNER_ID=TOWNER.ID
		WHERE TGEDPARAMPROF.TPROFILE_ID=:I_TPROFILE_ID AND TGEDPARAMPROF.TGEDPARAM_ID = :I_TGEDPARAM_ID --SECTION=:I_TGEDPARAM_SECTION AND TGEDPARAM.NAME=:I_TGEDPARAM_NAME
		INTO
			:PROFILE_ID,
			:GEDPARAM_SECTION,
			:GEDPARAM_NAME,
			:GEDPARAM_TYPE,
			:GEDPARAMPROF_VALUE,
			:GEDPARAMPROF_VALUEBLB_FILLED,
			:GEDPARAM_COMMENT,
			:GEDPARAMPROF_MODIF_DATE,
			:OWNER_ID,
			:GEDPARAM_ID,
			:GEDPARAM_CLASS,
            :GEDPARAM_PROTECTION,
			:GEDPARAM_MODIF_DATE,
			:GEDPARAM_OWNER_ID,
			:GEDPARAM_LIBRARY_ID,
			:GEDPARAM_DEFAULTVALUE,
			:OWNER_STATE
	DO
		SUSPEND;
		
    IF (ROW_COUNT = 0) THEN EXCEPTION EX_NOGEDPARAMPROF;

END ^

ALTER PROCEDURE GET_GEDPARAMPROFS_FOR_PROFILE (I_TPROFILE_ID INTEGER NOT NULL,
I_TGEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDPARAM_CLASS VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (PROFILE_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMPROF_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMPROF_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMPROF_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
OWNER_STATE STATE)
AS 
/*
	Renvoie la liste de tous les paramètres pour un Profil
	
	Particularités :
	- Pour des raisons de performances NAS, GEDPARAMPROF_VALUEBLB_FILLED ne renvoie pas la valeur du BLOB
	mais indique si VALUEBLB est utilisé (NOT NULL) ou NON
	- Le paramètre SECTION permet de filtrer le résultat par rapport à une seule section dans TGEDPARAMPROF pour le PROFILE_ID donné (ie. pas tous les paramètres du profil)
	
	On utilisera la PS GET_GEDPARAM_FOR_PROFILE pour obtenir la valeur de ce blob, le cas échéant...

MAJ V11 :
- Ajout MODIF_DATE

MAJ V38
    - Ajout I_TGEDPARAM_CLASS en entrée
    - Ajout GEDPARAM_CLASS, GEDPARAM_TYPE, GEDPARAM_PROTECTION en sortie
    
V40 :
    - Factorisation GEDPARAM
    - Ajout d'infos GEDPARAM en sortie
*/

DECLARE VARIABLE ID_OK Integer;
DECLARE VARIABLE SQL_WHERE_CLASS VARCHAR(8000);

DECLARE VARIABLE SQL_WHERE VARCHAR(8000);

BEGIN

    I_TGEDPARAM_CLASS=TRIM(I_TGEDPARAM_CLASS);

	SQL_WHERE = '';
	ID_OK= Null;
	SQL_WHERE_CLASS = '';

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 

    /* Existence/visibilité du PROFILE demandé (OWNER STATE OK)*/
    EXECUTE STATEMENT '
        SELECT TPROFILE.ID
		FROM TPROFILE INNER JOIN TOWNER ON TPROFILE.TOWNER_ID=TOWNER.ID
        WHERE TPROFILE.ID=' || :I_TPROFILE_ID ||
            IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '') 
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOPROFILE;
    
    I_TGEDPARAM_SECTION=TRIM(I_TGEDPARAM_SECTION);
    SQL_WHERE = '';
    
    -- Ajout du critère sur la section si le paramètre est passé
    IF (I_TGEDPARAM_SECTION != '') THEN
        SQL_WHERE='TGEDPARAM.SECTION=''' || :I_TGEDPARAM_SECTION || '''';

    -- Dernier filtre sur class
    IF (I_TGEDPARAM_CLASS!='') THEN
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDPARAM_CLASS,'TGEDPARAM.CLASS') INTO SQL_WHERE_CLASS;

	FOR
        EXECUTE STATEMENT
            'SELECT
                TGEDPARAMPROF.TPROFILE_ID,
                TGEDPARAM.SECTION,
                TGEDPARAM.NAME,
                TGEDPARAM."TYPE",
                COALESCE(TGEDPARAMPROF."VALUE",''''),
                IIF(TGEDPARAMPROF.VALUEBLB IS NULL,0,1),
                COALESCE(TGEDPARAM."COMMENT",''''),
                (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMPROF.MODIF_DATE)),
                TGEDPARAM.ID,
                TGEDPARAM.CLASS,
                TGEDPARAM.PROTECTION,
                (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)),
				COALESCE(TGEDPARAM.TOWNER_ID,0),
				COALESCE(TGEDPARAM.TLIBRARY_ID,0),
				COALESCE(TGEDPARAM.DEFAULTVALUE,''''),
                TPROFILE.TOWNER_ID,
                TOWNER.STATE
            FROM TGEDPARAMPROF 
                INNER JOIN TGEDPARAM ON TGEDPARAMPROF.TGEDPARAM_ID = TGEDPARAM.ID
                INNER JOIN TPROFILE ON TGEDPARAMPROF.TPROFILE_ID=TPROFILE.ID
                    INNER JOIN TOWNER ON TPROFILE.TOWNER_ID=TOWNER.ID
                
            WHERE TGEDPARAMPROF.TPROFILE_ID=' || :I_TPROFILE_ID || 
            IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '') || 
            IIF (:SQL_WHERE_CLASS !='','AND ' || :SQL_WHERE_CLASS,'') || '
            ORDER BY TGEDPARAM.SECTION,TGEDPARAM.NAME'
		INTO
			:PROFILE_ID,
			:GEDPARAM_SECTION,
			:GEDPARAM_NAME,
			:GEDPARAM_TYPE,
			:GEDPARAMPROF_VALUE,
			:GEDPARAMPROF_VALUEBLB_FILLED,
			:GEDPARAM_COMMENT,
			:GEDPARAMPROF_MODIF_DATE,
            :GEDPARAM_ID,
			:GEDPARAM_CLASS,
			:GEDPARAM_PROTECTION,
			:GEDPARAM_MODIF_DATE,
			:GEDPARAM_OWNER_ID,
			:GEDPARAM_LIBRARY_ID,
			:GEDPARAM_DEFAULTVALUE,
			:OWNER_ID,
			:OWNER_STATE
	DO
		SUSPEND;


END ^

ALTER PROCEDURE GET_GEDPARAMPROF_VALUEBLB (I_TPROFILE_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL)
RETURNS (GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMPROF_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMPROF_VALUEBLB BLOB,
GEDPARAMPROF_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER)
AS 
/*
	Retourne une valeur BLOB pour un paramètre GED d'un profil
	Les STATES ne sont PAS  évalués
	Le paramètre concerné doit exister préalablement à l'appel de cette PS

V22 :
    - Création
    
V40 :
    - Factorisation GEDPARAM
    - Ajout d'infos GEDPARAM en sortie
*/
BEGIN
    FOR
        SELECT
			TGEDPARAM."TYPE",
			COALESCE(TGEDPARAMPROF."VALUE",''),
            COALESCE(TGEDPARAMPROF.VALUEBLB,''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMPROF.MODIF_DATE)),
			TGEDPARAM.ID,
			TGEDPARAM.CLASS,
			TGEDPARAM.PROTECTION,
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)),
			COALESCE(TGEDPARAM.TOWNER_ID,0),
			COALESCE(TGEDPARAM.TLIBRARY_ID,0)
	        
        FROM TGEDPARAMPROF
            INNER JOIN TGEDPARAM ON TGEDPARAMPROF.TGEDPARAM_ID = TGEDPARAM.ID
        -- V40 V2
		WHERE TGEDPARAMPROF.TPROFILE_ID = :I_TPROFILE_ID AND TGEDPARAMPROF.TGEDPARAM_ID=:I_TGEDPARAM_ID --TGEDPARAM.SECTION = :I_TGEDPARAM_SECTION AND TGEDPARAM.NAME = :I_TGEDPARAM_NAME
        INTO
            :GEDPARAM_TYPE,
            :GEDPARAMPROF_VALUE,
            :GEDPARAMPROF_VALUEBLB,
            :GEDPARAMPROF_MODIF_DATE,
			:GEDPARAM_ID,
			:GEDPARAM_CLASS,
			:GEDPARAM_PROTECTION,
			:GEDPARAM_MODIF_DATE,
			:GEDPARAM_OWNER_ID,
			:GEDPARAM_LIBRARY_ID
            
    DO
        SUSPEND;
        
	IF (ROW_COUNT = 0) THEN EXCEPTION EX_NOGEDPARAMPROF;
END ^

ALTER PROCEDURE GET_GEDPARAMS (I_TGEDPARAM_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAM_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAM_CLASS VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDPARAM_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAM_CLASS INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
GEDPARAM_DEFAULTVALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
LIBRARY_ID INTEGER,
FBSERVER_ID INTEGER,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
	Renvoie tous les paramètres de la table TGEDPARAM

	Aucune erreur n'est levée (pas de critère), mais le resultset est vide si aucun paramètre n'existe on ne répond aux éventuels critères OWNER_ID/LIB_ID
	
	Les démarches suivantes sont appliquées :
	- Si OWNER_ID et LIB_ID ne sont pas fournis, on renvoie tous les paramètres NON affectés à un OWNER et/ou une LIB (ie les paramètres globaux)
	- Si un OWNER_ID est fourni, on renvoie tous les paramètres de ce OWNER (pas les globaux, ni ceux affectés aux libraries)
	- Si un LIB_ID est fourni, on renvoi tous les paramètres associés à cette LIB seulement (et aucun autre)
	
	MAJ V40 :
	On applique les règles de systématisation de valeurs NULL, donc les règles énnoncées ci-dessus sont obsolètes :
	- Si OWNER_ID et/ou LIB_ID sont fournis à 0 : on ne tient pas compte de ces paramètres en critères
	- S'ils sont fournis à TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL : on recherche spécifiquement les paramètres non affectés (ie. OWNER_ID IS NULL et/ou LIB_ID IS NULL)
      Donc soit un GEDPARAM du dico standard (les 2 à TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL), soit un GEDPARAM dico sous-domaine (OWNER_ID <> 0 et LIB_ID = TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL)
      soit un GEDPARAM dico bibliothèque (OWNER_ID <> 0 et LIB_ID <> 0)

MAJ V11 : Ajout SYSTEM

V20 :
    - SYSTEM ==> PROTECTION

V21 :
	- ajout TGEDDPARAM.CLASS
	
V38 :
    - ajout filtre entrée I_TGEDPARAM_CLASS
    
V40 :
	- Ajout d'infos GEDPARAM en sortie
    - Systématisation des paramètres représentant NULL en entrée (utilisation de TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL)    
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_CLASS VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_PARAM VARCHAR(8000);

DECLARE VARIABLE NULL_PARAM INTEGER;

BEGIN   

    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    I_TGEDPARAM_CLASS=TRIM(I_TGEDPARAM_CLASS);

    SQL_WHERE_OWNER= '';
    SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
	SQL_WHERE_CLASS = '';

    -- Dummy pour simplifaction des concaténation de filtre...
    SQL_WHERE_PARAM='1=1';

	-- Récupération du DOM_PARAM représentant la recherche de valeur NULL
	NULL_PARAM=COALESCE((SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('DOMAIN','PARAM_EQUIV_NULL')),-9);


    IF (I_TGEDPARAM_TOWNER_ID = NULL_PARAM) THEN
        SQL_WHERE_PARAM = :SQL_WHERE_PARAM || ' AND TGEDPARAM.TOWNER_ID IS NULL';
    ELSE
    BEGIN
        IF (I_TGEDPARAM_TOWNER_ID!=0) THEN
        BEGIN
            IF (I_TOWNER_STATE = '' ) THEN
                /* Etat de visibilité par défaut */
                SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
            ELSE 
                /* Etat de visibilité demandé */
                SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER;
                
            -- Ajout du STATE pour gestion LEFT JOIN            
            SQL_WHERE_OWNER=IIF(SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ' OR TOWNER.STATE IS NULL)', '');
                    
            -- Ajout des critères OWNER_ID - Si OWNER ID est passé, on ne renvoie QUE les paramètres de ce OWNER (mais pas ceux affectés aux LIBRARIES)
            SQL_WHERE_PARAM= :SQL_WHERE_PARAM ||' AND TGEDPARAM.TOWNER_ID=' || :I_TGEDPARAM_TOWNER_ID || :SQL_WHERE_OWNER;
        END
    END
    

    IF (I_TGEDPARAM_TLIBRARY_ID= NULL_PARAM) THEN
        SQL_WHERE_PARAM = :SQL_WHERE_PARAM || ' AND TGEDPARAM.TLIBRARY_ID IS NULL';
    ELSE
    BEGIN    
        IF (I_TGEDPARAM_TLIBRARY_ID!=0) THEN
        BEGIN
            IF (I_TLIBRARY_STATE = '') THEN
                /* Etat de visibilité par défaut */
                SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
            ELSE 
                /* Etat de visibilité demandé */
                SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB;

            -- Ajout du STATE pour gestion LEFT JOIN
            SQL_WHERE_LIB=IIF(SQL_WHERE_LIB!='', ' AND (' || SQL_WHERE_LIB || ' OR TLIBRARY.STATE IS NULL)','');

           /* Serveur Firebird (si non Null) utilisable outrepassable...*/
            IF (:I_TFBSERVER_STATE = '' ) THEN
                /* Etat de visibilité par défaut */
                SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
            ELSE 
                /* Etat de visibilité demandé */
                SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

            -- Ajout du STATE pour gestion LEFT JOIN
            SQL_WHERE_FBSERVER=IIF(SQL_WHERE_FBSERVER!='', ' AND (' || SQL_WHERE_FBSERVER || ' OR TFBSERVER.STATE IS NULL)','');
                
            -- Ajout des critères LIBRARY_ID - Si LIBRARY ID est passé, on ne renvoie QUE les paramètres de cette LIBRARY
            SQL_WHERE_PARAM = SQL_WHERE_PARAM || ' AND TGEDPARAM.TLIBRARY_ID=' || :I_TGEDPARAM_TLIBRARY_ID || :SQL_WHERE_LIB || :SQL_WHERE_FBSERVER;
        END
    END
    
    -- Dernier filtre sur class
    IF (I_TGEDPARAM_CLASS!='') THEN
    BEGIN
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDPARAM_CLASS,'TGEDPARAM.CLASS') INTO :SQL_WHERE_CLASS;
        SQL_WHERE_PARAM = :SQL_WHERE_PARAM || IIF(:SQL_WHERE_CLASS != '', ' AND ' || :SQL_WHERE_CLASS, '');
    END
        
            
	FOR 
        EXECUTE STATEMENT '
            SELECT 
                TGEDPARAM.ID,
                TGEDPARAM.SECTION,
                COALESCE(TGEDPARAM.NAME,''''),
                TGEDPARAM."TYPE",
				TGEDPARAM."CLASS",
                COALESCE(TGEDPARAM.DEFAULTVALUE,''''),
                IIF(TGEDPARAM.DEFAULTVALUEBLB IS NULL,0,1),
                COALESCE(TGEDPARAM."COMMENT",''''),
				TGEDPARAM.PROTECTION,
                (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)),
                COALESCE(TGEDPARAM.TOWNER_ID,0),
                COALESCE(TGEDPARAM.TLIBRARY_ID,0),
                COALESCE(TLIBRARY.TFBSERVER_ID,0),
                COALESCE(TOWNER.STATE,0),
                COALESCE(TLIBRARY.STATE,0),
                COALESCE(TFBSERVER.STATE,0)
            FROM TGEDPARAM
                LEFT JOIN TOWNER ON TGEDPARAM.TOWNER_ID=TOWNER.ID
                LEFT JOIN TLIBRARY ON TGEDPARAM.TLIBRARY_ID=TLIBRARY.ID
                    LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
            WHERE ' || :SQL_WHERE_PARAM ||
            '
            ORDER BY TGEDPARAM.SECTION, TGEDPARAM.NAME
            '
        INTO
            :GEDPARAM_ID,
            :GEDPARAM_SECTION,
            :GEDPARAM_NAME,
            :GEDPARAM_TYPE,
			:GEDPARAM_CLASS,
            :GEDPARAM_DEFAULTVALUE,
            :GEDPARAM_DEFAULTVALUEBLB_FILLED,
            :GEDPARAM_COMMENT,
			:GEDPARAM_PROTECTION,
			:GEDPARAM_MODIF_DATE,
            :OWNER_ID,
            :LIBRARY_ID,
            :FBSERVER_ID,
            :OWNER_STATE,
            :LIBRARY_STATE,
            :FBSERVER_STATE

	DO
		SUSPEND;
                
END ^

ALTER PROCEDURE GET_GEDPARAMUSER (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
LIBRARY_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMUSER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMUSER_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
GEDUSER_STATE STATE,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
	Renvoie le détail d'un paramètre pour un Utilisateur GED, une section et une LIBRARY donnée

MAJ V11 :
    - Ajout MODIF_DATE

V22 :
    - GEDPARAMUSER_VALUEBLB est remplacé par GEDPARAMUSER_VALUEBLB_FILLED (boolean)
    
V40 :
    - Factorisation GEDPARAM
    - Ajout d'infos GEDPARAM en sortie

*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);

DECLARE VARIABLE REC_FOUND INTEGER;

DECLARE VARIABLE ID_OK Integer;    

BEGIN


    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
	I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);

	ID_OK = Null;

    SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
    SQL_WHERE_GEDUSER = '';

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    -- Utilisateur existant et modifiable...
    IF (I_TGEDUSER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER; 

    EXECUTE STATEMENT '
        SELECT TGEDUSER.ID FROM TGEDUSER INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
        WHERE TGEDUSER.ID=' || :I_TGEDUSER_ID ||
            IIF (:SQL_WHERE_GEDUSER != '' ,' AND ' || :SQL_WHERE_GEDUSER, '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK;
        
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDUSER;

    IF (I_TLIBRARY_ID != 0) THEN
    BEGIN
        ID_OK=Null;
        
       /* Serveur Firebird (si non Null) utilisable outrepassable...*/
        IF (:I_TFBSERVER_STATE = '' ) THEN
            /* Etat de visibilité par défaut */
            SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
        ELSE 
            /* Etat de visibilité demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;

        -- Library existante et modifiable...
        IF (:I_TLIBRARY_STATE ='' ) THEN
            /* Etat de visibilité par défaut */
            SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
        ELSE 
            /* Etat de visibilité demandé */
             SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 


        /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
        EXECUTE STATEMENT '
            SELECT TLIBRARY.ID
            FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
                LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
            WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID ||
                IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
                IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
                IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
            INTO :ID_OK;
                
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;
        
        -- Réinit WHERE LIB pour la requête suivante
        SQL_WHERE_LIB=IIF (:SQL_WHERE_LIB != '', :SQL_WHERE_LIB || ' AND ','') || 'TGEDPARAMUSER.TLIBRARY_ID=' || I_TLIBRARY_ID;
    END
    ELSE
    BEGIN
        -- Dans ce cas, on ne renvoi que les paramètres NON associés à une LIBRARY
        SQL_WHERE_LIB='TGEDPARAMUSER.TLIBRARY_ID IS NULL';
    END
    
    -- V40 V2 : on travaille sur GEDPARAM_ID
--    -- Ajout du critère sur la section
--    I_TGEDPARAM_SECTION=TRIM(I_TGEDPARAM_SECTION);
--    -- Ajout du critère NAME
--    I_TGEDPARAM_NAME=TRIM(I_TGEDPARAM_NAME);

	FOR
        EXECUTE STATEMENT
            'SELECT
                TGEDPARAMUSER.TGEDUSER_ID,
                COALESCE(TGEDPARAMUSER.TLIBRARY_ID,0),
                TGEDPARAM.SECTION,
                TGEDPARAM.NAME,
                TGEDPARAM."TYPE",
                COALESCE(TGEDPARAMUSER."VALUE",''''),
                IIF(TGEDPARAMUSER.VALUEBLB IS NULL,0,1),
                COALESCE(TGEDPARAM."COMMENT",''''),
                (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMUSER.MODIF_DATE)),
                TGEDUSER.TOWNER_ID,
                COALESCE(TLIBRARY.TFBSERVER_ID,0),
                TGEDPARAM.ID,
                TGEDPARAM.CLASS,
                TGEDPARAM.PROTECTION,
                (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)),
				COALESCE(TGEDPARAM.TOWNER_ID,0),
				COALESCE(TGEDPARAM.TLIBRARY_ID,0),
				COALESCE(TGEDPARAM.DEFAULTVALUE,''''),
                TGEDUSER.STATE,
                TOWNER.STATE,
                COALESCE(TLIBRARY.STATE,0),
                COALESCE(TFBSERVER.STATE,0)
            FROM TGEDPARAMUSER
                INNER JOIN TGEDPARAM ON TGEDPARAMUSER.TGEDPARAM_ID = TGEDPARAM.ID
                INNER JOIN TGEDUSER ON TGEDPARAMUSER.TGEDUSER_ID=TGEDUSER.ID
                    INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
                LEFT JOIN TLIBRARY ON TGEDPARAMUSER.TLIBRARY_ID=TLIBRARY.ID
                    LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
            WHERE TGEDPARAMUSER.TGEDUSER_ID=' || :I_TGEDUSER_ID || 
                ' AND ' || :SQL_WHERE_LIB  ||
				-- V40 V2
--                 ' AND TGEDPARAM.SECTION=''' || :I_TGEDPARAM_SECTION || '''' ||
--                 ' AND TGEDPARAM.NAME=''' || :I_TGEDPARAM_NAME || '''' ||
				' AND TGEDPARAMUSER.TGEDPARAM_ID=' || : I_TGEDPARAM_ID || 
                IIF (:SQL_WHERE_OWNER != '' , ' AND ' || :SQL_WHERE_OWNER , '')
		INTO
			:GEDUSER_ID,
			:LIBRARY_ID,
			:GEDPARAM_SECTION,
			:GEDPARAM_NAME,
			:GEDPARAM_TYPE,
			:GEDPARAMUSER_VALUE,
			:GEDPARAMUSER_VALUEBLB_FILLED,
			:GEDPARAM_COMMENT,
			:GEDPARAMUSER_MODIF_DATE,
			:OWNER_ID,
			:FBSERVER_ID,
			:GEDPARAM_ID,
			:GEDPARAM_CLASS,
			:GEDPARAM_PROTECTION,
			:GEDPARAM_MODIF_DATE,
			:GEDPARAM_OWNER_ID,
			:GEDPARAM_LIBRARY_ID,
			:GEDPARAM_DEFAULTVALUE,
			:GEDUSER_STATE,
			:OWNER_STATE,
			:LIBRARY_STATE,
			:FBSERVER_STATE
	DO
	BEGIN
        REC_FOUND=:REC_FOUND+1;
		SUSPEND;
    END

    IF (REC_FOUND=0) THEN EXCEPTION EX_NOGEDPARAMUSER;
END ^

ALTER PROCEDURE GET_GEDPARAMUSERS_FOR_USER (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
LIBRARY_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMUSER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMUSER_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
GEDUSER_STATE STATE,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
	Renvoie la liste de tous les paramètres pour un Utilisateur GED
	
	Particularités :
	- Pour des raisons de performances NAS, GEDPARAMUSER_VALUEBLB_FILLED ne renvoie pas la valeur du BLOB
	mais indique si VALUEBLB est utilisé (NOT NULL) ou NON
	- Le paramètre SECTION permet de filtrer le résultat par rapport à une seule section dans TGEDPARAMUSER pour le PROFILE_ID donné (ie. pas tous les paramètres du profil)
	- Si le paramètre I_TLIBRARY_ID est <> 0 on ne renvoie QUE les paramètres pour cette LIBRARY
	- Dans le cas contraire (I_TLIBRARY_ID est = 0 ), on ne renvoie QUE les paramètres non associés à une LIBRARY...
	On utilisera la PS GET_GEDPARAMUSER pour obtenir la valeur de ce blob, le cas échéant...
	
V40 :
    - Factorisation GEDPARAM
    - Ajout d'infos GEDPARAM en sortie
	
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_SECTION VARCHAR(8000);

DECLARE VARIABLE ID_OK Integer;    

BEGIN


    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
	I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);

	ID_OK = Null;

    SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
    SQL_WHERE_GEDUSER = '';
    SQL_WHERE_SECTION = '';

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    -- Utilisateur existant et modifiable...
    IF (I_TGEDUSER_STATE = '' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER; 

    EXECUTE STATEMENT '
        SELECT TGEDUSER.ID FROM TGEDUSER INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
        WHERE TGEDUSER.ID=' || :I_TGEDUSER_ID ||
            IIF (:SQL_WHERE_GEDUSER != '' ,' AND ' || :SQL_WHERE_GEDUSER, '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK;
        
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDUSER;

    IF (I_TLIBRARY_ID != 0) THEN
    BEGIN
        ID_OK=Null;
        
       /* Serveur Firebird (si non Null) utilisable outrepassable...*/
        IF (:I_TFBSERVER_STATE = '' ) THEN
            /* Etat de visibilité par défaut */
            SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
        ELSE 
            /* Etat de visibilité demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;

        -- Library existante et modifiable...
        IF (:I_TLIBRARY_STATE ='' ) THEN
            /* Etat de modification par défaut */
            SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
        ELSE 
            /* Etat de modification demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 


        /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
        EXECUTE STATEMENT '
            SELECT TLIBRARY.ID
            FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
                LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
            WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID ||
                IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
                IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
                IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
            INTO :ID_OK;
                
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;
        
        -- Réinit WHERE LIB pour la requête suivante
        SQL_WHERE_LIB=IIF (:SQL_WHERE_LIB != '', :SQL_WHERE_LIB || ' AND ','') || 'TGEDPARAMUSER.TLIBRARY_ID=' || I_TLIBRARY_ID;
    END
    ELSE
        -- Dans ce cas, on ne renvoi aue les paramètres NON associés à une LIBRARY
        SQL_WHERE_LIB='TGEDPARAMUSER.TLIBRARY_ID IS NULL';
        
    
    -- Ajout du critère sur la section si le paramètre est passé
    I_TGEDPARAM_SECTION=TRIM(I_TGEDPARAM_SECTION);
    IF (I_TGEDPARAM_SECTION != '') THEN
        SQL_WHERE_SECTION='TGEDPARAM.SECTION=''' || :I_TGEDPARAM_SECTION || '''';

	FOR
        EXECUTE STATEMENT
            'SELECT
                TGEDPARAMUSER.TGEDUSER_ID,
                COALESCE(TGEDPARAMUSER.TLIBRARY_ID,0),
                TGEDPARAM.SECTION,
                TGEDPARAM.NAME,
                TGEDPARAM."TYPE",
                COALESCE(TGEDPARAMUSER."VALUE",''''),
                IIF(TGEDPARAMUSER.VALUEBLB IS NULL,0,1),
                COALESCE(TGEDPARAM."COMMENT",''''),
                (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMUSER.MODIF_DATE)),
                TGEDUSER.TOWNER_ID,
                COALESCE(TLIBRARY.TFBSERVER_ID,0),
                TGEDPARAM.ID,
                TGEDPARAM.CLASS,
                TGEDPARAM.PROTECTION,
                (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)),
				COALESCE(TGEDPARAM.TOWNER_ID,0),
				COALESCE(TGEDPARAM.TLIBRARY_ID,0),
				COALESCE(TGEDPARAM.DEFAULTVALUE,''''),
                TGEDUSER.STATE,
                TOWNER.STATE,
                COALESCE(TLIBRARY.STATE,0),
                COALESCE(TFBSERVER.STATE,0)
            FROM TGEDPARAMUSER INNER JOIN TGEDUSER ON TGEDPARAMUSER.TGEDUSER_ID=TGEDUSER.ID
                INNER JOIN TGEDPARAM ON TGEDPARAMUSER.TGEDPARAM_ID = TGEDPARAM.ID
                INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
                LEFT JOIN TLIBRARY ON TGEDPARAMUSER.TLIBRARY_ID=TLIBRARY.ID
                    LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
            WHERE TGEDPARAMUSER.TGEDUSER_ID=' || :I_TGEDUSER_ID || 
                IIF (:SQL_WHERE_LIB != '' , ' AND ' || :SQL_WHERE_LIB, '') ||
                IIF (:SQL_WHERE_SECTION != '' ,' AND ' || :SQL_WHERE_SECTION, '') || 
                IIF (:SQL_WHERE_OWNER != '' , ' AND ' || :SQL_WHERE_OWNER , '') ||
            '
            ORDER BY TGEDPARAM.SECTION,TGEDPARAM.NAME'
		INTO
			:GEDUSER_ID,
			:LIBRARY_ID,
			:GEDPARAM_SECTION,
			:GEDPARAM_NAME,
			:GEDPARAM_TYPE,
			:GEDPARAMUSER_VALUE,
			:GEDPARAMUSER_VALUEBLB_FILLED,
			:GEDPARAM_COMMENT,
			:GEDPARAMUSER_MODIF_DATE,
			:OWNER_ID,
			:FBSERVER_ID,
			:GEDPARAM_ID,
			:GEDPARAM_CLASS,
			:GEDPARAM_PROTECTION,
			:GEDPARAM_MODIF_DATE,
			:GEDPARAM_OWNER_ID,
			:GEDPARAM_LIBRARY_ID,
			:GEDPARAM_DEFAULTVALUE,
			:GEDUSER_STATE,
			:OWNER_STATE,
			:LIBRARY_STATE,
			:FBSERVER_STATE
	DO
		SUSPEND;

END ^

ALTER PROCEDURE GET_GEDPARAMUSER_VALUEBLB (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0)
RETURNS (GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMUSER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMUSER_VALUEBLB BLOB,
GEDPARAMUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER)
AS 
/*
	Retourne une valeur BLOB pour un paramètre GED d'un utilisateur
	Les STATES ne sont PAS  évalués
	Le paramètre concerné doit exister préalablement à l'appel de cette PS

V22 :
    - Création
    
V40 :
    - Factorisation GEDPARAM
    - Ajout d'infos GEDPARAM en sortie

*/
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE REC_FOUND INTEGER;
BEGIN
	SQL_WHERE_LIB = '';
	REC_FOUND=0;

    IF (I_TLIBRARY_ID = 0) THEN
        SQL_WHERE_LIB='TGEDPARAMUSER.TLIBRARY_ID IS NULL';
    ELSE
        SQL_WHERE_LIB='TGEDPARAMUSER.TLIBRARY_ID=' || :I_TLIBRARY_ID;
    

    FOR EXECUTE STATEMENT
        'SELECT 
            TGEDPARAM."TYPE",
            COALESCE(TGEDPARAMUSER."VALUE",''''),
            COALESCE(TGEDPARAMUSER.VALUEBLB,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMUSER.MODIF_DATE)),
			TGEDPARAM.ID,
			TGEDPARAM.CLASS,
			TGEDPARAM.PROTECTION,
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)),
			COALESCE(TGEDPARAM.TOWNER_ID,0),
			COALESCE(TGEDPARAM.TLIBRARY_ID,0)
            
        FROM TGEDPARAMUSER
            INNER JOIN TGEDPARAM ON TGEDPARAMUSER.TGEDPARAM_ID = TGEDPARAM.ID            

        WHERE TGEDPARAMUSER.TGEDUSER_ID=' || :I_TGEDUSER_ID 
            || ' AND ' || :SQL_WHERE_LIB 
			-- V40 V2
--             || ' AND TGEDPARAM."SECTION"=''' || :I_TGEDPARAM_SECTION || ''''
--             || ' AND TGEDPARAM."NAME"=''' || :I_TGEDPARAM_NAME || ''''
			|| ' AND TGEDPARAMUSER.TGEDPARAM_ID=' || : I_TGEDPARAM_ID
        INTO 
            :GEDPARAM_TYPE,
            :GEDPARAMUSER_VALUE,
            :GEDPARAMUSER_VALUEBLB,
            :GEDPARAMUSER_MODIF_DATE,
			:GEDPARAM_ID,
			:GEDPARAM_CLASS,
			:GEDPARAM_PROTECTION,
			:GEDPARAM_MODIF_DATE,
			:GEDPARAM_OWNER_ID,
			:GEDPARAM_LIBRARY_ID
    DO
    BEGIN
        REC_FOUND=:REC_FOUND+1;
		SUSPEND;
    END

    IF (REC_FOUND=0) THEN EXCEPTION EX_NOGEDPARAMUSER;
                    
END ^

ALTER PROCEDURE GET_GEDPARAM_DEFAULTVALUEBLB (I_TGEDPARAM_ID INTEGER NOT NULL)
RETURNS (GEDPARAM_TYPE TYPE_PARAM,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
GEDPARAM_DEFAULTVALUEBLB BLOB,
OWNER_ID INTEGER)
AS 
/*
	Retourne une valeur BLOB pour un paramètre GED
	Les STATES ne sont PAS  évalués
	Le paramètre concerné doit exister préalablement à l'appel de cette PS

V22 :
    - Création
*/
BEGIN
    FOR
        SELECT
            TGEDPARAM."TYPE",
            COALESCE(TGEDPARAM.DEFAULTVALUE,''''),
            COALESCE(TGEDPARAM.DEFAULTVALUEBLB,''),
            COALESCE(TGEDPARAM.TOWNER_ID,0)
        FROM TGEDPARAM
        WHERE
            TGEDPARAM.ID=:I_TGEDPARAM_ID
            INTO :GEDPARAM_TYPE, :GEDPARAM_DEFAULTVALUE, :GEDPARAM_DEFAULTVALUEBLB, :OWNER_ID
    DO
        SUSPEND;
        
	IF (ROW_COUNT = 0) THEN
		EXCEPTION EX_NOGEDPARAM;
            
END ^

ALTER PROCEDURE GET_GEDPARAM_FOR_NAME (I_TGEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TGEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDPARAM_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAM_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDPARAM_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAM_CLASS INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
GEDPARAM_DEFAULTVALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
LIBRARY_ID INTEGER,
FBSERVER_ID INTEGER,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
	Renvoie les informations détaillées d"'un paramètre GED par rapport à un nom ET une section
	La SECTION ne peut pas être NULL (un NAME NULL ne peut apparaitre qu'une seule fois par section...)
	
    V40 (précision)
	Cette PS est censé ne renvoyer qu'un seul élément, il s'agit donc de l'appeler de la manière la plus précise possible
	On ajoute donc des possibilités de filtrage plus fines :
		- Si I_TGEDPARAM_TOWNER_ID = TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL : On recherche les paramètres qui sont spécifiquement non affectés (dico standard)
		- Si I_TGEDPARAM_TOWNER_ID = 0 : interdit car cela pourrait alors techniquement renvoyer des doublons, même si des règles de gestion interdisent d'ajouter un GEDPARAM OWNER/LIB
            avec les mêmes SECTION/NAME que les paramètres standard, cela reste possible par un INSERT/UPDATE manuel, ie. hors PS SET_GEDPARAM...
        - Si I_TGEDPARAM_TOWNER_ID > 0 : on recherche un paramètre spécifique à un OWNER
        - Mêmes principes pour TLIBRARY_ID
        


	Une erreur est levée si le paramètre n'existe pas...

MAJ V11 : Ajout SYSTEM

V20 :
    - SYSTEM ==> PROTECTION

V21 :
	- ajout TGEDDPARAM.CLASS

V22 :
    - GEDPARAM_DEFAULTVALUEBLB est remplacé par GEDPARAM_DEFAULTVALUEBLB_FILLED (boolean)
    
V40 :
	- Ajout d'infos GEDPARAM en sortie
    - Systématisation des paramètres représentant NULL en entrée (utilisation de TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL)

    

*/
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE REC_FOUND INTEGER;

DECLARE VARIABLE NULL_PARAM INTEGER;


BEGIN
    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

    SQL_WHERE_OWNER= '';
    SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';

    REC_FOUND=0;
    
    -- V 40 : on rend OWNER/LIB obligatoire en entrée : Soit un ID <>0, soit TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL
    IF (I_TGEDPARAM_TOWNER_ID = 0 OR I_TGEDPARAM_TLIBRARY_ID = 0 ) THEN
        EXCEPTION EX_BAD_PARAM;

	-- Récupération du DOM_PARAM représentant la recherche de valeur NULL
	NULL_PARAM=COALESCE((SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('DOMAIN','PARAM_EQUIV_NULL')),-9);

    IF (I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER;
        
    -- Ajout du STATE pour gestion LEFT JOIN
    SQL_WHERE_OWNER=IIF(SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ' OR TOWNER.STATE IS NULL)', '');
        
    -- On ajoute le critère sur TGEDPARAM.TOWNER_ID
    IF (I_TGEDPARAM_TOWNER_ID = NULL_PARAM) THEN
        SQL_WHERE_OWNER=:SQL_WHERE_OWNER || ' AND TGEDPARAM.TOWNER_ID IS NULL';
    ELSE
        SQL_WHERE_OWNER=:SQL_WHERE_OWNER || ' AND TGEDPARAM.TOWNER_ID = ' || :I_TGEDPARAM_TOWNER_ID;

    IF (I_TLIBRARY_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
        
    -- Ajout du STATE pour gestion LEFT JOIN
    SQL_WHERE_LIB=IIF(SQL_WHERE_LIB!='', ' AND (' || SQL_WHERE_LIB || ' OR TLIBRARY.STATE IS NULL)','');
        
    -- On ajoute le critère sur TGEDPARAM.TLIBRARY_ID
    IF (I_TGEDPARAM_TLIBRARY_ID = NULL_PARAM) THEN
        SQL_WHERE_LIB=:SQL_WHERE_LIB || ' AND TGEDPARAM.TLIBRARY_ID IS NULL';
    ELSE
        SQL_WHERE_LIB=:SQL_WHERE_LIB || ' AND TGEDPARAM.TLIBRARY_ID = ' || :I_TGEDPARAM_TLIBRARY_ID;

   /* Serveur Firebird (si non Null) utilisable outrepassable...*/
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;

    -- Ajout du STATE pour gestion LEFT JOIN
    SQL_WHERE_FBSERVER=IIF(SQL_WHERE_FBSERVER!='', ' AND (' || SQL_WHERE_FBSERVER || ' OR TFBSERVER.STATE IS NULL)','');

/*
-- DEBUG
GEDPARAM_COMMENT=:SQL_WHERE_OWNER;
GEDPARAM_COMMENT= GEDPARAM_COMMENT || :SQL_WHERE_LIB;
GEDPARAM_COMMENT= GEDPARAM_COMMENT || :SQL_WHERE_FBSERVER;
SUSPEND;
EXIT;
*/

    I_TGEDPARAM_SECTION=TRIM(I_TGEDPARAM_SECTION);
    I_TGEDPARAM_NAME=TRIM(I_TGEDPARAM_NAME);
    
    -- Init du OWNER par défaut de la lib
    IF (I_TGEDPARAM_TLIBRARY_ID!=0 AND I_TGEDPARAM_TOWNER_ID=0) THEN
        SELECT TOWNER_ID FROM TLIBRARY WHERE ID=:I_TGEDPARAM_TLIBRARY_ID INTO I_TGEDPARAM_TOWNER_ID;

	FOR
        EXECUTE STATEMENT 
            'SELECT
                TGEDPARAM.ID,
                TGEDPARAM.SECTION,
                COALESCE(TGEDPARAM.NAME,''''),
                TGEDPARAM."TYPE",
				TGEDPARAM."CLASS",
                COALESCE(TGEDPARAM.DEFAULTVALUE,''''),
                IIF(TGEDPARAM.DEFAULTVALUEBLB IS NULL,0,1),
                COALESCE(TGEDPARAM."COMMENT",''''),
				TGEDPARAM.PROTECTION,
                (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)),
                COALESCE(TGEDPARAM.TOWNER_ID, 0),
                COALESCE(TGEDPARAM.TLIBRARY_ID,0),
                COALESCE(TFBSERVER.ID,0),
                COALESCE(TOWNER.STATE,0),
                COALESCE(TLIBRARY.STATE,0),
                COALESCE(TFBSERVER.STATE,0)
            FROM TGEDPARAM 
                LEFT JOIN TOWNER ON TGEDPARAM.TOWNER_ID=TOWNER.ID
                LEFT JOIN TLIBRARY ON TGEDPARAM.TLIBRARY_ID=TLIBRARY.ID
                    LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TGEDPARAM.SECTION =''' || :I_TGEDPARAM_SECTION  || ''' AND COALESCE(TGEDPARAM.NAME,'''')=''' || :I_TGEDPARAM_NAME || '''' ||
            IIF (:SQL_WHERE_OWNER != '', :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_LIB != '' , :SQL_WHERE_LIB, '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , :SQL_WHERE_FBSERVER, '')
                
        INTO
            :GEDPARAM_ID,
            :GEDPARAM_SECTION,
            :GEDPARAM_NAME,
            :GEDPARAM_TYPE,
			:GEDPARAM_CLASS,
            :GEDPARAM_DEFAULTVALUE,
            :GEDPARAM_DEFAULTVALUEBLB_FILLED,
            :GEDPARAM_COMMENT,
			:GEDPARAM_PROTECTION,
			:GEDPARAM_MODIF_DATE,
            :OWNER_ID,
            :LIBRARY_ID,
            :FBSERVER_ID,
            :OWNER_STATE,
            :LIBRARY_STATE,
            :FBSERVER_STATE
	DO
    BEGIN
		SUSPEND;
        REC_FOUND=:REC_FOUND+1;
    END


    IF (REC_FOUND=0) THEN EXCEPTION EX_NOGEDPARAM;
END ^

ALTER PROCEDURE GET_GEDPARAM_SECTION_OWNER_OK (SECTION VARCHAR(40) CHARACTER SET UTF8)
RETURNS (OK BOOLEAN)
AS 
/*
    Recherche d'une section autorisée en ajout pour un GEDPARAM de sous-domaine ou bibliothèque
    On récupère le DOMPARAM DOMAIN/GEDPARAM_SECTIONS_OWNER_CREATE pour connaitre ces sections (liste de nom de section séparé par DOMPARAM DOMAIN/MDF_FIELD_SEP)
    Si ce paramètre n'existe pas ou est vide, on renvoie toujours false (ie. aucune section autorisée)
    Si la passée section existe dans cette liste, on renvoie 1, sinon 0
    
V40 :
    Création
*/

BEGIN

    -- Récupération de la liste des sections autorisées
    IF (:SECTION IN (SELECT RESULTS FROM SPLIT_BLOB('SELECT TRIM(DOMPARAM_VALUEBLB) FROM GET_DOMPARAM_VALUEBLB(''DOMAIN'',''GEDPARAM_SECTIONS_OWNER_CREATE'')'))) THEN
        OK=1;
    ELSE
        OK=0;
    SUSPEND;
END ^

ALTER PROCEDURE GET_GEDUSERS_COUNT_FOR_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
LIBRARY_GEDUSERS_COUNT INTEGER)
AS 
/*
	Nombre de geduser "total" (en fonction des STATES) associés à une LIBRARY donnée

V34
    - Création
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER_COUNT VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;

BEGIN

    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

	SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
	SQL_WHERE_GEDUSER_COUNT = '';
	ID_OK= Null;
	
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 
        
    /* Serveur Firebird (si non Null) utilisable outrepassable...*/
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

   -- Library existante et modifiable...
    IF (:I_TLIBRARY_STATE ='' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 
    

    EXECUTE STATEMENT '
        SELECT TLIBRARY.ID FROM
        TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
            LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID || 
        IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
        IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
        IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '')
        INTO ID_OK;
        
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;

    IF (I_TGEDUSER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER_COUNT;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER_COUNT;

    EXECUTE STATEMENT 
        'SELECT TGEDUSERLIB.TLIBRARY_ID, COUNT(TGEDUSERLIB.TGEDUSER_ID)
        FROM TGEDUSERLIB INNER JOIN TGEDUSER ON TGEDUSERLIB.TGEDUSER_ID=TGEDUSER.ID
        WHERE TGEDUSERLIB.TLIBRARY_ID=' || :I_TLIBRARY_ID
        || IIF (:SQL_WHERE_GEDUSER_COUNT != '' , ' AND (' || :SQL_WHERE_GEDUSER_COUNT || ')', '') || '
        GROUP BY TGEDUSERLIB.TLIBRARY_ID'
    INTO
        :LIBRARY_ID,
        :LIBRARY_GEDUSERS_COUNT;

    SUSPEND;
END ^

ALTER PROCEDURE GET_GEDUSERS_COUNT_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDGROUP_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_COUNT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDGROUP_ID INTEGER,
GEDUSERS_COUNT INTEGER)
AS 
/*
	Nombre de geduser "total" (en fonction des STATES) d'un OWNER/GROUP donné

	Si I_TGEDGROUP_ID = TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL, on renvoie le nombre de GEDUSERS NON associée à un groupe
	Si I_TGEDGROUP_ID = 0, on renvoie le nombre de GEDUSERS du OWNER
	Si I_TGEDGROUP_ID > 0, on renvoie le nombre de GEDUSERS du groupe ciblé

V34
    - Création
    
V40 :
    - Systématisation des paramètres représentant NULL en entrée (utilisation de TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL)
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER_COUNT VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GROUP VARCHAR(8000);

DECLARE VARIABLE ID_OK Integer;

DECLARE VARIABLE NULL_PARAM INTEGER;


BEGIN

    I_TGEDUSER_COUNT_STATE=TRIM(I_TGEDUSER_COUNT_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);

	SQL_WHERE_OWNER = '';
	SQL_WHERE_GEDUSER_COUNT = '';
	SQL_WHERE_GROUP = '';
	ID_OK= Null;
	
	-- Récupération du DOM_PARAM représentant la recherche de valeur NULL
	NULL_PARAM=COALESCE((SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('DOMAIN','PARAM_EQUIV_NULL')),-9);
	
    -- Au moins 1 de ces paramètres doit-être passé
	IF (:I_TOWNER_ID=0 AND (:I_TGEDGROUP_ID=0 OR :I_TGEDGROUP_ID=NULL_PARAM)) THEN EXCEPTION EX_BAD_PARAM;
	
    IF (:I_TOWNER_STATE = '' ) THEN
            /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER;

    IF (:I_TOWNER_ID!=0) THEN
    BEGIN
        EXECUTE STATEMENT '
            SELECT ID FROM TOWNER
            WHERE ID=' || :I_TOWNER_ID || IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
        INTO ID_OK;
            
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;
    END
    
    IF (:I_TGEDGROUP_ID=NULL_PARAM) THEN
            SQL_WHERE_GROUP='NOT EXISTS (SELECT TGEDUSER_ID FROM TGEDGROUPUSER WHERE TGEDGROUPUSER.TGEDUSER_ID=TGEDUSER.ID)';
    ELSE
    BEGIN
        IF (:I_TGEDGROUP_ID != 0) THEN
        BEGIN
            ID_OK= Null;
            EXECUTE STATEMENT '
                SELECT TGEDGROUP.ID FROM TGEDGROUP INNER JOIN TOWNER ON TGEDGROUP.TOWNER_ID=TOWNER.ID
                WHERE TGEDGROUP.ID=' || :I_TGEDGROUP_ID || IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
            INTO ID_OK;
            
            IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDGROUP;
            
            SQL_WHERE_GROUP='TGEDGROUPUSER.TGEDGROUP_ID=' || :I_TGEDGROUP_ID;
        END
    END

    IF (:I_TOWNER_ID!=0) THEN 
        SQL_WHERE_OWNER='TGEDUSER.TOWNER_ID=' || :I_TOWNER_ID;
    ELSE
        SQL_WHERE_OWNER='';

    IF (I_TGEDUSER_COUNT_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER_COUNT;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_COUNT_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER_COUNT;

    EXECUTE STATEMENT 
        'SELECT TGEDUSER.TOWNER_ID, ' ||
        :I_TGEDGROUP_ID || ',
        COALESCE(COUNT(TGEDUSER.ID),0)
        FROM TGEDUSER ' ||
        IIF (:I_TGEDGROUP_ID != 0 AND I_TGEDGROUP_ID!=NULL_PARAM,'INNER JOIN TGEDGROUPUSER ON TGEDUSER.ID = TGEDGROUPUSER.TGEDUSER_ID','') || '
        WHERE 1=1 '
        || IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
        || IIF (:SQL_WHERE_GEDUSER_COUNT != '' , ' AND (' || :SQL_WHERE_GEDUSER_COUNT || ')', '')
        || IIF (:SQL_WHERE_GROUP != '' , ' AND (' || :SQL_WHERE_GROUP || ')', '') || '
        GROUP BY TGEDUSER.TOWNER_ID'
    INTO
        :OWNER_ID,
        :GEDGROUP_ID,
        :GEDUSERS_COUNT;
    
    -- Retour NULL de la requête, on init avec des valeurs exploitables...
    IF (:OWNER_ID IS NULL) THEN
    BEGIN
        OWNER_ID=I_TOWNER_ID;
        GEDGROUP_ID=I_TGEDGROUP_ID;
        GEDUSERS_COUNT=0;
    END

    SUSPEND;
END ^

ALTER PROCEDURE GET_GEDUSERS_FOR_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL,
I_TGEDUSER_LOGIN_FILTER VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_NAME_FILTER VARCHAR(150) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_FIRSTNAME_FILTER VARCHAR(150) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_MAX_ROWS INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
GEDUSER_ID INTEGER,
GEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
GEDUSER_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDUSER_CHARGEABLE BOOLEAN,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPES_INFOS BLOB CHARACTER SET UTF8,
PROFILE_ID INTEGER,
GEDUSER_GEDGROUP_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LIBRARY_STATE STATE,
GEDUSER_STATE STATE,
CONTACT_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
	Renvoie les Utilisateurs GED  liés à une bibliothèque dans la table TGEDUSERLIB
	
MAJ V22 :
    - Ajout informaitons détaillées GEDUSER + CONTACT pour améliorations performances NAS

MAJ V 24 :
    - CONTTYPES_INFOS renvoyé en tant que BLOB
    - ORDER BY TGEDUSER.LOGIN

MAJ V32 :
	- Ajout  GEDGROUP_ID
	- Ajout de TCONTACT.ORGANIZATION, etc...

MAJ V34
    - Ajout I_TGEDUSER_LOGIN_FILTER, I_TCONTACT_NAME_FILTER, I_TCONTACT_FIRSTNAME_FILTER, I_MAX_ROWS
    moins important car un grand nombre d'utilisateurs en accès directs à une lib ne devrait pas arriver (puisque c'est censé passer par un groupe...)
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    
BEGIN

    I_TGEDUSER_LOGIN_FILTER=TRIM(I_TGEDUSER_LOGIN_FILTER);
    I_TCONTACT_NAME_FILTER=TRIM(I_TCONTACT_NAME_FILTER);
    I_TCONTACT_FIRSTNAME_FILTER=TRIM(I_TCONTACT_FIRSTNAME_FILTER);
    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);

	SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
	SQL_WHERE_GEDUSER = '';
	ID_OK = Null;


    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
	/* Même OWNER pour TLIBRARY et TPROFILE */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

   /* Serveur Firebird (si non Null) utilisable outrepassable...*/
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

   -- Library existante et modifiable...
    IF (:I_TLIBRARY_STATE ='' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

    /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TLIBRARY.ID
		FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;

    -- Utilisateur GED 
    IF (I_TGEDUSER_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER; 

	/* Recherche des Utilisateurs */
	FOR EXECUTE STATEMENT '
		SELECT
			TGEDUSERLIB.TLIBRARY_ID,
			TGEDUSERLIB.TGEDUSER_ID,
			COALESCE(TGEDUSERLIB.TPROFILE_ID,0),
			TGEDUSER.TOWNER_ID,
			COALESCE(TFBSERVER.ID,0),
			TLIBRARY.STATE,
			TGEDUSER.STATE,
            TOWNER.STATE,
			COALESCE(TFBSERVER.STATE,0),
			
            -- Ajout V22
			TGEDUSER.LOGIN,
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDUSER.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDUSER.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDUSER.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDUSER.SUBSCRIBE_END)),
            COALESCE(TGEDUSER."COMMENT",''''),
            TGEDUSER.CHARGEABLE,
			COALESCE(TGEDUSER.TGEDGROUP_ID,0),
  
            COALESCE(TGEDUSER.TCONTACT_ID,0),
			COALESCE(TCONTACT.NAME,''''),
			COALESCE(TCONTACT.FIRSTNAME,''''),
			COALESCE(TCONTACT.PREFIX,''''),
			COALESCE(TCONTACT.EMAIL,''''),
			COALESCE(TCONTACT.TEL,''''),
			COALESCE(TCONTACT.ADDRESS,''''),
			COALESCE(TCONTACT.POSTCODE,''''),
			COALESCE(TCONTACT.REGION,''''),
			COALESCE(TCONTACT.CITY,''''),
			COALESCE(TCONTACT.COUNTRY,''''),

			COALESCE(TCONTACT.ORGANIZATION,''''),
			COALESCE(TCONTACT.SERVICE,''''),
			COALESCE(TCONTACT.IDENTIFIER,''''),
			COALESCE(TCONTACT.CELLTEL,''''),

            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.MODIF_DATE)),
			COALESCE(TCONTACT.STATE,0)
			
		FROM TGEDUSERLIB
            INNER JOIN TGEDUSER ON TGEDUSERLIB.TGEDUSER_ID=TGEDUSER.ID '
                    /*
                    Performance : le LEFT JOIN est très lent si un critère est posé sur TCONTACT.NAME ou TCONTACT.FIRSTNAME
                    Donc, on positionne un LEFT JOIN si aucun critère ou un INNER JOIN si un critère est passé
                    Fonctionnelement équivalent (si un critère est passé, dans notre contexte, on ne cherche pas un NULL)...
                    */
                    || IIF (:I_TCONTACT_NAME_FILTER != '' OR  :I_TCONTACT_FIRSTNAME_FILTER != '','INNER','LEFT') || ' JOIN TCONTACT ON TGEDUSER.TCONTACT_ID=TCONTACT.ID
            INNER JOIN TLIBRARY  ON TGEDUSERLIB.TLIBRARY_ID=TLIBRARY.ID
                LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
            INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
		WHERE
			TGEDUSERLIB.TLIBRARY_ID=' || :I_TLIBRARY_ID || 
            IIF (:I_TGEDUSER_LOGIN_FILTER != '' ,' AND TGEDUSER.LOGIN LIKE ''' || :I_TGEDUSER_LOGIN_FILTER || '''', '') ||
            IIF (:I_TCONTACT_NAME_FILTER != '' ,' AND TCONTACT.NAME LIKE ''' || :I_TCONTACT_NAME_FILTER || '''', '') ||
            IIF (:I_TCONTACT_FIRSTNAME_FILTER != '' ,' AND TCONTACT.FIRSTNAME LIKE ''' || :I_TCONTACT_FIRSTNAME_FILTER || '''', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_GEDUSER != '' ,' AND ' || :SQL_WHERE_GEDUSER, '') ||
        ' ORDER BY  ' ||
            IIF (:I_TCONTACT_NAME_FILTER != '' ,
                'TCONTACT.NAME, TCONTACT.FIRSTNAME',
                IIF(:I_TCONTACT_FIRSTNAME_FILTER != '',
                    'TCONTACT.FIRSTNAME, TCONTACT.NAME',
                    'TGEDUSER.LOGIN'
                )
             ) || ' ' ||
        IIF (:I_MAX_ROWS != 0 ,'ROWS 1 TO '|| :I_MAX_ROWS,'')
        
		INTO
			:LIBRARY_ID,
			:GEDUSER_ID,
			:PROFILE_ID,
			:OWNER_ID,
			:FBSERVER_ID,
			:LIBRARY_STATE,
			:GEDUSER_STATE,
			:OWNER_STATE,
			:FBSERVER_STATE,

			-- Ajout V22
            :GEDUSER_LOGIN,
            :GEDUSER_CREATE_DATE,
            :GEDUSER_MODIF_DATE,
            :GEDUSER_SUBSCRIBE_START,
            :GEDUSER_SUBSCRIBE_END,
            :GEDUSER_COMMENT,
            :GEDUSER_CHARGEABLE,
			:GEDUSER_GEDGROUP_ID,

            :CONTACT_ID,
			:CONTACT_NAME,
			:CONTACT_FIRSTNAME, 
			:CONTACT_PREFIX ,
			:CONTACT_EMAIL,
			:CONTACT_TEL,
			:CONTACT_ADDRESS,
			:CONTACT_POSTCODE,
			:CONTACT_REGION,
			:CONTACT_CITY,
			:CONTACT_COUNTRY,

			-- Ajout V32
			:CONTACT_ORGANIZATION,
			:CONTACT_SERVICE,
			:CONTACT_IDENTIFIER,
			:CONTACT_CELLTEL,

            :CONTACT_CREATE_DATE,
            :CONTACT_MODIF_DATE,
			:CONTACT_STATE 			
			
			
	DO
	BEGIN
        SELECT CONTTYPES_INFOS FROM GET_CONTTYPE_MDF(:CONTACT_ID) INTO :CONTTYPES_INFOS;
		SUSPEND;
    END
END ^

ALTER PROCEDURE GET_GEDUSERS_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDGROUP_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_LOGIN_FILTER VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_NAME_FILTER VARCHAR(150) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_FIRSTNAME_FILTER VARCHAR(150) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_MAX_ROWS INTEGER NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDGROUP_ID INTEGER,
GEDUSER_ID INTEGER,
GEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
GEDUSER_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDUSER_CHARGEABLE BOOLEAN,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPES_INFOS BLOB CHARACTER SET UTF8,
PROFILE_ID INTEGER,
GEDUSER_GEDGROUP_ID INTEGER,
OWNER_STATE STATE,
GEDUSER_STATE STATE,
CONTACT_STATE STATE)
AS 
/*
	Renvoie la liste des Utilisateurs GED associés à un Propriétaire ou à un Groupe...

	
	V34 : évolutions pour renvoyer les membres d'un groupe, de la manière suivante :
	- Renommée de GET_GEDUSERS_FOR_OWNER en GET_GEDUSERS_FOR_OWNER_OR_GROUP
	- I_TGEDGROUP_ID > 0 : on renvoie les membres du groupe visé
	- I_TGEDGROUP_ID = 0 : on ne tient pas compte du paramètre (ie. on traite les GEDUSER par rapport aux OWNER)
	- I_TGEDGROUP_ID = TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL : On recherche les GEDUSER qui ne sont membres d'aucun groupe (ie, pas d'association présente dans TGEDGROUPUSER)

    On doit au moins passer soit un OWNER_ID (ignoré si GEDGROUP_ID>0), soit un GEDGROUP_ID (erreur BAD_PARAM dans le cas contraire)
    La requête est construite dynamiquement (et optimisée ;-) ), en fonction des différents paramètres

MAJ V22 :
    Ajout des informations détaillées GEDUSER et CONTACT pour gain de performance NAS

MAJ V 24 :
    - CONTTYPES_INFOS renvoyé en tant que BLOB
    - ORDER BY TGEDUSER.LOGIN

MAJ V32 :
	- Ajout  GEDGROUP_ID
	- Ajout de TCONTACT.ORGANIZATION, etc...

MAJ V34
    - Ajout I_TGEDUSER_LOGIN_FILTER, I_TCONTACT_NAME_FILTER, I_TCONTACT_FIRSTNAME_FILTER, I_MAX_ROWS
    - Traitements pour récupération des membres de groupe
	- GEDGROUP_ID renommé GEDUSER_GEDGROUP_ID en sortie

V40 :
    - Systématisation des paramètres représentant NULL en entrée (utilisation de TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL)

*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_QUERY VARCHAR(8000);
DECLARE VARIABLE SQL_QUERY VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;

DECLARE VARIABLE NULL_PARAM INTEGER;

BEGIN

    I_TGEDUSER_LOGIN_FILTER=TRIM(I_TGEDUSER_LOGIN_FILTER);
    I_TCONTACT_NAME_FILTER=TRIM(I_TCONTACT_NAME_FILTER);
    I_TCONTACT_FIRSTNAME_FILTER=TRIM(I_TCONTACT_FIRSTNAME_FILTER);
    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);

	SQL_WHERE_OWNER = '';
	SQL_WHERE_GEDUSER = '';
	ID_OK= Null;

	-- dummy pour faciliter les concaténations
	SQL_WHERE_QUERY = '1=1';

	-- Récupération du DOM_PARAM représentant la recherche de valeur NULL
	NULL_PARAM=COALESCE((SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('DOMAIN','PARAM_EQUIV_NULL')),-9);
	
    -- Au moins 1 de ces paramètres doit-être passé
    IF (:I_TOWNER_ID=0 AND (:I_TGEDGROUP_ID=0 OR :I_TGEDGROUP_ID=NULL_PARAM)) THEN EXCEPTION EX_BAD_PARAM;

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER;

    IF (:I_TOWNER_ID!=0) THEN
    BEGIN
        EXECUTE STATEMENT '
            SELECT ID FROM TOWNER
            WHERE ID=' || :I_TOWNER_ID || IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
            INTO ID_OK;
            
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;
    END
	
	IF (:I_TGEDGROUP_ID>0) THEN
	BEGIN
        ID_OK= Null;
        EXECUTE STATEMENT '
            SELECT TGEDGROUP.ID FROM TGEDGROUP INNER JOIN TOWNER ON TGEDGROUP.TOWNER_ID=TOWNER.ID
            WHERE TGEDGROUP.ID=' || :I_TGEDGROUP_ID || IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
        INTO ID_OK;
        
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDGROUP;
        
    END

    IF (I_TGEDUSER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;

    -- Query de base
    SQl_QUERY= '
		SELECT
			TGEDUSER.TOWNER_ID, ' ||
			:I_TGEDGROUP_ID || ',
			TGEDUSER.ID,
            COALESCE(TGEDUSER.TPROFILE_ID,0),
			TOWNER.STATE AS TOWNER_STATE,
			TGEDUSER.STATE,

            -- Ajout V22
			TGEDUSER.LOGIN,
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDUSER.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDUSER.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDUSER.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDUSER.SUBSCRIBE_END)),
            COALESCE(TGEDUSER."COMMENT",''''),
            TGEDUSER.CHARGEABLE,
			COALESCE(TGEDUSER.TGEDGROUP_ID,0),
  
            COALESCE(TGEDUSER.TCONTACT_ID,0),
			COALESCE(TCONTACT.NAME,''''),
			COALESCE(TCONTACT.FIRSTNAME,''''),
			COALESCE(TCONTACT.PREFIX,''''),
			COALESCE(TCONTACT.EMAIL,''''),
			COALESCE(TCONTACT.TEL,''''),
			COALESCE(TCONTACT.ADDRESS,''''),
			COALESCE(TCONTACT.POSTCODE,''''),
			COALESCE(TCONTACT.REGION,''''),
			COALESCE(TCONTACT.CITY,''''),
			COALESCE(TCONTACT.COUNTRY,''''),

			COALESCE(TCONTACT.ORGANIZATION,''''),
			COALESCE(TCONTACT.SERVICE,''''),
			COALESCE(TCONTACT.IDENTIFIER,''''),
			COALESCE(TCONTACT.CELLTEL,''''),

            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.MODIF_DATE)),
			COALESCE(TCONTACT.STATE,0)

		FROM
			TGEDUSER
                LEFT OUTER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID '
                    /*
                    Performance : le LEFT JOIN est très lent si un critère est posé sur TCONTACT.NAME ou TCONTACT.FIRSTNAME
                    Donc, on positionne un LEFT JOIN si aucun critère ou un INNER JOIN si un critère est passé
                    Fonctionnelement équivalent (si un critère est passé, dans notre contexte, on ne cherche pas un NULL)...
                    */
                    || IIF (:I_TCONTACT_NAME_FILTER != '' OR  :I_TCONTACT_FIRSTNAME_FILTER != '','INNER','LEFT') || ' JOIN TCONTACT ON TGEDUSER.TCONTACT_ID=TCONTACT.ID ';

    
    -- Chaine de critères
    
    -- On ne s'occupe du OWNER que si il est explicitement passé
    SQL_WHERE_QUERY= SQL_WHERE_QUERY || IIF(:I_TOWNER_ID!=0 ,' AND TGEDUSER.TOWNER_ID=' || :I_TOWNER_ID,'');

    IF (:I_TGEDGROUP_ID!=0) THEN
        -- Beaucoup plus performant qu'un JOIN...
        SQL_WHERE_QUERY= SQL_WHERE_QUERY || -- IIF(:SQL_WHERE_QUERY!='', ' AND ' ,'') || 
            IIF(:I_TGEDGROUP_ID=NULL_PARAM,
                ' AND TGEDUSER.ID NOT IN (SELECT TGEDGROUPUSER.TGEDUSER_ID FROM TGEDGROUPUSER WHERE TGEDGROUPUSER.TGEDUSER_ID=TGEDUSER.ID)',
                ' AND TGEDUSER.ID IN (SELECT TGEDGROUPUSER.TGEDUSER_ID FROM TGEDGROUPUSER WHERE TGEDGROUPUSER.TGEDGROUP_ID=' || :I_TGEDGROUP_ID || ')'
            );
    /*
    IF (:I_TGEDGROUP_ID>0) THEN SQL_WHERE_QUERY=:SQL_WHERE_QUERY || IIF(:SQL_WHERE_QUERY!='', ' AND ' ,'') || 'TGEDGROUPUSER.TGEDGROUP_ID=' || :I_TGEDGROUP_ID;
    IF (:I_TGEDGROUP_ID=-1) THEN SQL_WHERE_QUERY=:SQL_WHERE_QUERY || IIF(:SQL_WHERE_QUERY!='', ' AND ' ,'') || 'TGEDGROUPUSER.TGEDGROUP_ID IS NULL';
    */
    SQL_WHERE_QUERY=:SQL_WHERE_QUERY || 
        IIF (:I_TGEDUSER_LOGIN_FILTER != '' ,' AND TGEDUSER.LOGIN LIKE ''' || :I_TGEDUSER_LOGIN_FILTER || '''', '') ||
        IIF (:I_TCONTACT_NAME_FILTER != '' ,' AND TCONTACT.NAME LIKE ''' || :I_TCONTACT_NAME_FILTER || '''', '') ||
        IIF (:I_TCONTACT_FIRSTNAME_FILTER != '' ,' AND TCONTACT.FIRSTNAME LIKE ''' || :I_TCONTACT_FIRSTNAME_FILTER || '''', '') ||
        IIF (:SQL_WHERE_GEDUSER != '' , ' AND (' || :SQL_WHERE_GEDUSER || ')', '');


                    
        SQL_QUERY=:SQL_QUERY || '
            WHERE ' || :SQL_WHERE_QUERY;

        SQL_QUERY=:SQL_QUERY || '
         ORDER BY  ' ||
            IIF (:I_TCONTACT_NAME_FILTER != '' ,
                'TCONTACT.NAME, TCONTACT.FIRSTNAME',
                IIF(:I_TCONTACT_FIRSTNAME_FILTER != '',
                    'TCONTACT.FIRSTNAME, TCONTACT.NAME',
                    'TGEDUSER.LOGIN'
                )
             ) || ' ' ||
        IIF (:I_MAX_ROWS != 0 ,'ROWS 1 TO '|| :I_MAX_ROWS,'');

/*
    -- DEBUG
    GEDUSER_COMMENT=:SQL_QUERY;
    SUSPEND;
    EXIT;
*/    

	/* Recherche des Utilisateurs GED */
	FOR EXECUTE STATEMENT
        :SQL_QUERY
        
		INTO
			:OWNER_ID,
			:GEDGROUP_ID,
			:GEDUSER_ID,
			:PROFILE_ID,
			:OWNER_STATE,
			:GEDUSER_STATE,
			
			-- Ajout V22
            :GEDUSER_LOGIN,
            :GEDUSER_CREATE_DATE,
            :GEDUSER_MODIF_DATE,
            :GEDUSER_SUBSCRIBE_START,
            :GEDUSER_SUBSCRIBE_END,
            :GEDUSER_COMMENT,
            :GEDUSER_CHARGEABLE,
			:GEDUSER_GEDGROUP_ID,

            :CONTACT_ID,
			:CONTACT_NAME,
			:CONTACT_FIRSTNAME, 
			:CONTACT_PREFIX ,
			:CONTACT_EMAIL,
			:CONTACT_TEL,
			:CONTACT_ADDRESS,
			:CONTACT_POSTCODE,
			:CONTACT_REGION,
			:CONTACT_CITY,
			:CONTACT_COUNTRY,

			-- Ajout V32
			:CONTACT_ORGANIZATION,
			:CONTACT_SERVICE,
			:CONTACT_IDENTIFIER,
			:CONTACT_CELLTEL,

            :CONTACT_CREATE_DATE,
            :CONTACT_MODIF_DATE,
			:CONTACT_STATE 			
	DO
	BEGIN
        SELECT CONTTYPES_INFOS FROM GET_CONTTYPE_MDF(:CONTACT_ID) INTO :CONTTYPES_INFOS;
		SUSPEND;
    END
END ^

ALTER PROCEDURE GET_GEDUSER_ID (I_TOWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TGEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TGEDUSER_PASSWD VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
OWNER_ID INTEGER,
PROFILE_ID INTEGER,
GEDUSER_GEDGROUP_ID INTEGER,
GEDGROUP_PROFILE_ID INTEGER,
CONTACT_ID INTEGER,
GEDUSER_STATE STATE)
AS 
/*
	Recherche d'un code identifiant d'utilisateur GED dans la table "TGEDUSER"

	Attention : les GED_LOGIN sont uniques pour CHAQUE OWNER
	Il faut donc passer le OWNER_SUBDOMAIN à cette procédure afin qu'elle puisse identifier un GEDUSER_LOGIN
	par rapport à un OWNER donné...

    Attend :
	- I_TGEDUSER_LOGIN : Login d'un utilisateur GED
	- I_TGEDUSER_PASSWD : password (haché SHA2556) d'un utilisateur
	- GEDUSER_STATE/OWNER_STATE : voir documentation STATE


	Des erreurs sont levées si le login et/ou le password sont incorrect...

MAJ V12 :
	- GED_LOGIN/GED_PASSWD ==> LOGIN/PASSWD
	
MAJ V22 :
    - PASSWD non obligatoire en entrée et test seulement sur LOGIN si PASSWD non passé

MAJ V32 :
	- Ajout  GEDGROUP_ID + GEDGROUP_PROFILE_ID
	
- MAJ V34
    - GEDGROUP_ID renommé GEDUSER_GEDGROUP_ID en sortie

*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);
DECLARE VARIABLE PASSWD VARCHAR(100); 

BEGIN

    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    
    SQL_WHERE_OWNER = '';
    SQL_WHERE_GEDUSER = '';

    
    IF (:I_TOWNER_STATE ='' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    IF (I_TGEDUSER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;

    /* Nettoyage des paramètres */
    I_TOWNER_SUBDOMAIN = TRIM(I_TOWNER_SUBDOMAIN);
    I_TGEDUSER_LOGIN = TRIM(I_TGEDUSER_LOGIN);
    I_TGEDUSER_PASSWD = TRIM(UPPER(I_TGEDUSER_PASSWD));

	EXECUTE STATEMENT 
        'SELECT
            TGEDUSER.ID,
            TGEDUSER.PASSWD,
            COALESCE(TGEDUSER.TPROFILE_ID,0),
			COALESCE(TGEDUSER.TGEDGROUP_ID,0),
			COALESCE(TGEDGROUP.TPROFILE_ID,0),
            COALESCE(TGEDUSER.TCONTACT_ID,0),
            TGEDUSER.STATE,
            TOWNER.ID
		FROM TGEDUSER
			INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
			LEFT JOIN TGEDGROUP ON TGEDUSER.TGEDGROUP_ID=TGEDGROUP.ID
        WHERE TGEDUSER.LOGIN =''' || :I_TGEDUSER_LOGIN || ''' AND TOWNER.SUBDOMAIN=''' || :I_TOWNER_SUBDOMAIN || '''' ||
			IIF (SQL_WHERE_OWNER != '',' AND ' || SQL_WHERE_OWNER, '') ||
			IIF (SQL_WHERE_GEDUSER != '',' AND ' || SQL_WHERE_GEDUSER, '')
		INTO
            :GEDUSER_ID,
            :PASSWD,
            :PROFILE_ID,
			:GEDUSER_GEDGROUP_ID,
			:GEDGROUP_PROFILE_ID,
            :CONTACT_ID,
            :GEDUSER_STATE,
            :OWNER_ID;

    -- Non trouvé...
    IF (:GEDUSER_ID IS NULL) THEN EXCEPTION EX_BAD_GED_LOGIN;

	IF (I_TGEDUSER_PASSWD!='' AND UPPER(:PASSWD)!=UPPER(:I_TGEDUSER_PASSWD)) THEN EXCEPTION EX_BAD_DOM_PASSWD;
		
	/* Ici, tout est ok, on renvoit donc l'ID et le flag d'activité */
	SUSPEND;
		
END ^

ALTER PROCEDURE GET_GEDUSER_INFOS (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
GEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
GEDUSER_PASSWD VARCHAR(100) CHARACTER SET UTF8,
GEDUSER_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
GEDUSER_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
GEDUSER_CHARGEABLE BOOLEAN,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPES_INFOS BLOB CHARACTER SET UTF8,
OWNER_ID INTEGER,
PROFILE_ID INTEGER,
GEDUSER_GEDGROUP_ID INTEGER,
GEDGROUP_PROFILE_ID INTEGER,
GEDUSER_STATE STATE,
OWNER_STATE STATE,
CONTACT_STATE STATE)
AS 
/*
	Renvoie les informations détaillées sur un Utilisateur GED...

MAJ V12 :
	- GED_LOGIN ==> LOGIN (interne)
	
V16 :
    - Ajout de GEDUSER_PASSWD (pour vérification mot de passe préalable à une modification de mot de passe)
    
V22 :
    - Ajout informations détaillées CONTACT pour améliorations performances NAS

MAJ V 24 :
    - CONTTYPES_INFOS renvoyé en tant que BLOB

MAJ V32 :
	- Ajout  GEDGROUP_ID
	- Ajout de TCONTACT.ORGANIZATION, etc...
	
MAJ V34 :
    - GEDGROUP_ID renommé GEDUSER_GEDGROUP_ID en sortie

*/
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE REC_FOUND INTEGER;

BEGIN

    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);

	REC_FOUND=0;
	SQL_WHERE_GEDUSER='';
	SQL_WHERE_OWNER='';

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER;

    IF (I_TGEDUSER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;

    /* Recherche des utlisateurs */
    FOR EXECUTE STATEMENT '
        SELECT
            TGEDUSER.ID,
			TGEDUSER.LOGIN,
			TGEDUSER.PASSWD,
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDUSER.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDUSER.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDUSER.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDUSER.SUBSCRIBE_END)),
            COALESCE(TGEDUSER."COMMENT",''''),
            TGEDUSER.CHARGEABLE,
            TGEDUSER.TOWNER_ID,
            COALESCE(TGEDUSER.TPROFILE_ID,0),
			COALESCE(TGEDUSER.TGEDGROUP_ID,0),
			COALESCE(TGEDGROUP.TPROFILE_ID,0),
            COALESCE(TGEDUSER.TCONTACT_ID,0),
            TGEDUSER.STATE,
            TOWNER.STATE,
            
            -- Ajout V22
			COALESCE(TCONTACT.NAME,''''),
			COALESCE(TCONTACT.FIRSTNAME,''''),
			COALESCE(TCONTACT.PREFIX,''''),
			COALESCE(TCONTACT.EMAIL,''''),
			COALESCE(TCONTACT.TEL,''''),
			COALESCE(TCONTACT.ADDRESS,''''),
			COALESCE(TCONTACT.POSTCODE,''''),
			COALESCE(TCONTACT.REGION,''''),
			COALESCE(TCONTACT.CITY,''''),
			COALESCE(TCONTACT.COUNTRY,''''),

			COALESCE(TCONTACT.ORGANIZATION,''''),
			COALESCE(TCONTACT.SERVICE,''''),
			COALESCE(TCONTACT.IDENTIFIER,''''),
			COALESCE(TCONTACT.CELLTEL,''''),

            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.MODIF_DATE)),
			COALESCE(TCONTACT.STATE,0)
            
        FROM TGEDUSER
            INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
            LEFT JOIN TCONTACT ON TGEDUSER.TCONTACT_ID=TCONTACT.ID
			LEFT JOIN TGEDGROUP ON TGEDUSER.TGEDGROUP_ID=TGEDGROUP.ID
        WHERE
            TGEDUSER.ID=' || :I_TGEDUSER_ID ||
            IIF (:SQL_WHERE_GEDUSER != '' , ' AND (' || :SQL_WHERE_GEDUSER || ')', '') ||
            IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
        INTO
            :GEDUSER_ID,
            :GEDUSER_LOGIN,
            :GEDUSER_PASSWD,
            :GEDUSER_CREATE_DATE,
            :GEDUSER_MODIF_DATE,
            :GEDUSER_SUBSCRIBE_START,
            :GEDUSER_SUBSCRIBE_END,
            :GEDUSER_COMMENT,
            :GEDUSER_CHARGEABLE,
            :OWNER_ID,
            :PROFILE_ID,
			:GEDUSER_GEDGROUP_ID,
			:GEDGROUP_PROFILE_ID,
            :CONTACT_ID,
            :GEDUSER_STATE,
            :OWNER_STATE,
            
            -- Ajout V22
			:CONTACT_NAME,
			:CONTACT_FIRSTNAME, 
			:CONTACT_PREFIX ,
			:CONTACT_EMAIL,
			:CONTACT_TEL,
			:CONTACT_ADDRESS,
			:CONTACT_POSTCODE,
			:CONTACT_REGION,
			:CONTACT_CITY,
			:CONTACT_COUNTRY,

			-- Ajout V32
			:CONTACT_ORGANIZATION,
			:CONTACT_SERVICE,
			:CONTACT_IDENTIFIER,
			:CONTACT_CELLTEL,

            :CONTACT_CREATE_DATE,
            :CONTACT_MODIF_DATE,
			:CONTACT_STATE 			
            
    DO
    BEGIN
        REC_FOUND=:REC_FOUND+1;
        SELECT CONTTYPES_INFOS FROM GET_CONTTYPE_MDF(:CONTACT_ID) INTO :CONTTYPES_INFOS;
        SUSPEND;
    END

    IF (REC_FOUND=0) THEN EXCEPTION EX_NOGEDUSER;
END ^

ALTER PROCEDURE GET_LASTSYNC_MDF (I_TLIBRARY_ID INTEGER NOT NULL)
RETURNS (LOGSYNCS_INFOS BLOB CHARACTER SET UTF8)
AS 
/*
    Retourne une chaine contenant la concaténation des informations de synchro pour des synchros donnéees 
    pour la dernière synchronisation ayant été effectuée pour une bibliothèque données

- V24 : 
	- Création

MAJ V25
	- Optimisation performance (modifs TLIBRARY)
*/
DECLARE VARIABLE LOGSYNC_ID INTEGER;

BEGIN
    SELECT TLIBRARY.TLOGSYNC_ID FROM TLIBRARY WHERE TLIBRARY.ID=:I_TLIBRARY_ID INTO LOGSYNC_ID;
    -- Pas de synchro réalisée, on renvoie ''
    IF (LOGSYNC_ID IS NULL) THEN
        LOGSYNCS_INFOS='';
    ELSE
        SELECT LOGSYNCS_INFOS FROM GET_LOGSYNC_MDF(:LOGSYNC_ID) INTO LOGSYNCS_INFOS;

    SUSPEND;
END ^

ALTER PROCEDURE GET_LIBRARIES (I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
PROFILE_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
    Renvoie les informations associées à toutes les bibliothèques

    Il est possible qu'il y en ai aucune (pas de librairie visible)
    ==> recordset vide

    Attend :
    - STATE (voir documentation sur ce point)
      
MAJ V13:
	- Ajout LIBRARY_GUID
	
MAJ V24 :
    - SIZE_MB BIGINT
	- Ajout LASTSYNC_INFOS

MAV V 25
    - Ajout LOGSYNC_ID

MAJ V31 :
	- Ajout ACCESS_MODE

MAJ V32:
	- Ajout LISTORDER

MAJ V 36
    - LIBRARY_SIZE_MB_ORG en sortie

-V40
	GUID VARCHAR(40) => VARCHAR(255)
	Ajout TLIBRARY.VERSION

*/
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);

BEGIN

    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

    SQL_WHERE_LIB = '';
	SQL_WHERE_OWNER = '';
	SQL_WHERE_FBSERVER = '';

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER; 

    IF (:I_TLIBRARY_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB;


    /* Recherche des bibliothèques et des serveurs associés */
    FOR EXECUTE STATEMENT '
        SELECT
			TLIBRARY.ID,
            COALESCE(TLIBRARY."COMMENT",''''),
			COALESCE((SELECT LIBRARY_CONNECT FROM GET_LIBRARY_CONNECT(TLIBRARY.ID)),'''') AS PATH,            
            COALESCE(TLIBRARY.TITLE,''''),
            COALESCE(TLIBRARY.GUID, ''''),
            COALESCE(TLIBRARY.VERSION, 0),
            COALESCE(TLIBRARY.DBPATH,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_END)),
			TLIBRARY.ACCESS_MODE,
            COALESCE(TLIBRARY.ACCESS_TYPE,0),
            TLIBRARY.CHARGEABLE,
            COALESCE(TLIBRARY.SIZE_MB,0),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.LAST_SIZE_CHECK)),
            COALESCE(TLIBRARY.SIZE_MB_ORG,0),
            TLIBRARY.TOWNER_ID,
            COALESCE(TLIBRARY.TFBSERVER_ID,0),
            COALESCE(TLIBRARY.TPROFILE_ID,0),
            COALESCE(TFBSERVER.STATE,0),
            TLIBRARY.STATE AS LIBRARY_STATE,
            TOWNER.STATE AS OWNER_STATE,
            
            -- Ajout V25
            COALESCE(TLIBRARY.TLOGSYNC_ID,0),

			-- Ajout V32
            COALESCE(TLIBRARY.LISTORDER,0)
			

        FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID '
        -- WHERE "bidon" pour simplification des traietments des aautres critères (AND ...)
        || ' WHERE (1=1)' ||
			IIF (:SQL_WHERE_LIB != '' , ' AND (' || :SQL_WHERE_LIB || ')', '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||              
            IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '') 
        || ' ORDER BY TLIBRARY.TITLE'
        INTO
            :LIBRARY_ID,
            :LIBRARY_COMMENT,
            :LIBRARY_CONNECT,
            :LIBRARY_TITLE,
            :LIBRARY_GUID,
			-- Ajout V40
			:LIBRARY_VERSION,
            :LIBRARY_DBPATH,
            :LIBRARY_CREATE_DATE,
            :LIBRARY_MODIF_DATE,
            :LIBRARY_SUBSCRIBE_START,
            :LIBRARY_SUBSCRIBE_END,

            :LIBRARY_ACCESS_MODE,
            :LIBRARY_ACCESS_TYPE,
            :LIBRARY_CHARGEABLE,
            :LIBRARY_SIZE_MB,
            :LIBRARY_LAST_SIZE_CHECK,
            :LIBRARY_SIZE_MB_ORG,
            :OWNER_ID,
            :FBSERVER_ID,
			:PROFILE_ID,
            :FBSERVER_STATE,
            :LIBRARY_STATE,
            :OWNER_STATE,
            -- Ajouté en V25
            :LOGSYNC_ID,
			-- Ajout V32
			:LIBRARY_LISTORDER
            
	DO
    BEGIN
        SELECT LOGSYNCS_INFOS FROM GET_LASTSYNC_MDF(:LIBRARY_ID) INTO :LASTSYNC_INFOS;
        SUSPEND;
    END

END ^

ALTER PROCEDURE GET_LIBRARIES_FOR_FBSERVER (I_TFBSERVER_ID INTEGER NOT NULL,
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (FBSERVER_ID INTEGER,
LIBRARY_ID INTEGER,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
OWNER_ID INTEGER,
PROFILE_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
FBSERVER_STATE STATE,
LIBRARY_STATE STATE,
OWNER_STATE STATE)
AS 
/*
	Renvoie la liste des bilbiothèques associées à un serveur Firebird

	Il est possible qu'il y en ai aucune (pas de librairie visible/active pour 1 propriétaire ou un serveur FB donné)
	==> recordset vide

	Attend :
	- I_TFBSERVER_ID : un code numérique identifiant de Serveur (FK TFBSERVER)
	- OWNER_STATE : Etat particulier du owner (0 ==> actif par défaut)
	- LIBRARY_STATE : critère de sélection Etat de library
	- I_TFBSERVER_STATE : critère de sélection  état de serveur FB

MAJ V22 :
    - Ajout des informations détaillées LIB pour gain de performance NAS

MAJ V24
	- ORDER BY TLIBRARY.TITLE (au lieu de ID)
    - SIZE_MB BIGINT
	- Ajout LASTSYNC_INFOS

MAV V 25
    - Ajout LOGSYNC_ID

MAJ V31 :
	- Ajout ACCESS_MODE

V32 :
	- Ajout LISTORDER
	
MAJ V 36
    - LIBRARY_SIZE_MB_ORG en sortie

-V40
	GUID VARCHAR(40) => VARCHAR(255)
	Ajout TLIBRARY.VERSION


*/
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    
    /* construction des WHERE */
    SQL_WHERE_OWNER = '';
    SQL_WHERE_LIB = '';
    SQL_WHERE_FBSERVER='';

	ID_OK = Null;
    
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER; 

    EXECUTE STATEMENT '
        SELECT ID FROM TFBSERVER
        WHERE ID=' || :I_TFBSERVER_ID || IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_FBSERVER || ')', '')
        INTO ID_OK;
        
	IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOFBSER;

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    IF (:I_TLIBRARY_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 
    


	/* Recherche des bibliothèques et des serveurs associés */
	FOR EXECUTE STATEMENT '
		SELECT
			TLIBRARY.ID,
            TLIBRARY.STATE AS TLIBRARY_STATE,
			TLIBRARY.TOWNER_ID,
			TOWNER.STATE AS TOWNER_STATE,
			TLIBRARY.TFBSERVER_ID,
            TFBSERVER.STATE,
            COALESCE(TLIBRARY.TPROFILE_ID,0),

            -- Ajout en V22
            COALESCE(TLIBRARY."COMMENT",''''),
			COALESCE((SELECT LIBRARY_CONNECT FROM GET_LIBRARY_CONNECT(TLIBRARY.ID)),'''') AS PATH,
            COALESCE(TLIBRARY.TITLE,''''),
            COALESCE(TLIBRARY.GUID, ''''),
            COALESCE(TLIBRARY.VERSION, 0),
            COALESCE(TLIBRARY.DBPATH,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_END)),
			TLIBRARY.ACCESS_MODE,
            COALESCE(TLIBRARY.ACCESS_TYPE,0),
            TLIBRARY.CHARGEABLE,
            COALESCE(TLIBRARY.SIZE_MB,0),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.LAST_SIZE_CHECK)),
            COALESCE(TLIBRARY.SIZE_MB_ORG,0),

            -- Ajout V25
            COALESCE(TLIBRARY.TLOGSYNC_ID,0),

			-- Ajout V32
            COALESCE(TLIBRARY.LISTORDER,0)


            
		FROM
			TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID INNER JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
		WHERE
			TLIBRARY.TFBSERVER_ID=' || :I_TFBSERVER_ID ||
			IIF (:SQL_WHERE_LIB != '' , ' AND (' || :SQL_WHERE_LIB || ')', '') ||
			IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '') ||
            ' ORDER BY TLIBRARY.TITLE'
		INTO
			:LIBRARY_ID,
			:LIBRARY_STATE,
			:OWNER_ID,
			:OWNER_STATE,
			:FBSERVER_ID,
			:FBSERVER_STATE,
			:PROFILE_ID,
			
			-- Ajoutés en version 22
            :LIBRARY_COMMENT,
            :LIBRARY_CONNECT,
            :LIBRARY_TITLE,
            :LIBRARY_GUID,
			-- Ajout V40
			:LIBRARY_VERSION,
            :LIBRARY_DBPATH,
            :LIBRARY_CREATE_DATE,
            :LIBRARY_MODIF_DATE,
            :LIBRARY_SUBSCRIBE_START,
            :LIBRARY_SUBSCRIBE_END,
			:LIBRARY_ACCESS_MODE,
            :LIBRARY_ACCESS_TYPE,
            :LIBRARY_CHARGEABLE,
            :LIBRARY_SIZE_MB,
            :LIBRARY_LAST_SIZE_CHECK,
            :LIBRARY_SIZE_MB_ORG,

            -- Ajouté en V25
            :LOGSYNC_ID,

			-- Ajout en V32
			:LIBRARY_LISTORDER
			
	DO
	BEGIN
        SELECT LOGSYNCS_INFOS FROM GET_LASTSYNC_MDF(:LIBRARY_ID) INTO :LASTSYNC_INFOS;
		SUSPEND;
    END

END ^

ALTER PROCEDURE GET_LIBRARIES_FOR_GEDGROUP (I_TGEDGROUP_ID INTEGER NOT NULL,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
RETURNS (GEDGROUP_ID INTEGER,
LIBRARY_ID INTEGER,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
GEDUSER_STATE STATE,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
	Renvoie les bibliothèques liées à un Groupe d'utilisateur GED dans la table TGEDGROUPLIB
	
- V32
	- Création

MAJ V 36
    - LIBRARY_SIZE_MB_ORG en sortie

-V40
	GUID VARCHAR(40) => VARCHAR(255)
	Ajout TLIBRARY.VERSION

*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    
BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

	SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
	ID_OK = Null;


    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
	/* Même OWNER pour TLIBRARY et TPROFILE */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    /* Existence/visibilité du groupe d'utilisateur GED lui-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TGEDGROUP.ID
		FROM TGEDGROUP INNER JOIN TOWNER ON TGEDGROUP.TOWNER_ID=TOWNER.ID
        WHERE TGEDGROUP.ID=' || :I_TGEDGROUP_ID ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') 
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDGROUP;

   /* Serveur Firebird (si non Null) utilisable outrepassable...*/
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

   -- Library existante et modifiable...
    IF (:I_TLIBRARY_STATE ='' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

	/* Recherche des Bibliothèques */
	FOR EXECUTE STATEMENT '
		SELECT
			TGEDGROUPLIB.TLIBRARY_ID,
			TGEDGROUPLIB.TGEDGROUP_ID,
			COALESCE(TGEDGROUPLIB.TPROFILE_ID,0),
			TGEDGROUP.TOWNER_ID,
			COALESCE(TFBSERVER.ID,0),
			TLIBRARY.STATE,
            TOWNER.STATE,
			COALESCE(TFBSERVER.STATE,0),
			
            COALESCE(TLIBRARY."COMMENT",''''),
			COALESCE((SELECT LIBRARY_CONNECT FROM GET_LIBRARY_CONNECT(TLIBRARY.ID)),'''') AS PATH,
            COALESCE(TLIBRARY.TITLE,''''),
            COALESCE(TLIBRARY.GUID, ''''),
            COALESCE(TLIBRARY.VERSION, 0),
            COALESCE(TLIBRARY.DBPATH,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_END)),
			TLIBRARY.ACCESS_MODE,
            COALESCE(TLIBRARY.ACCESS_TYPE,0),
            TLIBRARY.CHARGEABLE,
			COALESCE(TLIBRARY.LISTORDER,0),
            COALESCE(TLIBRARY.SIZE_MB,0),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.LAST_SIZE_CHECK)),
            COALESCE(TLIBRARY.SIZE_MB_ORG,0),

            -- Ajout V25
            COALESCE(TLIBRARY.TLOGSYNC_ID,0)
            
            			
		FROM TGEDGROUPLIB INNER JOIN TGEDGROUP ON TGEDGROUPLIB.TGEDGROUP_ID=TGEDGROUP.ID
            INNER JOIN TOWNER ON TGEDGROUP.TOWNER_ID=TOWNER.ID
            INNER JOIN TLIBRARY  ON TGEDGROUPLIB.TLIBRARY_ID=TLIBRARY.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
		WHERE
			TGEDGROUPLIB.TGEDGROUP_ID=' || :I_TGEDGROUP_ID || 
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
        '
        ORDER BY TLIBRARY.LISTORDER, TLIBRARY.TITLE '
		INTO
			:LIBRARY_ID,
			:GEDGROUP_ID,
			:PROFILE_ID,
			:OWNER_ID,
			:FBSERVER_ID,
			:LIBRARY_STATE,
			:OWNER_STATE,
			:FBSERVER_STATE,
			-- Ajoutés en version 22
            :LIBRARY_COMMENT,
            :LIBRARY_CONNECT,
            :LIBRARY_TITLE,
            :LIBRARY_GUID,
			-- Ajout V40
			:LIBRARY_VERSION,
            :LIBRARY_DBPATH,
            :LIBRARY_CREATE_DATE,
            :LIBRARY_MODIF_DATE,
            :LIBRARY_SUBSCRIBE_START,
            :LIBRARY_SUBSCRIBE_END,
			:LIBRARY_ACCESS_MODE,
            :LIBRARY_ACCESS_TYPE,
            :LIBRARY_CHARGEABLE,
			:LIBRARY_LISTORDER,
            :LIBRARY_SIZE_MB,
            :LIBRARY_LAST_SIZE_CHECK,
            :LIBRARY_SIZE_MB_ORG,
            -- Ajouté en V25
            :LOGSYNC_ID
			
	DO
	BEGIN
        SELECT LOGSYNCS_INFOS FROM GET_LASTSYNC_MDF(:LIBRARY_ID) INTO :LASTSYNC_INFOS;	
		SUSPEND;
    END
END ^

ALTER PROCEDURE GET_LIBRARIES_FOR_GEDUSER (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
GEDUSER_GEDGROUP_ID INTEGER,
LIBRARY_ID INTEGER,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
GEDUSER_STATE STATE,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
	Renvoie les bibliothèques liées à un utilisateur GED dans la table TGEDUSERLIB
	
MAJ V22 :
    - Ajout des colonnes détails de bibliothèques


MAJ V24
	- ORDER BY TLIBRARY.TITLE (au lieu de TGEDUSER.ID)
    - SIZE_MB BIGINT
	- Ajout LASTSYNC_INFOS

MAV V 25
    - Ajout LOGSYNC_ID

MAJ V31 :
	- Ajout ACCESS_MODE

MAJ V32 :
	- Ajout de ORDER + Tri sur ORDER...
	- Ajout GEDGROUP_ID
	
- MAJ V34
    - GEDGROUP_ID renommé GEDUSER_GEDGROUP_ID en sortie 

- MAJ V36
    - LIBRARY_SIZE_MB_ORG en sortie

-V40
	GUID VARCHAR(40) => VARCHAR(255)
	Ajout TLIBRARY.VERSION
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    
BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);

	SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
	SQL_WHERE_GEDUSER = '';
	ID_OK = Null;


    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
	/* Même OWNER pour TLIBRARY et TPROFILE */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    -- Utilisateur GED 
    IF (I_TGEDUSER_STATE = '') THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER; 


    /* Existence/visibilité de l'utilisateur GED lui-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TGEDUSER.ID
		FROM TGEDUSER INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
        WHERE TGEDUSER.ID=' || :I_TGEDUSER_ID ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_GEDUSER != '' ,' AND ' || :SQL_WHERE_GEDUSER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDUSER;

   /* Serveur Firebird (si non Null) utilisable outrepassable...*/
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

   -- Library existante et modifiable...
    IF (:I_TLIBRARY_STATE ='' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

	/* Recherche des Bibliothèques */
	FOR EXECUTE STATEMENT '
		SELECT
			TGEDUSERLIB.TLIBRARY_ID,
			TGEDUSERLIB.TGEDUSER_ID,
			COALESCE(TGEDUSERLIB.TPROFILE_ID,0),
			-- Ajout V32
			COALESCE(TGEDUSER.TGEDGROUP_ID,0),
			TGEDUSER.TOWNER_ID,
			COALESCE(TFBSERVER.ID,0),
			TLIBRARY.STATE,
			TGEDUSER.STATE,
            TOWNER.STATE,
			COALESCE(TFBSERVER.STATE,0),
			
            COALESCE(TLIBRARY."COMMENT",''''),
			COALESCE((SELECT LIBRARY_CONNECT FROM GET_LIBRARY_CONNECT(TLIBRARY.ID)),'''') AS PATH,
            COALESCE(TLIBRARY.TITLE,''''),
            COALESCE(TLIBRARY.GUID, ''''),
            COALESCE(TLIBRARY.VERSION, 0),
            COALESCE(TLIBRARY.DBPATH,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_END)),
			TLIBRARY.ACCESS_MODE,
            COALESCE(TLIBRARY.ACCESS_TYPE,0),
            TLIBRARY.CHARGEABLE,
			-- Ajout V32
            COALESCE(TLIBRARY.LISTORDER,0),
            COALESCE(TLIBRARY.SIZE_MB,0),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.LAST_SIZE_CHECK)),
            COALESCE(TLIBRARY.SIZE_MB_ORG,0),

            -- Ajout V25
            COALESCE(TLIBRARY.TLOGSYNC_ID,0)
            
            			
		FROM TGEDUSERLIB INNER JOIN TGEDUSER ON TGEDUSERLIB.TGEDUSER_ID=TGEDUSER.ID
            INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
            INNER JOIN TLIBRARY  ON TGEDUSERLIB.TLIBRARY_ID=TLIBRARY.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
		WHERE
			TGEDUSERLIB.TGEDUSER_ID=' || :I_TGEDUSER_ID || 
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
        '
        ORDER BY TLIBRARY.LISTORDER, TLIBRARY.TITLE '
		INTO
			:LIBRARY_ID,
			:GEDUSER_ID,
			:PROFILE_ID,
			:GEDUSER_GEDGROUP_ID,
			:OWNER_ID,
			:FBSERVER_ID,
			:LIBRARY_STATE,
			:GEDUSER_STATE,
			:OWNER_STATE,
			:FBSERVER_STATE,
			-- Ajoutés en version 22
            :LIBRARY_COMMENT,
            :LIBRARY_CONNECT,
            :LIBRARY_TITLE,
			-- Ajout V40
            :LIBRARY_GUID,
            :LIBRARY_VERSION,
            :LIBRARY_DBPATH,
            :LIBRARY_CREATE_DATE,
            :LIBRARY_MODIF_DATE,
            :LIBRARY_SUBSCRIBE_START,
            :LIBRARY_SUBSCRIBE_END,
			:LIBRARY_ACCESS_MODE,
            :LIBRARY_ACCESS_TYPE,
            :LIBRARY_CHARGEABLE,
			:LIBRARY_LISTORDER,
            :LIBRARY_SIZE_MB,
            :LIBRARY_LAST_SIZE_CHECK,
            :LIBRARY_SIZE_MB_ORG,
            -- Ajouté en V25
            :LOGSYNC_ID
            
			
	DO
	BEGIN
        SELECT LOGSYNCS_INFOS FROM GET_LASTSYNC_MDF(:LIBRARY_ID) INTO :LASTSYNC_INFOS;	
		SUSPEND;
    END
END ^

ALTER PROCEDURE GET_LIBRARIES_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT'')
RETURNS (OWNER_ID INTEGER,
LIBRARY_ID INTEGER,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
FBSERVER_ID INTEGER,
PROFILE_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
	Renvoie la liste des bilbiothèques associées à un propriétaire

	Il est possible qu'il y en ai aucune (pas de librairie visible/active pour 1 propriétaire ou un serveur FB donné)
	==> recordset vide

	Attend :
	- I_TOWNER_ID : un code numérique identifiant de propriétaire (FK TOWNER)
	- OWNER_STATE : Etat particulier du owner (0 ==> actif par défaut)
	- LIBRARY_STATE : critère de sélection Etat de library
	- I_TFBSERVER_STATE : critère de sélection  état de serveur FB

V22 :
    - Ajout des informations complète LIBRARY pour gain de performance NAS

MAJ V24
	- ORDER BY TLIBRARY.TITLE (au lieu de ID)
    - SIZE_MB BIGINT
	- Ajout LASTSYNC_INFOS

MAV V 25
    - Ajout LOGSYNC_ID

MAJ V31 :
	- Ajout ACCESS_MODE

MAJ V32 :
	- Ajout de LISTORDER + Tri sur LISTORDER...

- MAJ V36
    - LIBRARY_SIZE_MB_ORG en sortie

-V40
	GUID VARCHAR(40) => VARCHAR(255)
	Ajout TLIBRARY.VERSION
*/
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    
    /* construction des WHERE */
    SQL_WHERE_OWNER = '';
    SQL_WHERE_LIB = '';
    SQL_WHERE_FBSERVER='';

	ID_OK = Null;
    
    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    EXECUTE STATEMENT '
        SELECT ID FROM TOWNER
        WHERE ID=' || :I_TOWNER_ID || IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
        INTO ID_OK;
        
	IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;

    IF (:I_TLIBRARY_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 
    
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER; 


	/* Recherche des bibliothèques et des serveurs associés */
	FOR EXECUTE STATEMENT '
		SELECT
			TLIBRARY.ID,
            TLIBRARY.STATE AS TLIBRARY_STATE,
			TLIBRARY.TOWNER_ID,
			TOWNER.STATE AS TOWNER_STATE,
			COALESCE(TLIBRARY.TFBSERVER_ID,0),
            COALESCE(TFBSERVER.STATE,0),
            COALESCE(TLIBRARY.TPROFILE_ID,0),
            
            COALESCE(TLIBRARY."COMMENT",''''),
			COALESCE((SELECT LIBRARY_CONNECT FROM GET_LIBRARY_CONNECT(TLIBRARY.ID)),'''') AS PATH,
            COALESCE(TLIBRARY.TITLE,''''),
            COALESCE(TLIBRARY.GUID, ''''),
            COALESCE(TLIBRARY.VERSION, 0),
            COALESCE(TLIBRARY.DBPATH,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_END)),
			TLIBRARY.ACCESS_MODE,
            COALESCE(TLIBRARY.ACCESS_TYPE,0),
            TLIBRARY.CHARGEABLE,
            COALESCE(TLIBRARY.SIZE_MB,0),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.LAST_SIZE_CHECK)),
            COALESCE(TLIBRARY.SIZE_MB_ORG,0),
            
            -- Ajout V25
            COALESCE(TLIBRARY.TLOGSYNC_ID,0),

			-- Ajout V32
            COALESCE(TLIBRARY.LISTORDER,0)


		FROM
			TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
		WHERE
			TLIBRARY.TOWNER_ID=' || :I_TOWNER_ID ||
			IIF (:SQL_WHERE_LIB != '' , ' AND (' || :SQL_WHERE_LIB || ')', '') ||
            /* Attention, la colonne TFBERVER_ID accepte les valeurs Null ... */
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') || '
		-- MAJ V32
        ORDER BY TLIBRARY.LISTORDER, TLIBRARY.TITLE
        '
		INTO
			:LIBRARY_ID,
			:LIBRARY_STATE,
			:OWNER_ID,
			:OWNER_STATE,
			:FBSERVER_ID,
			:FBSERVER_STATE,
			:PROFILE_ID,
			-- Ajoutés en version 22
            :LIBRARY_COMMENT,
            :LIBRARY_CONNECT,
            :LIBRARY_TITLE,
            :LIBRARY_GUID,
			-- Ajout V40
            :LIBRARY_VERSION,
            :LIBRARY_DBPATH,
            :LIBRARY_CREATE_DATE,
            :LIBRARY_MODIF_DATE,
            :LIBRARY_SUBSCRIBE_START,
            :LIBRARY_SUBSCRIBE_END,
			:LIBRARY_ACCESS_MODE,
            :LIBRARY_ACCESS_TYPE,
            :LIBRARY_CHARGEABLE,
            :LIBRARY_SIZE_MB,
            :LIBRARY_LAST_SIZE_CHECK,
            :LIBRARY_SIZE_MB_ORG,
            -- Ajouté en V25
            :LOGSYNC_ID,
			-- Ajout V32
			:LIBRARY_LISTORDER
			
	DO
    BEGIN
        SELECT LOGSYNCS_INFOS FROM GET_LASTSYNC_MDF(:LIBRARY_ID) INTO :LASTSYNC_INFOS;
        SUSPEND;
    END

END ^

ALTER PROCEDURE GET_LIBRARY_CONNECT (I_TLIBRARY_ID INTEGER NOT NULL)
RETURNS (LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8)
AS 
/*
    Renvoi la chaine de connexion à une bibliothèque par rapport à un serveur Firebird
    Ou NULL si aucun serveur n'est associé
    
    Attend :
    - I_TLIBRARY_ID : Id library
    
    renvoi :
    - LIBRARY_CONNECT VARCHAR(500) : Chaine de connexion complète (réseau/local) à la librairie

	En ce qui concerne les path separators, on prend en compte les éléments spécifiés dans le DBPATH et on construit en fonction de ce path :
		Si DBPATH contient "\" ==> on utilise "\"
		Sinon, on utilise "/"

V16 :
	- MAJ TDOMPARAM NOVAXEL_VOL_PRINC ==> GED_FILENAME

V17 :
    - Nouvelle Gestion SECTION TDOMPARAM
*/
BEGIN
    FOR 
        SELECT
            IIF(NOT TLIBRARY.TFBSERVER_ID IS NULL,
                TFBSERVER.HOST
                    || IIF (TFBSERVER.TCPPORT IS NULL,'', '/' || TFBSERVER.TCPPORT)
                || ':',
                '')
                || TLIBRARY.DBPATH ||
                IIF(POSITION('\',TLIBRARY.DBPATH)=0,'/','\') || (SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('GED','FILENAME')) AS PATH
        FROM 
            TLIBRARY LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TLIBRARY.ID=:I_TLIBRARY_ID
        
        INTO LIBRARY_CONNECT
    DO
        SUSPEND;
    
END  ^

ALTER PROCEDURE GET_LIBRARY_INFOS (I_TLIBRARY_ID INTEGER NOT NULL,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
LIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_CONNECT VARCHAR(500) CHARACTER SET UTF8,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
LIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_VERSION INTEGER,
LIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8,
LIBRARY_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_ACCESS_MODE SMALLINT,
LIBRARY_ACCESS_TYPE INTEGER,
LIBRARY_SIZE_MB BIGINT,
LIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8,
LIBRARY_SIZE_MB_ORG BIGINT,
LIBRARY_CHARGEABLE BOOLEAN,
LIBRARY_LISTORDER INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
PROFILE_ID INTEGER,
LOGSYNC_ID INTEGER,
LASTSYNC_INFOS BLOB CHARACTER SET UTF8,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
    Renvoie les informations associées à une bibliothèque

    Il est possible qu'il y en ai aucune (pas de librairie visible/active avec ID donné)
    ==> recordset vide

    Attend :
    - I_TLIBRARY_ID : un code numérique identifiant de bibliothèque
     
MAJ V13:
	- Ajout LIBRARY_GUID

V18 :
	- Force les paramètres NOT NULL En entrée...
	
MAJ V24 :
    - SIZE_MB BIGINT
	- Ajout LASTSYNC_INFOS

MAV V 25
    - Ajout LOGSYNC_ID

MAJ V31 :
	- Ajout ACCESS_MODE

MAN V32
	- Ajout LISTORDER

- MAJ V36
    - LIBRARY_SIZE_MB_ORG en sortie

-V40
	GUID VARCHAR(40) => VARCHAR(255)
	Ajout TLIBRARY.VERSION
*/
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);

DECLARE VARIABLE REC_FOUND INTEGER;

BEGIN

    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

    REC_FOUND=0;

    SQL_WHERE_LIB = '';
	SQL_WHERE_OWNER = '';
	SQL_WHERE_FBSERVER='';

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER;

    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;

    IF (:I_TLIBRARY_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB;

    /* Recherche des bibliothèques et des serveurs associés */
    FOR EXECUTE STATEMENT '
        SELECT
            TLIBRARY.ID,
            COALESCE(TLIBRARY."COMMENT",''''),
            COALESCE((SELECT LIBRARY_CONNECT FROM GET_LIBRARY_CONNECT(TLIBRARY.ID)),'''') AS PATH,           
            COALESCE(TLIBRARY.TITLE,''''),
            COALESCE(TLIBRARY.GUID, ''''),
            COALESCE(TLIBRARY.VERSION, 0),
            COALESCE(TLIBRARY.DBPATH,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.SUBSCRIBE_END)),
			TLIBRARY.ACCESS_MODE,
            COALESCE(TLIBRARY.ACCESS_TYPE,0),
            TLIBRARY.CHARGEABLE,
            TLIBRARY.SIZE_MB,
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLIBRARY.LAST_SIZE_CHECK)),
            COALESCE(TLIBRARY.SIZE_MB_ORG,0),
            TLIBRARY.TOWNER_ID,
            COALESCE(TLIBRARY.TFBSERVER_ID,0),
            COALESCE(TFBSERVER.STATE,0) AS FBSERVER_STATE,
            TLIBRARY.STATE AS LIBRARY_STATE,
            TOWNER.STATE AS OWNER_STATE,
            COALESCE(TLIBRARY.TPROFILE_ID,0),
            
            -- Ajout V25
            COALESCE(TLIBRARY.TLOGSYNC_ID,0),

			-- Ajout V32
            COALESCE(TLIBRARY.LISTORDER,0)

        FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE
            TLIBRARY.ID=' || :I_TLIBRARY_ID ||
            IIF (:SQL_WHERE_LIB != '' , ' AND (' || :SQL_WHERE_LIB || ')', '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||             
            IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
        INTO
            :LIBRARY_ID,
            :LIBRARY_COMMENT,
            :LIBRARY_CONNECT,
            :LIBRARY_TITLE,
            :LIBRARY_GUID,
			-- Ajout V40
            :LIBRARY_VERSION,
            :LIBRARY_DBPATH,
            :LIBRARY_CREATE_DATE,
            :LIBRARY_MODIF_DATE,
            :LIBRARY_SUBSCRIBE_START,
            :LIBRARY_SUBSCRIBE_END,
			:LIBRARY_ACCESS_MODE,
            :LIBRARY_ACCESS_TYPE,
            :LIBRARY_CHARGEABLE,
            :LIBRARY_SIZE_MB,
            :LIBRARY_LAST_SIZE_CHECK,
            :LIBRARY_SIZE_MB_ORG,
            :OWNER_ID,
            :FBSERVER_ID,
            :FBSERVER_STATE,
            :LIBRARY_STATE,
            :OWNER_STATE,
            :PROFILE_ID,
            -- Ajouté en V25
            :LOGSYNC_ID,
			:LIBRARY_LISTORDER
            
    DO
    BEGIN
        REC_FOUND=:REC_FOUND+1;
        SELECT LOGSYNCS_INFOS FROM GET_LASTSYNC_MDF(:LIBRARY_ID) INTO :LASTSYNC_INFOS;
        SUSPEND;
    END

    IF (REC_FOUND=0) THEN EXCEPTION EX_NOLIB;

END ^

ALTER PROCEDURE GET_LOGSYNCS (I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TIME_CRIT_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TIME_CRIT_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_STATE_CRIT BOOLEAN NOT NULL DEFAULT 32767,
I_MAX_ROWS INTEGER NOT NULL DEFAULT 0)
RETURNS (LIBRARY_ID INTEGER,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
OWNER_ID INTEGER,
OWNER_NAME VARCHAR(100) CHARACTER SET UTF8,
SYNC_START VARCHAR(20) CHARACTER SET UTF8,
SYNC_STOP VARCHAR(20) CHARACTER SET UTF8,
SYNC_DURATION BIGINT,
SYNC_SIZE_BEFORE BIGINT,
SYNC_SIZE_AFTER BIGINT,
SYNC_SIZE_TRANSFERED BIGINT,
SYNC_STATE BOOLEAN,
SYNC_ERR_COMMENT VARCHAR(4196) CHARACTER SET UTF8)
AS 
/*
    Retourne les logs de synchronisation associés à une library donnée et/ou un owner donné
    Les paramètre de dates permettent de filtres les enregistrements

   
V13 :
    - création

V23 :
	- Modification de l'ORDER BY
	
V24 :
	- Modification de l'ORDER BY
	- Inversin des colonnes SYNC_SIZE_BEFORE/SYNC_SIZE_AFTER corrigée en sortie

V40 :
	- ORDER BY modifié pour que la PS renvoie les logs en ordre décroissant (plus récentes à la plus ancienne)
	- ajout de I_MAX_ROWS en entrée pour limiter le nombre de ligne en retour (si 0 : illimité)

*/

-- Chaine SQL_WHERE à appliquer sur la requête en fonction des paramètres passés
DECLARE VARIABLE SQL_WHERE VARCHAR(8190);

BEGIN

    -- Dummy WHERE
    SQL_WHERE = '1=1';
   
    -- Construction de la chaine WHERE en fonction des paramètres passés...
    IF (I_TOWNER_ID != 0) THEN
    BEGIN
        IF (NOT EXISTS (SELECT ID FROM TOWNER WHERE ID=:I_TOWNER_ID)) THEN
            EXCEPTION EX_NOOWNER;
        ELSE
            SQL_WHERE = :SQL_WHERE || ' AND (TLOGSYNC.TOWNER_ID=' || I_TOWNER_ID ||')';
    END

    IF (I_TLIBRARY_ID !=0) THEN
    BEGIN
        IF (NOT EXISTS (SELECT ID FROM TLIBRARY WHERE ID=:I_TLIBRARY_ID)) THEN
            EXCEPTION EX_NOLIB;
        ELSE
            SQL_WHERE = :SQL_WHERE || ' AND (TLOGSYNC.TLIBRARY_ID=' || I_TLIBRARY_ID ||')';
    END
   
    IF (I_TIME_CRIT_START != '') THEN SQL_WHERE = :SQL_WHERE || ' AND (TLOGSYNC.TIME_END>=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TIME_CRIT_START)) ||''')';
    IF (I_TIME_CRIT_END != '') THEN SQL_WHERE = :SQL_WHERE || ' AND (TLOGSYNC.TIME_END<=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TIME_CRIT_END)) ||''')';
   
    IF (I_STATE_CRIT !=32767) THEN SQL_WHERE = :SQL_WHERE || ' AND (TLOGSYNC.STATE=' || :I_STATE_CRIT||')';
   
    FOR EXECUTE STATEMENT
        -- Dans ce cas la sous-requête est bien plus performante qu'un JOIN ...
        'SELECT
            TLOGSYNC.TOWNER_ID,
            (SELECT TOWNER.NAME FROM TOWNER WHERE TLOGSYNC.TOWNER_ID=TOWNER.ID),
            TLOGSYNC.TLIBRARY_ID,
            (SELECT TLIBRARY.TITLE FROM TLIBRARY WHERE TLOGSYNC.TLIBRARY_ID=TLIBRARY.ID),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLOGSYNC.TIME_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TLOGSYNC.TIME_END)),
            TLOGSYNC.DURATION,
            TLOGSYNC.SIZE_BEFORE,
            TLOGSYNC.SIZE_AFTER,
            TLOGSYNC.SIZE_TRANSFERED,
            TLOGSYNC.STATE,
            TLOGSYNC.ERR_COMMENT
        FROM
            TLOGSYNC
        WHERE ' ||
            :SQL_WHERE
        || '
        ORDER BY
            TLOGSYNC.TOWNER_ID, TLOGSYNC.TLIBRARY_ID,TLOGSYNC.TIME_END DESC
        ' || 
		IIF (:I_MAX_ROWS != 0 ,'ROWS 1 TO '|| :I_MAX_ROWS,'')

        INTO
            :OWNER_ID,
            :OWNER_NAME,
            :LIBRARY_ID,
            :LIBRARY_TITLE,
            :SYNC_START,
            :SYNC_STOP,
            :SYNC_DURATION,
            :SYNC_SIZE_BEFORE,
            :SYNC_SIZE_AFTER,
            :SYNC_SIZE_TRANSFERED,
            :SYNC_STATE,
            :SYNC_ERR_COMMENT
    DO
        SUSPEND;
       

END ^

ALTER PROCEDURE GET_LOGSYNCSTATS (I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TIME_CRIT_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TIME_CRIT_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_STATE_CRIT BOOLEAN NOT NULL DEFAULT 32767)
RETURNS (LIBRARY_ID INTEGER,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
OWNER_ID INTEGER,
OWNER_NAME VARCHAR(100) CHARACTER SET UTF8,
SYNC_NB INTEGER,
SYNC_SIZE_TRANSFERED_SUM BIGINT,
SYNC_SIZE_TRANSFERED_AVG BIGINT,
SYNC_DURATION_SUM BIGINT,
SYNC_DURATION_AVG BIGINT)
AS 
/*
    Retourne des statistiques sur les logs de synchronisation associés à une library donnée
    Les paramètre de dates permettent de filtres les enregistrements

   
V13 :
    - création

V23 :
	- Modification de l'ORDER BY

V 25 :
	- Optimisation requête sous-jacente
*/

-- Chaine SQL_WHERE à appliquer sur la requête en fonction des paramètres passés
DECLARE VARIABLE SQL_WHERE VARCHAR(8190);

BEGIN

    -- Dummy WHERE
    SQL_WHERE = '1=1';
   
    -- Construction de la chaine WHERE en fonction des paramètres passés...
    IF (I_TOWNER_ID != 0) THEN
    BEGIN
        IF (NOT EXISTS (SELECT ID FROM TOWNER WHERE ID=:I_TOWNER_ID)) THEN
            EXCEPTION EX_NOOWNER;
        ELSE
            SQL_WHERE = :SQL_WHERE || ' AND (TLOGSYNC.TOWNER_ID=' || I_TOWNER_ID ||')';
    END

    IF (I_TLIBRARY_ID !=0) THEN
    BEGIN
        IF (NOT EXISTS (SELECT ID FROM TLIBRARY WHERE ID=:I_TLIBRARY_ID)) THEN
            EXCEPTION EX_NOLIB;
        ELSE
            SQL_WHERE = :SQL_WHERE || ' AND (TLOGSYNC.TLIBRARY_ID=' || I_TLIBRARY_ID ||')';
    END
   
    IF (I_TIME_CRIT_START != '') THEN SQL_WHERE = :SQL_WHERE || ' AND (TLOGSYNC.TIME_END>=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TIME_CRIT_START)) ||''')';
    IF (I_TIME_CRIT_END != '') THEN SQL_WHERE = :SQL_WHERE || ' AND (TLOGSYNC.TIME_END<=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TIME_CRIT_END)) ||''')';
   
    IF (I_STATE_CRIT !=32767) THEN SQL_WHERE = :SQL_WHERE || ' AND (TLOGSYNC.STATE=' || :I_STATE_CRIT||')';
   
    FOR EXECUTE STATEMENT
        'SELECT
            TLOGSYNC.TOWNER_ID,
			(SELECT TOWNER.NAME FROM TOWNER WHERE TOWNER.ID=TLOGSYNC.TOWNER_ID),
            TLOGSYNC.TLIBRARY_ID,
			(SELECT TLIBRARY.TITLE FROM TLIBRARY WHERE TLIBRARY.ID=TLOGSYNC.TLIBRARY_ID),
            COUNT(TLOGSYNC.ID) AS NB,
            SUM(TLOGSYNC.SIZE_TRANSFERED) AS SIZETRANSFSUM,
            AVG(TLOGSYNC.SIZE_TRANSFERED) AS SIZETRANSAVG,
            SUM(TLOGSYNC.DURATION) AS DURATIONSUM,
            AVG(TLOGSYNC.DURATION) AS DURATIONAVG
        FROM TLOGSYNC
        WHERE ' ||
            :SQL_WHERE
        || '
        GROUP BY TLOGSYNC.TOWNER_ID, TLOGSYNC.TLIBRARY_ID
        '
        INTO
            :OWNER_ID,
            :OWNER_NAME,
            :LIBRARY_ID,
            :LIBRARY_TITLE,
            :SYNC_NB,
            :SYNC_SIZE_TRANSFERED_SUM,
            :SYNC_SIZE_TRANSFERED_AVG,
            :SYNC_DURATION_SUM,
            :SYNC_DURATION_AVG
    DO
        SUSPEND;
       

END ^

ALTER PROCEDURE GET_LOGSYNC_MDF (I_TLOGSYNC_ID INTEGER NOT NULL)
RETURNS (LOGSYNCS_INFOS BLOB CHARACTER SET UTF8)
AS 
/*
    Retourne une chaine contenant la concaténation des informations de synchro pour la synchros donnéee, par exemple 
"72";"COGEREC 75";"58";"2012-08-22 10:29:11";"2012-08-22 10:29:38";"27";"41542112320";"41542116457";"4137";"1";""
- V24 : 
	- Création
- V25 :
	- Suppression des possibiités de filtre sur TOWNER.ID et/ou TLIBRARY.ID (trop long au runtime, donc inexploitable)
*/

DECLARE VARIABLE FIELD_SEP VARCHAR(5);
--DECLARE VARIABLE RECORD_SEP VARCHAR(5);

BEGIN
    LOGSYNCS_INFOS = '';

	SELECT COALESCE(CAST(DOMPARAM_VALUE AS VARCHAR(5)),';') FROM GET_DOMPARAM('DOMAIN','MDF_FIELD_SEP')  INTO FIELD_SEP;

	SELECT 
		'"' || TLOGSYNC.TOWNER_ID || '"' || :FIELD_SEP  || 
		'"' || (SELECT TOWNER.NAME FROM TOWNER WHERE TOWNER.ID=TLOGSYNC.TOWNER_ID) || '"' || :FIELD_SEP  || 
		'"' || TLOGSYNC.TLIBRARY_ID || '"' || :FIELD_SEP || 
		'"' || (SELECT DATE_STRING FROM GET_DATE_STRING(TLOGSYNC.TIME_START)) || '"' || :FIELD_SEP || 
		'"' || (SELECT DATE_STRING FROM GET_DATE_STRING(TLOGSYNC.TIME_END)) || '"' || :FIELD_SEP || 
		'"' || TLOGSYNC.DURATION || '"' || :FIELD_SEP || 
		'"' || COALESCE(TLOGSYNC.SIZE_BEFORE,0) || '"' || :FIELD_SEP || 
		'"' || COALESCE(TLOGSYNC.SIZE_AFTER,0) || '"' || :FIELD_SEP || 
		'"' || TLOGSYNC.SIZE_TRANSFERED || '"' || :FIELD_SEP || 
		'"' || TLOGSYNC.STATE || '"' || :FIELD_SEP || 
		'"' || COALESCE(TLOGSYNC.ERR_COMMENT,'') || '"'
	FROM TLOGSYNC
	WHERE TLOGSYNC.ID=:I_TLOGSYNC_ID
    INTO :LOGSYNCS_INFOS;
    SUSPEND;
END ^

ALTER PROCEDURE GET_OWNERS (I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
OWNER_NAME VARCHAR(100) CHARACTER SET UTF8,
OWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8,
OWNER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
OWNER_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
OWNER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
OWNER_EXTERNAL_ID VARCHAR(100) CHARACTER SET UTF8,
OWNER_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
OWNER_ISADMIN BOOLEAN,
OWNER_SIZE_MB BIGINT,
OWNER_SIZE_MB_CHARGEABLE BIGINT,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPES_INFOS BLOB CHARACTER SET UTF8,
GEDPARAMOWNERS_INFOS BLOB CHARACTER SET UTF8,
PROFILE_ID INTEGER,
OWNER_STATE STATE,
CONTACT_STATE STATE)
AS 
/*
    Renvoie la liste des propriétaires du Cloud (propriétaires actifs seulement par défaut) + les informations contacts et types de contact associées pour test de performance
    
MAJ V 22 :
    - Ajout des informations des contacts pour gian de performances

MAJ V 24 :
    - CONTTYPES_INFOS renvoyé en tant que BLOB
	- Ajout de GEDPARAMS_INFOS renvoyé en tant que BLOB

MAJ V31 :
	- Ajout SIZE_MB + SIZE_MB_CHARGEABLE

MAJ V32 :
	- Ajout de ORGANIZATION, etc...

*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);

BEGIN
    I_TOWNER_STATE= TRIM(I_TOWNER_STATE);
    
    SQL_WHERE_OWNER = '';
    
    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    FOR EXECUTE STATEMENT '
        SELECT
            TOWNER.ID,
            TOWNER.NAME,
            TOWNER.SUBDOMAIN,
            TOWNER.LOGIN,
            TOWNER.STATE,
            (SELECT DATE_STRING FROM GET_DATE_STRING(TOWNER.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TOWNER.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TOWNER.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TOWNER.SUBSCRIBE_END)),
            COALESCE(TOWNER.EXTERNAL_ID,''''),
            COALESCE(TOWNER."COMMENT",''''),
            COALESCE(TOWNER.TPROFILE_ID,0),
            COALESCE(TOWNER.TCONTACT_ID,0),
            (SELECT OWNER_ADMIN FROM GET_OWNER_IS_ADMIN(TOWNER.ID)) AS IS_ADMIN,
			COALESCE(TOWNER.SIZE_MB,0),
			COALESCE(TOWNER.SIZE_MB_CHARGEABLE,0),

			COALESCE(TCONTACT.NAME,''''),
			COALESCE(TCONTACT.FIRSTNAME,''''),
			COALESCE(TCONTACT.PREFIX,''''),
			COALESCE(TCONTACT.EMAIL,''''),
			COALESCE(TCONTACT.TEL,''''),
			COALESCE(TCONTACT.ADDRESS,''''),
			COALESCE(TCONTACT.POSTCODE,''''),
			COALESCE(TCONTACT.REGION,''''),
			COALESCE(TCONTACT.CITY,''''),
			COALESCE(TCONTACT.COUNTRY,''''),
			COALESCE(TCONTACT.ORGANIZATION,''''),
			COALESCE(TCONTACT.SERVICE,''''),
			COALESCE(TCONTACT.IDENTIFIER,''''),
			COALESCE(TCONTACT.CELLTEL,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.MODIF_DATE)),
			COALESCE(TCONTACT.STATE,0)
            
        FROM TOWNER LEFT JOIN TCONTACT ON TOWNER.TCONTACT_ID=TCONTACT.ID' || IIF (:SQL_WHERE_OWNER != '' ,' WHERE ' || :SQL_WHERE_OWNER, '') || '
        ORDER BY TOWNER.SUBDOMAIN;'
        INTO 
			:OWNER_ID,
			:OWNER_NAME,
			:OWNER_SUBDOMAIN,
			:OWNER_LOGIN,
			:OWNER_STATE,
			:OWNER_CREATE_DATE,
			:OWNER_MODIF_DATE,
			:OWNER_SUBSCRIBE_START,
			:OWNER_SUBSCRIBE_END,
			:OWNER_EXTERNAL_ID,
			:OWNER_COMMENT,
			:PROFILE_ID,
			:CONTACT_ID,
			:OWNER_ISADMIN,
			:OWNER_SIZE_MB,
			:OWNER_SIZE_MB_CHARGEABLE,
			-- Ajout V22
			:CONTACT_NAME,
			:CONTACT_FIRSTNAME, 
			:CONTACT_PREFIX ,
			:CONTACT_EMAIL,
			:CONTACT_TEL,
			:CONTACT_ADDRESS,
			:CONTACT_POSTCODE,
			:CONTACT_REGION,
			:CONTACT_CITY,
			:CONTACT_COUNTRY,

			-- Ajout V32
			:CONTACT_ORGANIZATION,
			:CONTACT_SERVICE,
			:CONTACT_IDENTIFIER,
			:CONTACT_CELLTEL,

            :CONTACT_CREATE_DATE,
            :CONTACT_MODIF_DATE,
			:CONTACT_STATE 			

    DO
    BEGIN
        -- Ajout V22
        SELECT CONTTYPES_INFOS FROM GET_CONTTYPE_MDF(:CONTACT_ID) INTO :CONTTYPES_INFOS;

        -- Ajout V24
        SELECT GEDPARAMOWNERS_INFOS FROM GET_GEDPARAMOWNER_MDF(:OWNER_ID) INTO GEDPARAMOWNERS_INFOS;
        
        SUSPEND;
    END
    
END ^

ALTER PROCEDURE GET_OWNER_ID (I_TOWNER_LOGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TOWNER_PASSWD VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
PROFILE_ID INTEGER,
CONTACT_ID INTEGER,
OWNER_STATE STATE)
AS 
/*
	Recherche d'un code identifiant d'utilisateur du domaine dans la table "TOWNER"

    Attend :
	- I_TOWNER_LOGIN : Login d'un utilisateur
	- I_TOWNER_DOM_PASSWD : password (haché SHA2556) d'un utilisateur
	- OWNER_STATE : Etat particulier de propriétaire (NULL ou non passé ==> 1 ==> actif par défaut) (voir commentaire procédure GET_STATE_CRITERIA)
    

	renvoi l'ID  etstate du owner
	
	Des erreurs sont levées si le login et/ou le password sont incorrect...

MAJ V12 :
	- DOM_LOGIN/DOM_PASSWD ==> LOGIN/PASSWD

MAJ V20 :
    - PASSWD non obligatoire en entrée et test seulement sur LOGIN si PASSWD non passé
    ==> Gestion des sessions NAS
    
MAJ V22 :
    - Ajout de TCONTACT_ID et TPROFILE_ID en sortie
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE PASSWD VARCHAR(100); 

BEGIN

    I_TOWNER_STATE= TRIM(I_TOWNER_STATE);
    
    SQL_WHERE_OWNER = '';
    
    IF (:I_TOWNER_STATE ='' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    /* Nettoyage des paramètres */
    I_TOWNER_LOGIN = TRIM(:I_TOWNER_LOGIN);
    I_TOWNER_PASSWD = TRIM(UPPER(:I_TOWNER_PASSWD));

	EXECUTE STATEMENT 
        'SELECT ID,PASSWD,STATE, COALESCE(TPROFILE_ID,0), COALESCE(TCONTACT_ID,0) FROM TOWNER
        WHERE LOGIN =''' || :I_TOWNER_LOGIN || '''' || IIF (SQL_WHERE_OWNER != '',' AND ' || SQL_WHERE_OWNER, '') || ';'
		INTO :OWNER_ID, :PASSWD, :OWNER_STATE, :PROFILE_ID, CONTACT_ID;

    -- Non trouvé...
    IF (:OWNER_ID IS NULL) THEN EXCEPTION EX_BAD_DOM_LOGIN;

		
	IF (I_TOWNER_PASSWD!='' AND (UPPER(:PASSWD)!=:I_TOWNER_PASSWD)) THEN EXCEPTION EX_BAD_DOM_PASSWD;
		
	/* Ici, tout est ok, on renvoit donc l'ID et le flag d'activité */
	SUSPEND;
		
END ^

ALTER PROCEDURE GET_OWNER_INFOS (I_TOWNER_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
OWNER_NAME VARCHAR(100) CHARACTER SET UTF8,
OWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8,
OWNER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
OWNER_PASSWD VARCHAR(100) CHARACTER SET UTF8,
OWNER_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8,
OWNER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8,
OWNER_EXTERNAL_ID VARCHAR(100) CHARACTER SET UTF8,
OWNER_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
OWNER_ISADMIN BOOLEAN,
OWNER_SIZE_MB BIGINT,
OWNER_SIZE_MB_CHARGEABLE BIGINT,
CONTACT_ID INTEGER,
CONTACT_NAME VARCHAR(150) CHARACTER SET UTF8,
CONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8,
CONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8,
CONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8,
CONTACT_TEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8,
CONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8,
CONTACT_REGION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CITY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8,
CONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8,
CONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8,
CONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8,
CONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8,
CONTACT_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
CONTTYPES_INFOS BLOB CHARACTER SET UTF8,
GEDPARAMOWNERS_INFOS BLOB CHARACTER SET UTF8,
PROFILE_ID INTEGER,
OWNER_STATE STATE,
CONTACT_STATE STATE)
AS 
/*
    Renvoit les informations détaillées associées à un propriétaire
    Il est possible qu'il y en ai aucun (pas de propriétaire visible/actif avec ID donné)
    ==> recordset vide
    Attend :
    - I_TOWNER_ID : un code numérique identifiant de propriétaire (FK TOWNER)
    
MAJ V12 :
    - Ajout TCONTACT_ID
	- DOM_LOGIN ==> LOGIN

MAJ V14 :
	- ajout de l'empreinte SHA du password (pour exploitation par les scripts en "interne NAS", ie seulement les scripts serveur... Le flux json éponyme renvoyé par le NAS n'est pas censé retourner cette valeur)

V22 :
    - Ajout informations détaillées CONTACT pour améliorations performances NAS

MAJ V 24 :
    - CONTTYPES_INFOS renvoyé en tant que BLOB
	- Ajout GEDPARAMOWNERS_INFOS

MAJ V31 :
	- Ajout SIZE_MB + SIZE_MB_CHARGEABLE

MAJ V32 :
	- Ajout de ORGANIZATION, etc...
*/
DECLARE VARIABLE REC_FOUND INTEGER;
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);

BEGIN

    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);

    REC_FOUND=0;

    SQL_WHERE_OWNER = '';
    
    IF (:I_TOWNER_STATE ='' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    FOR EXECUTE STATEMENT '
        SELECT
            TOWNER.ID,
            TOWNER.NAME,
			TOWNER.SUBDOMAIN,
            TOWNER.LOGIN,
			TOWNER.PASSWD,
            TOWNER.STATE,
            (SELECT DATE_STRING FROM GET_DATE_STRING(TOWNER.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TOWNER.MODIF_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TOWNER.SUBSCRIBE_START)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TOWNER.SUBSCRIBE_END)),
            COALESCE(TOWNER.EXTERNAL_ID,''''),
            COALESCE(TOWNER."COMMENT",''''),
            COALESCE(TOWNER.TPROFILE_ID,0),
            COALESCE(TOWNER.TCONTACT_ID,0),
            (SELECT OWNER_ADMIN FROM GET_OWNER_IS_ADMIN(TOWNER.ID)) AS IS_ADMIN,
			COALESCE(TOWNER.SIZE_MB,0),
			COALESCE(TOWNER.SIZE_MB_CHARGEABLE,0),
            
            -- Ajout V22
			COALESCE(TCONTACT.NAME,''''),
			COALESCE(TCONTACT.FIRSTNAME,''''),
			COALESCE(TCONTACT.PREFIX,''''),
			COALESCE(TCONTACT.EMAIL,''''),
			COALESCE(TCONTACT.TEL,''''),
			COALESCE(TCONTACT.ADDRESS,''''),
			COALESCE(TCONTACT.POSTCODE,''''),
			COALESCE(TCONTACT.REGION,''''),
			COALESCE(TCONTACT.CITY,''''),
			COALESCE(TCONTACT.COUNTRY,''''),
			COALESCE(TCONTACT.ORGANIZATION,''''),
			COALESCE(TCONTACT.SERVICE,''''),
			COALESCE(TCONTACT.IDENTIFIER,''''),
			COALESCE(TCONTACT.CELLTEL,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.CREATE_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TCONTACT.MODIF_DATE)),
			COALESCE(TCONTACT.STATE,0)
            
        FROM TOWNER
            LEFT JOIN TCONTACT ON TOWNER.TCONTACT_ID=TCONTACT.ID
        WHERE TOWNER.ID=' || :I_TOWNER_ID || IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO 
			:OWNER_ID,
			:OWNER_NAME,
			:OWNER_SUBDOMAIN,
			:OWNER_LOGIN,
			:OWNER_PASSWD,
			:OWNER_STATE,
			:OWNER_CREATE_DATE,
			:OWNER_MODIF_DATE,
			:OWNER_SUBSCRIBE_START,
			:OWNER_SUBSCRIBE_END,
			:OWNER_EXTERNAL_ID,
			:OWNER_COMMENT,
			:PROFILE_ID,
            :CONTACT_ID,
			:OWNER_ISADMIN,
			:OWNER_SIZE_MB,
			:OWNER_SIZE_MB_CHARGEABLE,
			
            -- Ajout V22
			:CONTACT_NAME,
			:CONTACT_FIRSTNAME, 
			:CONTACT_PREFIX ,
			:CONTACT_EMAIL,
			:CONTACT_TEL,
			:CONTACT_ADDRESS,
			:CONTACT_POSTCODE,
			:CONTACT_REGION,
			:CONTACT_CITY,
			:CONTACT_COUNTRY,

			-- Ajout V32
			:CONTACT_ORGANIZATION,
			:CONTACT_SERVICE,
			:CONTACT_IDENTIFIER,
			:CONTACT_CELLTEL,

            :CONTACT_CREATE_DATE,
            :CONTACT_MODIF_DATE,
			:CONTACT_STATE 			
			
    	DO
        BEGIN
            REC_FOUND=:REC_FOUND+1;
            -- Ajout V22
            SELECT CONTTYPES_INFOS FROM GET_CONTTYPE_MDF(:CONTACT_ID) INTO :CONTTYPES_INFOS;
            -- Ajout V24
            SELECT GEDPARAMOWNERS_INFOS FROM GET_GEDPARAMOWNER_MDF(:OWNER_ID) INTO GEDPARAMOWNERS_INFOS;
            
            SUSPEND;
        END

    IF (REC_FOUND=0) THEN EXCEPTION EX_NOOWNER;
END ^

ALTER PROCEDURE GET_OWNER_IS_ADMIN (I_TOWNER_ID INTEGER NOT NULL)
RETURNS (OWNER_ADMIN BOOLEAN,
OWNER_STATE STATE)
AS 
/*
    Renvoi True si un utlisateur donné est administrateur du domaine (ne répond qu'à cette question, voir plus loin)
    2 cas :
        - administrateur principal : ID = -1
        - autres administrateur : état contient "DOM_OWNER_ADMIN" (4)
        
        Attention : Cette procédure ne prend pas en compte les autres états éventuellement positionné sur le STATE,
        donc si un OWNER est DELETED, par exemple, cette procédure renverra quand même OWNER_ADMIN = 1
        Autrement dit, on ne teste ici que l'état admin SANS prendre en compte les autres états possibles dans STATE...

V17 :
    - Nouvelle Gestion SECTION TDOMPARAM
*/

BEGIN

    I_TOWNER_ID= TRIM(I_TOWNER_ID);
    
    /* Existence du owner demandé */
    IF (NOT EXISTS(SELECT ID FROM TOWNER WHERE ID=:I_TOWNER_ID)) THEN EXCEPTION EX_NOOWNER;

    /* On se base sur un paramètre de domaine ou la valeur 4 si ce dernier n'est pas trouvé */
    FOR EXECUTE STATEMENT
        'SELECT IIF(ID=-1 OR BIN_AND(COALESCE((SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM(''DOMAIN'',''OWNER_ADMIN'')),4),STATE)!=0,1,0), STATE FROM TOWNER WHERE ID=' || :I_TOWNER_ID
        INTO :OWNER_ADMIN, :OWNER_STATE
    DO
        SUSPEND;
    
END ^

ALTER PROCEDURE GET_PROFILES_FOR_OWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
LIBRARY_ID INTEGER,
GEDUSER_ID INTEGER,
PROFILE_ID INTEGER,
PROFILE_NAME VARCHAR(100) CHARACTER SET UTF8,
PROFILE_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
PROFILE_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
PROFILE_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
FBSERVER_ID INTEGER,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
FBSERVER_STATE STATE,
GEDUSER_STATE STATE)
AS 
/*
    Renvoie les Profils d'un Propriétaire donnée
	(Attention, pas le profil par défaut associé au propriétaire)
    Il est possible qu'il y en ai aucun (pas de profile visible/actif avec ID donné)
    ==> recordset vide

    Attend :
    - I_TOWNER_ID : un code numérique identifiant Propiétaire
    
	Les démarches suivantes sont appliquées :
	- Si LIB_ID et GEDUSER_ID ne sont pas fournis, on renvoie tous les profils affectés à une LIB et/ou un GEDUSER (ie les profils globaux)
	- Si un LIB_ID est fourni, on renvoi tous les profils associés à cette LIB seulement (et aucun autre) et à aucun GEDUSER
        - Si un GEDUSER_ID est fourni et =TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL, on renvoie tous les profils associés à cette LIB pour tous les GEDUSERS
	- Si un GEDUSER_ID est fourni et >0, on renvoie tous les profils de ce GEDUSER (et aucun autre) et à aucune LIBRARY
	- Si LIB_ID ET GEDUSER_ID sont fournis on ne renvoie que les profils associés à ce GEDUSER et cette LIB
	
	ATTENTION : MAJ V40, les principes énnoncés ci-dessus ne sont PLUS les bons (systématisation des paramètres NULL), on dit maintenant :
	- Si LIB_ID et/ou GEDUSER_ID ne sont pas fourni (ie passé à 0) : on en tient pas compte en critère
	- Si LIB_ID = TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL ou GEDUSER_ID = = TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL : on recherche explicitement les uns ou les autres à NULL
	- Sinon, on echerche avec les ID passés...
    
V18 :
	- Force les paramètres NOT NULL En entrée...
	
V 36 :
    - GEDUSER_ID =TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL en entrée pour récupérer tous les profils de LIB...
    
V40 :
    - Systématisation des paramètres représentant NULL en entrée (utilisation de TDOMPARAM:DOMAIN/PARAM_EQUIV_NULL)
    
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_PROFILE VARCHAR(8000);

DECLARE VARIABLE NULL_PARAM INTEGER;

DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);

    SQL_WHERE_OWNER= '';
    SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
    -- Dummy WHERE pour simplification des concaténations...
	SQL_WHERE_PROFILE='1=1';

	ID_OK = Null;
	
    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    EXECUTE STATEMENT '
        SELECT ID FROM TOWNER
        WHERE ID=' || :I_TOWNER_ID || IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
        INTO ID_OK;
        
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;
    
    -- Ajout des critères OWNER
    SQL_WHERE_PROFILE = :SQL_WHERE_PROFILE || ' AND TPROFILE.TOWNER_ID=' || :I_TOWNER_ID;
    
	-- Récupération du DOM_PARAM représentant la recherche de valeur NULL
	NULL_PARAM=COALESCE((SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('DOMAIN','PARAM_EQUIV_NULL')),-9);
	
	IF (I_TLIBRARY_ID = NULL_PARAM) THEN
        SQL_WHERE_PROFILE = :SQL_WHERE_PROFILE || ' AND TPROFILE.TLIBRARY_ID IS NULL';
    ELSE
    BEGIN
        IF (I_TLIBRARY_ID!=0) THEN
        BEGIN
            IF (I_TLIBRARY_STATE = '') THEN
                /* Etat de visibilité par défaut */
                SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
            ELSE 
                /* Etat de visibilité demandé */
                SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
                
            -- Ajout du STATE pour gestion LEFT JOIN
            SQL_WHERE_LIB=IIF(SQL_WHERE_LIB!='', ' AND (' || SQL_WHERE_LIB || ' OR TLIBRARY.STATE IS NULL)','');

           /* Serveur Firebird (si non Null) utilisable outrepassable...*/
            IF (:I_TFBSERVER_STATE = '' ) THEN
                /* Etat de visibilité par défaut */
                SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
            ELSE 
                /* Etat de visibilité demandé */
                SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

            -- Ajout du STATE pour gestion LEFT JOIN
            SQL_WHERE_FBSERVER=IIF(SQL_WHERE_FBSERVER!='', ' AND (' || SQL_WHERE_FBSERVER || ' OR TFBSERVER.STATE IS NULL)','');
                
            -- Ajout des critères LIBRARY
            SQL_WHERE_PROFILE = :SQL_WHERE_PROFILE || ' AND TPROFILE.TLIBRARY_ID=' || :I_TLIBRARY_ID || :SQL_WHERE_LIB || :SQL_WHERE_FBSERVER;
            
        END
    END

    -- Modif V40 : systématisation des paramètres représentant NULL en entrée
    IF (I_TGEDUSER_ID = NULL_PARAM) THEN
        SQL_WHERE_PROFILE = :SQL_WHERE_PROFILE || ' AND TPROFILE.TGEDUSER_ID IS NULL';
    ELSE
    BEGIN
        IF (I_TGEDUSER_ID!=0) THEN
        BEGIN
            IF (I_TGEDUSER_STATE = '') THEN
                /* Etat de visibilité par défaut */
                SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
            ELSE 
                /* Etat de visibilité demandé */
                SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;

            -- Ajout du STATE pour gestion LEFT JOIN
            SQL_WHERE_GEDUSER=IIF(SQL_WHERE_GEDUSER!='', ' AND (' || SQL_WHERE_GEDUSER || ' OR TGEDUSER.STATE IS NULL)','');

            -- Ajout des critères GEDUSER
            SQL_WHERE_PROFILE=:SQL_WHERE_PROFILE || ' AND TPROFILE.TGEDUSER_ID=' || :I_TGEDUSER_ID || :SQL_WHERE_GEDUSER;
        END
    END

/*
-- DEBUG
PROFILE_COMMENT=:SQL_WHERE_PROFILE;
SUSPEND;
EXIT;
*/

	FOR
        EXECUTE STATEMENT '
            SELECT
                TPROFILE.TOWNER_ID,
                TPROFILE.ID,
                COALESCE(TPROFILE.TLIBRARY_ID,0),
                COALESCE(TPROFILE.TGEDUSER_ID,0),
                COALESCE(TLIBRARY.TFBSERVER_ID,0),
                TOWNER.STATE AS TOWNER_STATE,
                COALESCE(TLIBRARY.STATE,0),
                COALESCE(TFBSERVER.STATE,0),
                COALESCE(TGEDUSER.STATE,0),
                
                -- Ajout V22
                TPROFILE.NAME,
                COALESCE(TPROFILE."COMMENT",''''),
				(SELECT DATE_STRING FROM GET_DATE_STRING(TPROFILE.CREATE_DATE)),
				(SELECT DATE_STRING FROM GET_DATE_STRING(TPROFILE.MODIF_DATE))
                
            FROM 
                TPROFILE
                    INNER JOIN TOWNER ON TOWNER.ID=TPROFILE.TOWNER_ID
                    LEFT JOIN TLIBRARY ON TPROFILE.TLIBRARY_ID=TLIBRARY.ID
                        LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
                    LEFT JOIN TGEDUSER ON TPROFILE.TGEDUSER_ID=TGEDUSER.ID
            WHERE ' || :SQL_WHERE_PROFILE || 
            ' 
            ORDER BY TPROFILE.ID'
        INTO
            :OWNER_ID,
            :PROFILE_ID,
            :LIBRARY_ID,
            :GEDUSER_ID,
            :FBSERVER_ID,
            :OWNER_STATE,
            :LIBRARY_STATE,
            :FBSERVER_STATE,
            :GEDUSER_STATE,
            -- Ajout V22
            :PROFILE_NAME,
			:PROFILE_COMMENT,
			:PROFILE_CREATE_DATE,
			:PROFILE_MODIF_DATE
        
        DO
			SUSPEND;

END ^

ALTER PROCEDURE GET_PROFILE_FOR_GEDGROUPLIB (I_TLIBRARY_ID INTEGER NOT NULL,
I_TGEDGROUP_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
GEDGROUP_ID INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
    Renvoie le Profil lié à une bibliothèque et un Groupe d'utilisateur GED dans la table TGEDGROUPLIB (il peut y en avoir qu'un ou aucun...)

V32
	- Création...
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

	ID_OK = Null;
	SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
    
    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
	/* Même OWNER pour TLIBRARY, TPROFILE et TGEDUSER */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

   /* Serveur Firebird (si non Null) utilisable outrepassable...*/
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

   -- Library existante et modifiable...
    IF (:I_TLIBRARY_STATE ='' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

    /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TLIBRARY.ID
		FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;

	ID_OK = Null;

    /* Existence/visibilité du groupe d'utilisateur GED lui-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TGEDGROUP.ID
		FROM TGEDGROUP INNER JOIN TOWNER ON TGEDGROUP.TOWNER_ID=TOWNER.ID
        WHERE TGEDGROUP.ID=' || :I_TGEDGROUP_ID ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDGROUP;

	/* Recherche des Profils */
	FOR
		SELECT
			TGEDGROUPLIB.TLIBRARY_ID,
			TGEDGROUPLIB.TGEDGROUP_ID,
			TGEDGROUPLIB.TPROFILE_ID,
			TLIBRARY.TOWNER_ID,
			COALESCE(TFBSERVER.ID,0),
			TLIBRARY.STATE,
            TOWNER.STATE,
			COALESCE(TFBSERVER.STATE,0)
		FROM
            TGEDGROUPLIB INNER JOIN TGEDGROUP ON TGEDGROUPLIB.TGEDGROUP_ID = TGEDGROUP.ID
            INNER JOIN TLIBRARY  ON TGEDGROUPLIB.TLIBRARY_ID=TLIBRARY.ID
                INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
                LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
		WHERE
			TGEDGROUPLIB.TLIBRARY_ID=:I_TLIBRARY_ID AND TGEDGROUPLIB.TGEDGROUP_ID=:I_TGEDGROUP_ID
		INTO
			:LIBRARY_ID,
			:GEDGROUP_ID,
			:PROFILE_ID,
			:OWNER_ID,
			:FBSERVER_ID,
			:LIBRARY_STATE,
			:OWNER_STATE,
			:FBSERVER_STATE
	DO
		SUSPEND;
END ^

ALTER PROCEDURE GET_PROFILE_FOR_GEDUSERLIB (I_TLIBRARY_ID INTEGER NOT NULL,
I_TGEDUSER_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER,
GEDUSER_ID INTEGER,
PROFILE_ID INTEGER,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
LIBRARY_STATE STATE,
OWNER_STATE STATE,
FBSERVER_STATE STATE,
GEDUSER_STATE STATE)
AS 
/*
    Renvoie le Profil lié à une bibliothèque et un Utilisateur GED dans la table TGEDUSERLIB (il peut y en avoir qu'un ou aucun...)
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);

	ID_OK = Null;
	SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
	SQL_WHERE_GEDUSER = '';
    
    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
	/* Même OWNER pour TLIBRARY, TPROFILE et TGEDUSER */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

   /* Serveur Firebird (si non Null) utilisable outrepassable...*/
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

   -- Library existante et modifiable...
    IF (:I_TLIBRARY_STATE ='' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

    /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TLIBRARY.ID
		FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;

	ID_OK = Null;

    IF (I_TGEDUSER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;

    /* Existence/visibilité de l'utilisateur GED lui-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TGEDUSER.ID
		FROM TGEDUSER INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
        WHERE TGEDUSER.ID=' || :I_TGEDUSER_ID ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '') ||
            IIF (:SQL_WHERE_GEDUSER != '' ,' AND ' || :SQL_WHERE_GEDUSER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDUSER;

	/* Recherche des Profils */
	FOR
		SELECT
			TGEDUSERLIB.TLIBRARY_ID,
			TGEDUSERLIB.TGEDUSER_ID,
			TGEDUSERLIB.TPROFILE_ID,
			TGEDUSER.TOWNER_ID,
			COALESCE(TFBSERVER.ID,0),
			TLIBRARY.STATE,
            TOWNER.STATE,
			COALESCE(TFBSERVER.STATE,0),
			TGEDUSER.STATE
		FROM
            TGEDUSERLIB INNER JOIN TGEDUSER ON TGEDUSERLIB.TGEDUSER_ID = TGEDUSER.ID
                INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
            INNER JOIN TLIBRARY  ON TGEDUSERLIB.TLIBRARY_ID=TLIBRARY.ID
                LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
		WHERE
			TGEDUSERLIB.TLIBRARY_ID=:I_TLIBRARY_ID AND TGEDUSERLIB.TGEDUSER_ID=:I_TGEDUSER_ID
		INTO
			:LIBRARY_ID,
			:GEDUSER_ID,
			:PROFILE_ID,
			:OWNER_ID,
			:FBSERVER_ID,
			:LIBRARY_STATE,
			:OWNER_STATE,
			:FBSERVER_STATE,
			:GEDUSER_STATE
	DO
		SUSPEND;
END ^

ALTER PROCEDURE GET_PROFILE_INFOS (I_TPROFILE_ID INTEGER NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (PROFILE_ID INTEGER,
PROFILE_NAME VARCHAR(100) CHARACTER SET UTF8,
OWNER_ID INTEGER,
PROFILE_COMMENT VARCHAR(8164) CHARACTER SET UTF8,
LIBRARY_ID INTEGER,
GEDUSER_ID INTEGER,
PROFILE_CREATE_DATE VARCHAR(20) CHARACTER SET UTF8,
PROFILE_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
FBSERVER_ID INTEGER,
OWNER_STATE STATE,
LIBRARY_STATE STATE,
GEDUSER_STATE STATE,
FBSERVER_STATE STATE)
AS 
/*
    Renvoie les informations détaillées associées à un profil 
    Il est possible qu'il y en ai aucun (pas de profile visible/actif avec ID donné)
    ==> recordset vide

    Attend :
    - I_TPROFILE_ID : un code numérique identifiant 

V18 :
	- force paramètres NOT NULL
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);

DECLARE VARIABLE REC_FOUND INTEGER;

BEGIN

    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);

    REC_FOUND=0;

    SQL_WHERE_LIB = '';
	SQL_WHERE_OWNER = '';
	SQL_WHERE_FBSERVER='';
	SQL_WHERE_GEDUSER='';
	
    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER;

    IF (:I_TLIBRARY_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB;

    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;

    IF (:I_TGEDUSER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;

	FOR
        EXECUTE STATEMENT '
            SELECT
                TPROFILE.ID,
                TPROFILE.NAME,
                TPROFILE.TOWNER_ID,
                COALESCE(TPROFILE."COMMENT",''''),
                COALESCE(TPROFILE.TLIBRARY_ID,0),
				COALESCE(TPROFILE.TGEDUSER_ID, 0),
				(SELECT DATE_STRING FROM GET_DATE_STRING(TPROFILE.CREATE_DATE)),
				(SELECT DATE_STRING FROM GET_DATE_STRING(TPROFILE.MODIF_DATE)),
				COALESCE(TLIBRARY.TFBSERVER_ID,0),
                TOWNER.STATE AS TOWNER_STATE,
                COALESCE(TLIBRARY.STATE,0),
				COALESCE(TGEDUSER.STATE,0),
                COALESCE(TFBSERVER.STATE,0)
            FROM 
                TPROFILE INNER JOIN TOWNER ON TOWNER.ID=TPROFILE.TOWNER_ID
                    LEFT JOIN TLIBRARY ON TPROFILE.TLIBRARY_ID=TLIBRARY.ID
                        LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
                    LEFT JOIN TGEDUSER ON TPROFILE.TGEDUSER_ID=TGEDUSER.ID
            WHERE
                TPROFILE.ID=' || :I_TPROFILE_ID ||
                    IIF (:SQL_WHERE_OWNER != '' , ' AND ' || :SQL_WHERE_OWNER, '') || 
                    IIF (:SQL_WHERE_LIB != '' , ' AND (' || :SQL_WHERE_LIB || 'OR TLIBRARY.STATE IS NULL)', '') || -- Attention LIB LEFT JOIN...
                    IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
                    IIF (:SQL_WHERE_GEDUSER != '' , ' AND (' || :SQL_WHERE_GEDUSER || 'OR TGEDUSER.STATE IS NULL)', '') || -- Attention GEDUSER LEFT JOIN...
            '
            ORDER BY TPROFILE.ID'
        INTO
            :PROFILE_ID,
            :PROFILE_NAME,
            :OWNER_ID,
			:PROFILE_COMMENT,
			:LIBRARY_ID,
			:GEDUSER_ID,
			:PROFILE_CREATE_DATE,
			:PROFILE_MODIF_DATE,
			:FBSERVER_ID,
            :OWNER_STATE,
            :LIBRARY_STATE,
			:GEDUSER_STATE,
            :FBSERVER_STATE
        
        DO
    BEGIN
        REC_FOUND=:REC_FOUND+1;
        SUSPEND;
    END

    IF (REC_FOUND=0) THEN EXCEPTION EX_NOPROFILE;
END ^

ALTER PROCEDURE GET_STATES (I_TARGETED_TABLE VARCHAR(255) CHARACTER SET UTF8 NOT NULL,
I_CRITERIA VARCHAR(8000) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_RETURN_COLUMN VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT 'ID',
I_TARGETED_COLUMN VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT 'STATE')
RETURNS (COLUMN_ID VARCHAR(8000) CHARACTER SET UTF8,
STATE STATE)
AS 
/*
    Cette procédure renvoi l'état d'une colonne STATE pour des enregistrements donnés
    
    Attend :
    - I_TARGETED_TABLE : nom d'une table à impacter
    - I_CRITERIA : critère à appliquer pour la mise à jour
    - I_RETURN_COLUMN  : Nom d'une colonne devant accompagné le résultat
    - I_TARGETED_COLUMN : Nom de la colonne STATE dans I_TARGETED_TABLE ('STATE' par défaut)
    
    Retourne :
    - COLUMN_ID : Valeur de la colonne "I_RETURN_COLUMN" au format VARCHAR (Attention à convertir cette valeur dans le résultat, le cas échéant)
    - STATE : Etat 
        
V31 :
	- Exception spécifique
*/

BEGIN

    I_CRITERIA = TRIM(:I_CRITERIA);
    I_TARGETED_TABLE = TRIM(:I_TARGETED_TABLE);
    I_TARGETED_COLUMN= TRIM(I_TARGETED_COLUMN);
    I_RETURN_COLUMN = TRIM(I_RETURN_COLUMN);
    
    IF (NOT EXISTS 
        (SELECT RDB$RELATION_NAME FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME=:I_TARGETED_TABLE AND RDB$FIELD_NAME=:I_TARGETED_COLUMN AND RDB$SYSTEM_FLAG=0)
        ) THEN
        EXCEPTION EX_NOTABLEORCOL;
    IF (NOT EXISTS 
        (SELECT RDB$RELATION_NAME FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME=:I_TARGETED_TABLE AND RDB$FIELD_NAME=:I_RETURN_COLUMN AND RDB$SYSTEM_FLAG=0)
        ) THEN
        EXCEPTION EX_NOTABLEORCOL;

/*
    FOR EXECUTE STATEMENT '
        SELECT  ' || I_RETURN_COLUMN || ', ' || I_TARGETED_COLUMN || ' FROM ' || I_TARGETED_TABLE || IIF(I_CRITERIA='','',' WHERE ' || I_CRITERIA)
            INTO :COLUMN_ID, :STATE
    DO
        SUSPEND;
*/        
    
    FOR EXECUTE STATEMENT '
        SELECT  CAST(' || :I_RETURN_COLUMN || ' AS VARCHAR(8000)), ' || :I_TARGETED_COLUMN || ' FROM ' || :I_TARGETED_TABLE || IIF(:I_CRITERIA='','',' WHERE ' || :I_CRITERIA)
            INTO :COLUMN_ID, :STATE
    DO
        SUSPEND;
    
END ^

ALTER PROCEDURE GET_STATE_CRITERIA (I_EXPR_CRIT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL,
I_TARGETED_COLUMN VARCHAR(1000) CHARACTER SET UTF8 NOT NULL)
RETURNS (CRIT_FOR_STATE VARCHAR(1000) CHARACTER SET UTF8)
AS 
DECLARE VARIABLE OP_BIN CHAR(1);
DECLARE VARIABLE COMP_VAL INTEGER;
DECLARE VARIABLE COMP_VAL_STR VARCHAR(15);
/*
    Cette procédure renvoi une chaine de critère de test d'état (colonnes STATE dans les différentes tables)
    
    Attend :
    - I_EXPR_CRIT_STATE : une expression de critère sous la forme : opérateur+valeur (aucun espace ou autre caractère de séparation) où :
        -> Opérateur peut être :
        "=" pour "égal" (correspondance atomique dans la colonne cible),
        "#" pour "différent" (non correspondance atomique dans la colonne cible)
        "~" pour "correspond" (correspondance non atomique  dans la colonne cible, donc renvoi les enregistrements ayant les valeurs activées et d'autres)
        "&" pour "ne correspond pas" (non correpondance non atomique  dans la colonne cible, donc renvoi les enregistrements ayant les valeurs activées et d'autres)
        "*" pour aucun critère (nécessaire car, par défaut, les appelants initialise l'état à 0 et qu'il faut leur donner un moyen de demander tous les enregistrements)
        -> valeur peut-être toute valeur ou toute combinaison de valeur (doit être vide si I_EXPR_CRIT_STATE = "*")
    - I_TARGETED_COLUMN : nom d'une colonne (pleinement qualifiée préconisé)
    
    Retourne :
    - CRIT_FOR_STATE : une chaine correpond à un critère final construit et utilisable dans une clause WHERE
    
    Exemple :
    SELECT GET_STATE_CRITERIA('=2','COLNAME') ==> 'COLNAME=2'
    SELECT GET_STATE_CRITERIA('#2','COLNAME') ==> 'COLNAME!=2'
    SELECT GET_STATE_CRITERIA('~2','COLNAME') ==> 'BIN_AND(COLNAME,2)!=0'
    SELECT GET_STATE_CRITERIA('~2','COLNAME') ==> 'BIN_AND(COLNAME,2)=0'
    
    si "=" on cherche la valeur atomique (donc la valeur de la colonne doit être pleinement égale à celle de la valeur)
    si "~# on cherche la valeur présente (donc la valeur de la colonne soit au moins avoir cette valeur présente éventuellement cumulée avec d'autres)
    Donc, pour un enregistrement contenant la valeur STATE = 5 (donc les états 4 + 1) :
    '=5' ==> TRUE
    '=4' ==> FALSE
    '=1' ==> FALSE
    '~5' ==> TRUE
    '~4' ==> TRUE
    '~1' ==> TRUE
    '~2' ==> FALSE
    ...
    Il est possible de tester des combinaisons d'état, par exemple
    '~7' (4+2+1) va renvoyer les enregistrements qui ont TOUS ces états actifs et éventuellement d'autres
        par exemple un enregistrement ayant un état 15 (4 + 2 + 1 + 8) sera BIEN montré
    '=7' (4+2+1) va renvoyer les enregistrement qui correspondent exactement à 7 (si d'autres états sont positionnés, les enregitrements ne seront pas pris en compte,
        par exemple un enregistrement ayant un état 15 (4 + 2 + 1 + 8) ne sera PAS montré
*/
BEGIN
    I_EXPR_CRIT_STATE=TRIM(I_EXPR_CRIT_STATE);
    I_TARGETED_COLUMN=TRIM(I_TARGETED_COLUMN);

    /* Extraction de l'opérateur */
    OP_BIN = LEFT(I_EXPR_CRIT_STATE,1);
    IF (OP_BIN ='' OR (OP_BIN NOT IN ('=','#','~','&','*'))) THEN
        EXCEPTION EX_BAD_PARAM;
    
    /* Extraction de la valeur de comparaison */
    COMP_VAL_STR = TRIM(SUBSTRING(I_EXPR_CRIT_STATE FROM 2));
    IF (COMP_VAL_STR = '' AND I_EXPR_CRIT_STATE !='*') THEN
        EXCEPTION EX_BAD_PARAM;
    ELSE
        COMP_VAL=IIF(COMP_VAL_STR='',NULL,CAST(COMP_VAL_STR AS INTEGER));
    
    /* Égalité atomique */
    IF (OP_BIN = '=') THEN
        CRIT_FOR_STATE = :I_TARGETED_COLUMN || ' = ' || :COMP_VAL;
    /* Différence atomique */
    ELSE IF (OP_BIN = '#') THEN
        CRIT_FOR_STATE = :I_TARGETED_COLUMN || ' != ' || :COMP_VAL;
    /* Contient */
    ELSE IF (OP_BIN = '~') THEN
        CRIT_FOR_STATE = 'BIN_AND(' || :I_TARGETED_COLUMN || ',' || :COMP_VAL || ')!=0';
    /* Ne contient pas */
    ELSE IF (OP_BIN = '&') THEN
        CRIT_FOR_STATE = 'BIN_AND(' || :I_TARGETED_COLUMN || ',' || :COMP_VAL || ')=0';
    /* Tous les enregistrements ==> Pas de critère */
    ELSE IF (OP_BIN = '*') THEN
        CRIT_FOR_STATE = '';
    ELSE
        EXCEPTION EX_BAD_PARAM;
    
    SUSPEND;
    
END ^

ALTER PROCEDURE GET_STORAGES (I_TOWNER_ID INTEGER NOT NULL,
I_TSTORAGE_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TSTORAGE_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TSTORAGE_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TSTORAGE_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDUSER_ID INTEGER,
LIBRARY_ID INTEGER,
STORAGE_SECTION VARCHAR(40) CHARACTER SET UTF8,
STORAGE_NAME VARCHAR(80) CHARACTER SET UTF8,
STORAGE_VALUE VARCHAR(8000) CHARACTER SET UTF8,
STORAGE_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8)
AS 
/*
	Renvoie une liste (ou un seul) paramètre TSTORAGE

	Si TLIBRARY_ID et/ou TGEDUSER_ID est passé, on ne vérifie pas qu'il(s) corresponde(nt) au OWNER_ID...
	Les STATES OWNER/GEDUSER/LIBRARY ne sont PAS évaluées par cette procédure...
	On pratique par filtage successif sur les paramètres passés, DANS l'ORDRE de l'index "STORAGE_UNI" (pour l'accrocher)
	TODO :
		Revoir les index car si TOWNER et/ou SECTION/NAME non passée(s) on n'accroche pas l'index TSTORAGE_UNI
		Prévoi rdes index additionnels sur SECTION/NAME ?
	
	

V40 :
	- Création

*/


DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
DECLARE VARIABLE NULL_PARAM INTEGER;

BEGIN

    -- OWNER obligatoire si GEDUSER/LIBRARY non fourni
    IF (:I_TOWNER_ID=0 AND :I_TSTORAGE_TGEDUSER_ID<=0 AND I_TSTORAGE_TLIBRARY_ID<=0) THEN
        EXCEPTION EX_BAD_PARAM;
    
    -- dummy WHERE pour OWNER_ID non passé...
    -- Dans ce cas, on n'accroche pas l'index :-(
    SQL_WHERE=IIF(:I_TOWNER_ID!=0,'TOWNER_ID=' || :I_TOWNER_ID,'1=1');
        
    I_TSTORAGE_NAME = TRIM(:I_TSTORAGE_NAME);
    I_TSTORAGE_SECTION = TRIM(:I_TSTORAGE_SECTION);
    
    SQL_WHERE=:SQL_WHERE || IIF(:I_TSTORAGE_SECTION!='',' AND SECTION=''' || :I_TSTORAGE_SECTION ||'''','');
    
    SQL_WHERE=:SQL_WHERE || IIF(:I_TSTORAGE_NAME!='',' AND "NAME"=''' || :I_TSTORAGE_NAME ||'''','');

	-- Récupération du DOM_PARAM représentant la recherche de valeur NULL
	NULL_PARAM=COALESCE((SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('DOMAIN','PARAM_EQUIV_NULL')),-9);
    
    IF (:I_TSTORAGE_TGEDUSER_ID!=0) THEN
        SQL_WHERE=:SQL_WHERE || ' AND TGEDUSER_ID' || IIF(:I_TSTORAGE_TGEDUSER_ID=NULL_PARAM,' IS NULL', '=' || :I_TSTORAGE_TGEDUSER_ID);
    
    IF (:I_TSTORAGE_TLIBRARY_ID!=0) THEN
        SQL_WHERE=:SQL_WHERE || ' AND TLIBRARY_ID' || IIF(:I_TSTORAGE_TLIBRARY_ID=NULL_PARAM,' IS NULL', '=' || :I_TSTORAGE_TLIBRARY_ID);
        
    FOR EXECUTE STATEMENT
        'SELECT 
            TOWNER_ID,
            COALESCE(TGEDUSER_ID,0),
            COALESCE(TLIBRARY_ID,0),
            SECTION,
            NAME,
            "VALUE",
            (SELECT DATE_STRING FROM GET_DATE_STRING(MODIF_DATE))
        FROM TSTORAGE
        WHERE ' ||:SQL_WHERE
        INTO
            :OWNER_ID,
            :GEDUSER_ID,
            :LIBRARY_ID,
            :STORAGE_SECTION,
            :STORAGE_NAME,
            :STORAGE_VALUE,
            :STORAGE_MODIF_DATE
            
        DO
            SUSPEND;
END ^

ALTER PROCEDURE GET_SUBDOMAIN_EXISTS (I_TOWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
PROFILE_ID INTEGER)
AS 
/*
    Renvoi l'ID du propriétaire d'un sous domaine donné
    
    Attend :
    - I_TOWNER_SUBDOMAIN : Nom du sous-domaine recherché (UNIQUE)
    
    Retourne :
    - OWNER_ID : Code du propriétaire ou vide si non trouvé...
    
    NB : Cette procédure ne lève pas d'exception en cas de sous-domain inexistant OU non visible (OWNER.STATE)
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);

BEGIN
    SQL_WHERE_OWNER = '';
    
    IF (:I_TOWNER_STATE ='' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_VISIBILITY FROM GET_VISIBILITY_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    FOR EXECUTE STATEMENT
        'SELECT
            ID,
            COALESCE(TOWNER.TPROFILE_ID,0)
        FROM TOWNER
		WHERE SUBDOMAIN=''' || :I_TOWNER_SUBDOMAIN || '''' || IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
		INTO :OWNER_ID, PROFILE_ID
    DO
        SUSPEND;
END ^

ALTER PROCEDURE GET_VISIBILITY_STATE_OK (I_TARGETED_COLUMN VARCHAR(1000) CHARACTER SET UTF8 NOT NULL)
RETURNS (SQL_WHERE_DEFAULT_VISIBILITY VARCHAR(255) CHARACTER SET UTF8)
AS 
/*
    Cette procédure renvoit la valeur d'état de visibilité *par défaut*
    Rappel : Les procédures stockées de sélection permettent de modifier cet état par défaut par l'intermédiaire d'un paramètre formel, le cas échéant
    
    On utilise deux paramètres du domaine (DOM_RECORD_VISIBILITY_KO et ADM_RECORDS_VISIBILITY_KO) afin de connaitre les états NE PERMETTANT PAS la visualisation.
        - Le premier est rattaché à l'application (et ne devrait pas être modifié par d'autres personnes que les programmeurs)
        - Pour l'instant (V7) nous considérons que l'état 1 (deleted) ne doit jamais être affiché par défaut
        - Le second est laisser à la discrétion de l'administrateur de site afin qu'il gère ces propres états de non visibiité
        - La valeur de ce second paramètre est ajouté à la valeur du premier afin de déterminer, finalement, quels sont les enregistrements visibles ou pas...
    
    Ces paramètres doivent indiquer les combinaisons d'état ne permettant pas une visualisation, par exemple :
    - DOM_RECORDS_VISIBILITY_KO = 1
        ==> seuls les enregistrements STATE ne contenant pas 1 sont visibles (valeur par défaut)
    - ADM_RECORD_VISIBILITY_KO = 1 (inutile car cet état est déja considéré comme invisible par défaut dans DOM_RECORDS_VISIBILITY_KO)
    - DOM_RECORD_VISIBILITY_KO = 6 ==> seuls les enregistrements STATE = 0 ou état ne contient pas 1 (DOM_RECORDS_VISIBILITY_KO) ou état ne contient pas 2 ou état ne contient pas 4 sont visibles
        (attention, ce n'est pas la valeur atomique de la colonne qui est prise en compte, mais le ou les états présents ou non dans cette colonne)
	
V17 :
    - Nouvelle Gestion SECTION TDOMPARAM
*/

DECLARE VARIABLE STATE_TEST STATE;
BEGIN

	I_TARGETED_COLUMN=TRIM(I_TARGETED_COLUMN);
	IF (I_TARGETED_COLUMN = '') THEN EXCEPTION EX_BAD_PARAM;

    /*
    Si le paramètre DOM_RECORDS_ALTER_KO n'est pas trouvé, on essai avec (au moins) le paramètres des enregistrements supprimé (DOM_RECORD_DELETED)
    Si aucun des paramètres n'est disponible, on init en dur à 1
    */
    STATE_TEST=COALESCE((SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('DOMAIN','RECORDS_VISIBILITY_KO')),
        (SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')),1);

    /* Init des états Admin à tester */
    STATE_TEST=BIN_OR(:STATE_TEST,COALESCE((SELECT CAST(DOMPARAM_VALUE AS INTEGER) FROM GET_DOMPARAM('ADMIN','RECORDS_VISIBILITY_KO')),0)); 
    
    /*
    On compare la colonne par rapport au paramètre en ajoutant les états considérés comme devant être TOUJOURS masqués
    */
    SQL_WHERE_DEFAULT_VISIBILITY =  'BIN_AND(' || :I_TARGETED_COLUMN || ',' || :STATE_TEST || ')=0';
    
    SUSPEND;
    
END ^

ALTER PROCEDURE PURGE_ALL (I_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_PURGE_LOGSYNC BOOLEAN NOT NULL DEFAULT 0)
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
/*
	Purge des tables purgeables
	On appelle les PS de PURGE avec des paramètres 'standards'
	Cette PS ne puge *que* les enregistrements marqués DELETED dans les tables principales (et éventuellement les enfants dans les tables liées)
	Pour des purges plus fines (basées sur STATE/ou un ID particulier par exemple), il faut utiliser la PS PURGE_XXXX correspondante et lui passer les bons arguments
    
TODO : 
    
V34 :
    - Création
*/

BEGIN

    FOR SELECT RESULT FROM PURGE_OWNERS(0,:I_MODIF_DATE) INTO :RESULT
        DO SUSPEND;

    -- Suppression des TLIBRARY
    FOR SELECT RESULT FROM PURGE_LIBRARIES(0,:I_MODIF_DATE,0) INTO :RESULT
        DO SUSPEND;
    
    -- Suppression des contacts (non supprimés par PURGE_OWNERS)
    FOR SELECT RESULT FROM PURGE_CONTACTS(0,:I_MODIF_DATE,0) INTO :RESULT
        DO SUSPEND;

    -- Suppression des gedusers
    FOR SELECT RESULT FROM PURGE_GEDUSERS(0,:I_MODIF_DATE,0) INTO :RESULT
        DO SUSPEND;
        
    IF (I_PURGE_LOGSYNC!=0) THEN
    BEGIN
        -- On force la suppression en passant la date du jour +1 en paramètre
        FOR SELECT RESULT FROM PURGE_LOGSYNC(0,0,IIF(:I_MODIF_DATE!='',:I_MODIF_DATE,(SELECT DATE_STRING FROM GET_DATE_STRING(DATEADD(DAY,+1,CURRENT_DATE))))) INTO :RESULT
            DO SUSPEND;
    END

        
END ^

ALTER PROCEDURE PURGE_CONTACTS (I_TCONTACT_ID INTEGER NOT NULL DEFAULT 0,
I_TCONTACT_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
/*
    Purge des contacts
    
TODO : 

V34 :
    -Création
*/
DECLARE VARIABLE CONT_ID INTEGER;
DECLARE VARIABLE SQL_WHERE_CONT VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_STATE VARCHAR(8000);

BEGIN

    I_TCONTACT_MODIF_DATE=TRIM(I_TCONTACT_MODIF_DATE);
    I_TCONTACT_STATE=TRIM(I_TCONTACT_STATE);

    -- Construction de la chaine de critère
    SQL_WHERE_CONT='';
    SQL_WHERE_STATE='';
    
    IF (:I_TCONTACT_ID!=0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT ID FROM TCONTACT WHERE ID=:I_TCONTACT_ID)) THEN
            EXCEPTION EX_NOCONTACT;
        SQL_WHERE_CONT='TCONTACT.ID=' || :I_TCONTACT_ID;
    END
    
    IF (:I_TOWNER_ID!=0) THEN
	BEGIN
		IF (NOT EXISTS(SELECT ID FROM TOWNER WHERE ID=:I_TOWNER_ID)) THEN
			EXCEPTION EX_NOOWNER;
        SQL_WHERE_CONT=:SQL_WHERE_CONT || IIF(:SQL_WHERE_CONT!='',' AND ','') || 'TCONTACT.TOWNER_ID=' || :I_TOWNER_ID;
	END
    
    -- On ne prend en compte que les STATE DELETED par défaut...
    IF (:I_TCONTACT_STATE='') THEN
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA('~' ||
            COALESCE(
                (SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')),
                '1'
            ),
            'TCONTACT.STATE'
        ) INTO :SQL_WHERE_STATE;
    ELSE -- STATE passé en argument...
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TCONTACT_STATE,'TCONTACT.STATE') INTO :SQL_WHERE_STATE;

    SQL_WHERE_CONT=:SQL_WHERE_CONT || IIF(:SQL_WHERE_CONT!='' and :SQL_WHERE_STATE!='',' AND ','') || SQL_WHERE_STATE;
        
    -- DATE MAJ
    IF (I_TCONTACT_MODIF_DATE!='') THEN
        SQL_WHERE_CONT=:SQL_WHERE_CONT || IIF(:SQL_WHERE_CONT!='',' AND ','') || 'TCONTACT.MODIF_DATE <=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TCONTACT_MODIF_DATE)) || '''';

    -- Aucun critère, on refuse
    IF (:SQL_WHERE_CONT='' ) THEN
        EXCEPTION EX_BAD_PARAM;
        
/*
	-- DEBUG
    RESULT=:SQL_WHERE_CONT;
    SUSPEND;
    EXIT;
*/
    

    -- Récupération des TCONTACTS à traiter...
    /*
    On ne peut pas créer de cursor avec FOR EXECUTE STATEMENT, dommage...
    Dans cette boucle, on fait donc :
        - le ménage dans les tables dépendantes
        - suppression du contact en cours
    */
    FOR EXECUTE STATEMENT
        'SELECT ID FROM TCONTACT 
        WHERE ' || :SQL_WHERE_CONT
        INTO CONT_ID
    DO
    BEGIN
        RESULT=' Suppression du contact : ' || CAST(CONT_ID AS VARCHAR(10)) || ' : ';
    
        -- Suppression des TCONTLIB
        DELETE FROM TCONTLIB WHERE TCONTACT_ID=:CONT_ID;
        RESULT=RESULT || CAST(ROW_COUNT AS VARCHAR(10)) || ' TCONTLIB supprimé(s)';

        -- Suppression des TCONTOWNER
        DELETE FROM TCONTOWNER WHERE TCONTACT_ID=:CONT_ID;
        RESULT=RESULT ||  '- ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TCONTOWNER supprimé(s)';

        -- Mise à NULL des TGEDUSER
        UPDATE TGEDUSER SET TCONTACT_ID=NULL WHERE TCONTACT_ID=:CONT_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDUSER mis à NULL';

        -- Mise à NULL des TOWNER
        UPDATE TOWNER SET TCONTACT_ID=NULL WHERE TCONTACT_ID=:CONT_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TOWNER mis à NULL';

        -- Je ne sais pas si c'est bien propre ? Mais ça passe, manifestement
        DELETE FROM TCONTACT WHERE ID=:CONT_ID;

        SUSPEND;
    END



END ^

ALTER PROCEDURE PURGE_GEDUSERS (I_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
/*
        Purge des Utilisateurs

TODO : 
    
V34 :
    -Création

V40
    - Traitement TSTORAGE
*/

DECLARE VARIABLE GEDU_ID INTEGER;
DECLARE VARIABLE SQL_WHERE_GEDU VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_STATE VARCHAR(8000);
BEGIN

    I_TGEDUSER_MODIF_DATE=TRIM(I_TGEDUSER_MODIF_DATE);
    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);

    -- Construction de la chaine de critère
    SQL_WHERE_GEDU='';
    SQL_WHERE_STATE='';
    
    IF (:I_TGEDUSER_ID!=0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT ID FROM TGEDUSER WHERE ID=:I_TGEDUSER_ID)) THEN
            EXCEPTION EX_NOGEDUSER;
        SQL_WHERE_GEDU='TGEDUSER.ID=' || :I_TGEDUSER_ID;
    END
    
    IF (:I_TOWNER_ID!=0) THEN
	BEGIN
		IF (NOT EXISTS(SELECT ID FROM TOWNER WHERE ID=:I_TOWNER_ID)) THEN
			EXCEPTION EX_NOOWNER;
        SQL_WHERE_GEDU=:SQL_WHERE_GEDU || IIF(:SQL_WHERE_GEDU!='',' AND ','') || 'TGEDUSER.TOWNER_ID=' || :I_TOWNER_ID;
	END
    
    -- On ne prend en compte que les STATE DELETED par défaut...
    IF (:I_TGEDUSER_STATE='') THEN
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA('~' ||
            COALESCE(
                (SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')),
                '1'
            ),
            'TGEDUSER.STATE'
        ) INTO SQL_WHERE_STATE;
    ELSE -- STATE passé en argument...
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE,'TGEDUSER.STATE') INTO SQL_WHERE_STATE;

    SQL_WHERE_GEDU=:SQL_WHERE_GEDU || IIF(:SQL_WHERE_GEDU!='' AND SQL_WHERE_STATE!='' ,' AND ','') || :SQL_WHERE_STATE;
        
    -- DATE MAJ
    IF (I_TGEDUSER_MODIF_DATE!='') THEN
        SQL_WHERE_GEDU=:SQL_WHERE_GEDU || IIF(:SQL_WHERE_GEDU!='',' AND ','') || 'TGEDUSER.MODIF_DATE <=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TGEDUSER_MODIF_DATE)) || '''';

    -- Aucun critère, on refuse
    IF (:SQL_WHERE_GEDU='' ) THEN
        EXCEPTION EX_BAD_PARAM;
        
/*
    -- DEBUG
    RESULT=:SQL_WHERE_GEDU;
    SUSPEND;
    EXIT;
*/
    -- Récupération des TGEDUSER à traiter...
    /*
    On ne peut pas créer de cursor avec FOR EXECUTE STATEMENT, dommage...
    Dans cette boucle, on fait donc :
        - le ménage dans les tables dépendantes
        - suppression du geduser en cours
    */
    FOR EXECUTE STATEMENT
        'SELECT ID FROM TGEDUSER 
        WHERE ' || :SQL_WHERE_GEDU
        INTO GEDU_ID
    DO
    BEGIN
        RESULT=' Suppression de l''utilisateur : ' || CAST(GEDU_ID AS VARCHAR(10)) || ' : ';
    
        -- Suppression des TGEDUSERLIB
        DELETE FROM TGEDUSERLIB WHERE TGEDUSER_ID=:GEDU_ID;
        RESULT=RESULT || CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDUSERLIB supprimé(s)';

        -- Suppression des TGEDPARAMUSER
        DELETE FROM TGEDPARAMUSER WHERE TGEDUSER_ID=:GEDU_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDPARAMUSER supprimé(s)';

        -- Suppression des TGEDGROUPUSER
        DELETE FROM TGEDGROUPUSER WHERE TGEDUSER_ID=:GEDU_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDGROUPUSER supprimé(s)';

        -- Suppression TSTORAGE
        DELETE FROM TSTORAGE WHERE TGEDUSER_ID=:GEDU_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TSTORAGE supprimé(s)';

        -- Mise à NULL des TPROFILE
        UPDATE TPROFILE SET TGEDUSER_ID=NULL WHERE TGEDUSER_ID=:GEDU_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TPROFILE mis à NULL';
        
        -- Je ne sais pas si c'est bien propre ? Mais ça passe, manifestement
        DELETE FROM TGEDUSER WHERE ID=:GEDU_ID;

        SUSPEND;
    END

END ^

ALTER PROCEDURE PURGE_LIBRARIES (I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
/*
        Purge des Libraries

TODO : 
    - Voir purge LOG SYNC ???
    
V34 :
    - Création
    
V40 :
    - SUppression TSTORAGE
*/

DECLARE VARIABLE LIB_ID INTEGER;
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_STATE VARCHAR(8000);
BEGIN

    I_TLIBRARY_MODIF_DATE=TRIM(I_TLIBRARY_MODIF_DATE);
    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);

    -- Construction de la chaine de critère
    SQL_WHERE_LIB='';
    SQL_WHERE_STATE='';
    
    IF (:I_TLIBRARY_ID!=0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT ID FROM TLIBRARY WHERE ID=:I_TLIBRARY_ID)) THEN
            EXCEPTION EX_NOLIB;
        SQL_WHERE_LIB='TLIBRARY.ID=' || :I_TLIBRARY_ID;
    END
    
    IF (:I_TOWNER_ID!=0) THEN
	BEGIN
		IF (NOT EXISTS(SELECT ID FROM TOWNER WHERE ID=:I_TOWNER_ID)) THEN
			EXCEPTION EX_NOOWNER;
        SQL_WHERE_LIB=:SQL_WHERE_LIB || IIF(:SQL_WHERE_LIB!='',' AND ','') || 'TLIBRARY.TOWNER_ID=' || :I_TOWNER_ID;
	END
    
    -- On ne prend en compte que les STATE DELETED par défaut...
    IF (:I_TLIBRARY_STATE='') THEN
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA('~' ||
            COALESCE(
                (SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')),
                '1'
            ),
            'TLIBRARY.STATE'
        ) INTO SQL_WHERE_STATE;
    ELSE -- STATE passé en argument...
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE,'TLIBRARY.STATE') INTO SQL_WHERE_STATE;

    SQL_WHERE_LIB=:SQL_WHERE_LIB || IIF(:SQL_WHERE_LIB!='' AND :SQL_WHERE_STATE!='',' AND ','') || :SQL_WHERE_STATE;
        
    -- DATE MAJ
    IF (I_TLIBRARY_MODIF_DATE!='') THEN
        SQL_WHERE_LIB=:SQL_WHERE_LIB || IIF(:SQL_WHERE_LIB!='',' AND ','') || 'TLIBRARY.MODIF_DATE <=''' || COALESCE((SELECT DATE_STRING FROM SET_STRING_DATE(:I_TLIBRARY_MODIF_DATE)),'1=1') || '''';

    -- Aucun critère, on refuse
    IF (:SQL_WHERE_LIB='' ) THEN
        EXCEPTION EX_BAD_PARAM;
        
/*
    -- DEBUG
    RESULT=:SQL_WHERE_LIB;
    SUSPEND;
    EXIT;
*/


    -- Récupération des TLIBRARY à traiter...
    /*
    On ne peut pas créer de cursor avec FOR EXECUTE STATEMENT, dommage...
    Dans cette boucle, on fait donc :
        - le ménage dans les tables dépendantes
        - suppression du geduser en cours
    */
    FOR EXECUTE STATEMENT
        'SELECT ID FROM TLIBRARY 
        WHERE ' || :SQL_WHERE_LIB
        INTO LIB_ID
    DO
    BEGIN
        RESULT=' Suppression de la Bibiothèque : ' || CAST(LIB_ID AS VARCHAR(10)) || ' : ';
        
        -- Suppression des TGEDUSERLIB
        DELETE FROM TGEDUSERLIB WHERE TLIBRARY_ID=:LIB_ID;
        RESULT=RESULT || CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDUSERLIB supprimé(s)';

        -- Suppression des TGEDGROUPLIB
        DELETE FROM TGEDGROUPLIB WHERE TLIBRARY_ID=:LIB_ID;
        RESULT=RESULT || ' - ' ||  CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDGROUPLIB supprimé(s)';

        -- Suppression des TCONTLIB
        DELETE FROM TCONTLIB WHERE TLIBRARY_ID=:LIB_ID;
        RESULT=RESULT || ' - ' ||  CAST(ROW_COUNT AS VARCHAR(10)) || ' TCONTLIB supprimé(s)';

        -- Suppression des TGEDPARAMUSER
        DELETE FROM TGEDPARAMUSER WHERE TLIBRARY_ID=:LIB_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDPARAMUSER supprimé(s)';

        -- Suppression TSTORAGE
        DELETE FROM TSTORAGE WHERE TLIBRARY_ID=:LIB_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TSTORAGE supprimé(s)';

/*
        -- Suppression des TLOGSYNC (on garde trace en ERR_COMMENT)
        DELETE FROM TLOGSYNC
            WHERE TLOGSYNC.TLIBRARY_ID=:LIB_ID;
        RESULT=RESULT || '- ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TLOGSYNC supprimé(s)';
*/

        -- Mise à NULL des TPROFILE
        UPDATE TPROFILE SET TLIBRARY_ID=NULL WHERE TLIBRARY_ID=:LIB_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TPROFILE mis à NULL';

        -- Mise à NULL des TGEDPARAM
        UPDATE TGEDPARAM SET TLIBRARY_ID=NULL WHERE TLIBRARY_ID=:LIB_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDPARAM mis à NULL';

        -- Je ne sais pas si c'est bien propre ? Mais ça passe, manifestement
        DELETE FROM TLIBRARY WHERE ID=:LIB_ID;

        SUSPEND;
    END

END ^

ALTER PROCEDURE PURGE_LOGSYNC (I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TIME_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
/*
        Purge des log de synchros
TODO : 
    
V34 :
    - Création
*/
DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
DECLARE VARIABLE COUNT_DEL INTEGER;
BEGIN

    I_TIME_END=TRIM(I_TIME_END);

    SQL_WHERE='';
    
    IF (:I_TOWNER_ID!=0) THEN
        SQL_WHERE='TOWNER_ID=' || :I_TOWNER_ID;
        
    IF (:I_TLIBRARY_ID!=0) THEN
        SQL_WHERE=:SQL_WHERE || IIF(:SQL_WHERE!='',' AND ', '') || 'TLIBRARY_ID=' || :I_TLIBRARY_ID;
    
    IF (:I_TIME_END!='') THEN
        SQL_WHERE=:SQL_WHERE || IIF(:SQL_WHERE!='',' AND ', '') || 'TIME_END<=''' || CAST((SELECT DATE_STRING FROM SET_STRING_DATE(:I_TIME_END)) AS TIMESTAMP) || '''';

    -- Aucun critère passé, on refuse
    IF (:SQL_WHERE='' ) THEN
        EXCEPTION EX_BAD_PARAM;
        
    -- Ajout d'un critère pour ne pas effacer les LOGSYNC utilisés en tant que dernier SYNCHRO au niveau des LIB (TLIBRARY.TLOGSYNC_ID)
    SQL_WHERE=:SQL_WHERE || ' AND TLOGSYNC.ID NOT IN (SELECT DISTINCT TLIBRARY.TLOGSYNC_ID FROM TLIBRARY WHERE TLIBRARY.TLOGSYNC_ID IS NOT NULL)';
    
/*
    -- DEBUG
    RESULT=:SQL_WHERE;
    SUSPEND;
    EXIT;
*/
            
    EXECUTE STATEMENT 'SELECT COUNT(ID) FROM TLOGSYNC WHERE ' || :SQL_WHERE INTO COUNT_DEL;
    EXECUTE STATEMENT 'DELETE FROM TLOGSYNC WHERE ' || :SQL_WHERE;

    RESULT=CAST(COUNT_DEL AS VARCHAR(10)) || ' TLOGSYNC supprimé(s)';
    
    SUSPEND;
    
END ^

ALTER PROCEDURE PURGE_OWNERS (I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
/*
        Purge des Propriétaires

TODO : 
    
V34 :
    - Création

V39 :
	- MAJ pour effacement TGEDPARAM + TGEDGROUP éventuellement affectés...
*/
DECLARE VARIABLE OWNER_ID INTEGER;
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_STATE VARCHAR(8000);

DECLARE VARIABLE GEDGROUP_ID INTEGER;

DECLARE VARIABLE RESULT_TEMP VARCHAR(8000);

BEGIN

    I_TOWNER_MODIF_DATE=TRIM(I_TOWNER_MODIF_DATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);

    -- Construction de la chaine de critère
    SQL_WHERE_OWNER='';
    SQL_WHERE_STATE='';

    IF (:I_TOWNER_ID!=0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT ID FROM TOWNER WHERE ID=:I_TOWNER_ID)) THEN
            EXCEPTION EX_NOOWNER;
        SQL_WHERE_OWNER='TOWNER.ID=' || :I_TOWNER_ID;
    END
    
    -- On ne prend en compte que les STATE DELETED par défaut...
    IF (:I_TOWNER_STATE='') THEN
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA('~' ||
            COALESCE(
                (SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')),
                '1'
            ),
            'TOWNER.STATE'
        ) INTO :SQL_WHERE_STATE;
    ELSE -- STATE passé en argument...
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE,'TOWNER.STATE') INTO :SQL_WHERE_STATE;

    SQL_WHERE_OWNER=:SQL_WHERE_OWNER || IIF(:SQL_WHERE_OWNER!='' AND :SQL_WHERE_STATE!='',' AND ','') || :SQL_WHERE_STATE;
        
    -- DATE MAJ
    IF (I_TOWNER_MODIF_DATE!='') THEN
        SQL_WHERE_OWNER=:SQL_WHERE_OWNER || IIF(:SQL_WHERE_OWNER!='',' AND ','') || 'TOWNER.MODIF_DATE <=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TOWNER_MODIF_DATE)) || '''';

    -- Aucun critère, on refuse
    IF (:SQL_WHERE_OWNER='' ) THEN
        EXCEPTION EX_BAD_PARAM;
        
/*
    -- DEBUG
    RESULT=:SQL_WHERE_OWNER;
    SUSPEND;
    EXIT;
*/

    -- Récupération des TGEDUSER à traiter...
    /*
    On ne peut pas créer de cursor avec FOR EXECUTE STATEMENT, dommage...
    Dans cette boucle, on fait donc :
        - le ménage dans les tables dépendantes
        - suppression du geduser en cours
    */
    FOR EXECUTE STATEMENT
        'SELECT ID FROM TOWNER 
        WHERE ' || :SQL_WHERE_OWNER
        INTO OWNER_ID
    DO
    BEGIN
        RESULT=' Suppression du Propriétaire : ' || CAST(OWNER_ID AS VARCHAR(10)) || ' : ';
        SUSPEND;
        
        -- Suppression des contacts
        FOR SELECT RESULT FROM PURGE_CONTACTS(0,'',:OWNER_ID,'*') INTO :RESULT
            DO SUSPEND;

        -- Suppression des gedusers
        FOR SELECT RESULT FROM PURGE_GEDUSERS(0,'',:OWNER_ID,'*') INTO :RESULT
            DO SUSPEND;

        -- Suppression des PROFILES
        FOR SELECT RESULT FROM  PURGE_PROFILES(0,'',:OWNER_ID) INTO :RESULT 
            DO SUSPEND;

        -- Suppression des TGEDGROUP
        -- On supprime les dépendances dans TGEDGROUPLIB...
        FOR SELECT ID FROM TGEDGROUP WHERE TOWNER_ID=:OWNER_ID INTO GEDGROUP_ID
        DO
        BEGIN
            DELETE FROM TGEDGROUPLIB WHERE TGEDGROUP_ID=:GEDGROUP_ID;
            RESULT=CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDGROUPLIB supprimé(s)';
            SUSPEND;
        END
        DELETE FROM TGEDGROUP WHERE TOWNER_ID=:OWNER_ID;
        RESULT=CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDGROUP supprimé(s)';
        SUSPEND;
        
        -- Suppression des TGEDPARAM
        DELETE FROM TGEDPARAM WHERE TOWNER_ID=:OWNER_ID;
        RESULT=CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDPARAM supprimé(s)';
        SUSPEND;

        -- Suppression des TGEDPARAMOWNER
        DELETE FROM TGEDPARAMOWNER WHERE TOWNER_ID=:OWNER_ID;
        RESULT=CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDPARAMOWNER supprimé(s)';
        SUSPEND;

        -- Suppression des TLIBRARY
        FOR SELECT RESULT FROM PURGE_LIBRARIES(0,'',:OWNER_ID,'*') INTO :RESULT
            DO SUSPEND;

        -- Suppression TSTORAGE
        DELETE FROM TSTORAGE WHERE TOWNER_ID=:OWNER_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TSTORAGE supprimé(s)';
        
        -- Je ne sais pas si c'est bien propre ? Mais ça passe, manifestement
        DELETE FROM TOWNER WHERE ID=:OWNER_ID;
    END

END ^

ALTER PROCEDURE PURGE_PROFILES (I_TPROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TPROFILE_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_ID INTEGER NOT NULL DEFAULT 0)
RETURNS (RESULT VARCHAR(8000) CHARACTER SET UTF8)
AS 
/*
        Purge des Profils
        Attention : les profils n'ont pas de STATE, la suppression est donc directe...

TODO : 
    
V34 :
    - Création
*/

DECLARE VARIABLE PROF_ID INTEGER;
DECLARE VARIABLE SQL_WHERE_PROF VARCHAR(8000);
BEGIN

    I_TPROFILE_MODIF_DATE=TRIM(I_TPROFILE_MODIF_DATE);

    -- Construction de la chaine de critère
    SQL_WHERE_PROF='';
    
    IF (:I_TPROFILE_ID!=0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT ID FROM TPROFILE WHERE ID=:I_TPROFILE_ID)) THEN
            EXCEPTION EX_NOPROFILE;
        SQL_WHERE_PROF='TPROFILE.ID=' || :I_TPROFILE_ID;
    END

    IF (:I_TOWNER_ID!=0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT ID FROM TOWNER WHERE ID=:I_TOWNER_ID)) THEN
            EXCEPTION EX_NOOWNER;
        SQL_WHERE_PROF='TPROFILE.TOWNER_ID=' || :I_TOWNER_ID;
    END
    
    -- DATE MAJ
    IF (I_TPROFILE_MODIF_DATE!='') THEN
        SQL_WHERE_PROF=:SQL_WHERE_PROF || IIF(:SQL_WHERE_PROF!='',' AND ','') || 'TPROFILE.MODIF_DATE <=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TPROFILE_MODIF_DATE)) || '''';

    -- Aucun critère, on refuse
    IF (:SQL_WHERE_PROF='' ) THEN
        EXCEPTION EX_BAD_PARAM;
        
/*
    -- DEBUG
    RESULT=:SQL_WHERE_PROF;
    SUSPEND;
    EXIT;
*/
    -- Récupération des PROFILES à traiter...
    /*
    On ne peut pas créer de cursor avec FOR EXECUTE STATEMENT, dommage...
    Dans cette boucle, on fait donc :
        - le ménage dans les tables dépendantes
        - suppression du geduser en cours
    */
    FOR EXECUTE STATEMENT
        'SELECT ID FROM TPROFILE 
        WHERE ' || :SQL_WHERE_PROF
        INTO PROF_ID
    DO
    BEGIN
        RESULT=' Suppression du Profil : ' || CAST(PROF_ID AS VARCHAR(10)) || ' : ';
        
        -- Suppression des TGEDPARAMPROF
        DELETE FROM TGEDPARAMPROF WHERE TPROFILE_ID=:PROF_ID;
        RESULT=RESULT || CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDPARAMPROF supprimé(s)';

        -- Mise à NULL des TGEDGROUP
        UPDATE TGEDGROUP SET TPROFILE_ID=NULL WHERE TPROFILE_ID=:PROF_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDGROUP mis à NULL';

        -- Mise à NULL des TGEDUSER
        UPDATE TGEDUSER SET TPROFILE_ID=NULL WHERE TPROFILE_ID=:PROF_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDUSER mis à NULL';

        -- Mise à NULL des TGEDUSERLIB
        UPDATE TGEDUSERLIB SET TPROFILE_ID=NULL WHERE TPROFILE_ID=:PROF_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDUSERLIB mis à NULL';

        -- Mise à NULL des TGEDGROUPLIB
        UPDATE TGEDGROUPLIB SET TPROFILE_ID=NULL WHERE TPROFILE_ID=:PROF_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TGEDGROUPLIB mis à NULL';

        -- Mise à NULL des TLIBRARY
        UPDATE TLIBRARY SET TPROFILE_ID=NULL WHERE TPROFILE_ID=:PROF_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TLIBRARY mis à NULL';

        -- Mise à NULL des TOWNER
        UPDATE TOWNER SET TPROFILE_ID=NULL WHERE TPROFILE_ID=:PROF_ID;
        RESULT=RESULT || ' - ' || CAST(ROW_COUNT AS VARCHAR(10)) || ' TOWNER mis à NULL';

        DELETE FROM TPROFILE WHERE ID=:PROF_ID;

        SUSPEND;
    END

END ^

ALTER PROCEDURE SET_CONTACT_INFOS (I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTACT_TOWNER_ID INTEGER NOT NULL,
I_TCONTACT_NAME VARCHAR(150) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_FIRSTNAME VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_PREFIX VARCHAR(30) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_EMAIL VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_TEL VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_ADDRESS VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_POSTCODE VARCHAR(50) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_REGION VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_CITY VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_COUNTRY VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_ORGANIZATION VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_SERVICE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_IDENTIFIER VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_CELLTEL VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_NO_MODIF_DATE BOOLEAN NOT NULL DEFAULT 0,
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (CONTACT_ID INTEGER)
AS 
/*
    Ajout/modification d'un contact dans la table correspondante
    
    Si l'ID est NULL ==> Insertion
    Si ID passé ==> mise à jour d'un contact existant
    
    Paramètres : cf table TCONTACT

    Particularités :
     - Les clés externes (TOWNER_ID) sont vérifiées avant l'insertion et les exceptions correspondantes sont levées si non présents
    - I_TCONTACT_STATE permet de préciser le STATE de MAJ (pas d'initialiser les colonnes STATE des tables (cf. PS SET_STATE ou DEL_CONTACT pour ça)    
    - À propos des règles de MAJ en update (en insertion le problème est plus simple) et des STATES :
        * Si un parent est inactif (STATE interdisant les modifications) on considère qu'il peut toutefois être mis à jour si le nouveau parent est actif
        * Les paramètres I_XXX_STATE permettent donc de préciser si on autorise la MAJ avec un nuveau parent qui ne serait pas actif (on ne teste pas l'ancien parent)
        * Par exemple, pour le OWNER :
            * on ne se préoccupe pas de TCONTACT.TOWNER_ID existant (STATE non évalué)
            * on regarde si le I_TOWNER_ID est utilisable
                - Si c'est le cas, on peut modifier le OWNER_ID
                - Dans le cas contraire, on prend en compte le I_TOWNER_STATE pour savoir si l'on a le droit d'utiliser un OWNER_ID désactivé
 
    renvoie :
        CONTACT_ID : Identifiant du contact inséré/modifié si réussite
        
    Attention
    - cette procédure lève des erreurs en cas d'insertion/mise à jour impossible (erreurs sous-jacentes)
    
    Les états (colonne STATE) ne sont pas pris en compte pour les insertions...

V22 :
	Exception EX_NONULL codifiée ('Nom contact' ==> '%%CONTACT_NAME%%')

MAJ V32 :
	- Ajout de ORGANIZATION, etc...
	- Exception EX_NONULL recodifiée "%...%" (uniformisation des délimiteurs de macros)

MAJ V34
    -NAME NULL OK...
    
MAJ V39
    - Les dates MAJ sont initialisées ici (plus dans le trigger) via I_TCONTACT_NO_MODIF_DATE
*/
DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    
DECLARE VARIABLE MODIF_DATE TIMESTAMP;
BEGIN

    I_TCONTACT_STATE=TRIM(I_TCONTACT_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);

    SQL_WHERE='';
    ID_OK=Null;

    /* Contact présent et modifiable */
    IF (:I_TCONTACT_ID != 0 ) THEN
    BEGIN    
        IF (:I_TCONTACT_STATE= '' ) THEN
            /* Etat de visibilité par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TCONTACT.STATE') INTO :SQL_WHERE;
        ELSE 
            /* Etat de visibilité demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TCONTACT_STATE, 'TCONTACT.STATE') INTO :SQL_WHERE; 

		-- On en profite pour récupérer la dernère date de modif (éventuellement écrasée plus loin)
        EXECUTE STATEMENT '
            SELECT ID, MODIF_DATE FROM TCONTACT
            WHERE TCONTACT.ID=' || :I_TCONTACT_ID|| IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '')
            INTO :ID_OK, :MODIF_DATE;
            
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOCONTACT;
     END
     
    SQL_WHERE=Null;
    ID_OK=Null;
    
    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 

    EXECUTE STATEMENT '
        SELECT ID FROM TOWNER
        WHERE ID=' || :I_TCONTACT_TOWNER_ID || IIF (:SQL_WHERE != '' , ' AND (' || :SQL_WHERE || ')', '')
        INTO ID_OK;
        
	IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;
        
        
    /* Nettoyage des paramètres */
    I_TCONTACT_NAME = TRIM(:I_TCONTACT_NAME);
    /*
    MAJ V34 : NAME NULL autorisé
    IF (I_TCONTACT_NAME= '') THEN EXCEPTION EX_NONULL (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME = 'EX_NONULL')
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%')
		|| 'CONTACT_NAME'
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%'); 
    */

    I_TCONTACT_FIRSTNAME=TRIM(:I_TCONTACT_FIRSTNAME);
    I_TCONTACT_PREFIX=TRIM(:I_TCONTACT_PREFIX);
    I_TCONTACT_EMAIL=TRIM(:I_TCONTACT_EMAIL);
    -- TODO : Contrôle forme email ???
    I_TCONTACT_TEL=TRIM(:I_TCONTACT_TEL);
    I_TCONTACT_ADDRESS=TRIM(:I_TCONTACT_ADDRESS);
    I_TCONTACT_POSTCODE=TRIM(:I_TCONTACT_POSTCODE);
    I_TCONTACT_REGION=TRIM(:I_TCONTACT_REGION);
    I_TCONTACT_CITY=TRIM(:I_TCONTACT_CITY);
    I_TCONTACT_COUNTRY=TRIM(:I_TCONTACT_COUNTRY);

	-- Ancienne date de modif init plus haut ; on réinit le cas échéant
	IF (:I_TCONTACT_ID = 0 OR :I_TCONTACT_NO_MODIF_DATE = 0) THEN MODIF_DATE = CURRENT_TIMESTAMP;


    BEGIN 
        UPDATE OR INSERT INTO TCONTACT(ID, MODIF_DATE, NAME,TOWNER_ID,FIRSTNAME,PREFIX,EMAIL,TEL,ADDRESS,POSTCODE,REGION,CITY,COUNTRY, ORGANIZATION, SERVICE, IDENTIFIER, CELLTEL)
        VALUES(
            NULLIF(:I_TCONTACT_ID,0),
            :MODIF_DATE,
            NULLIF(:I_TCONTACT_NAME,''),
            :I_TCONTACT_TOWNER_ID,
            NULLIF(:I_TCONTACT_FIRSTNAME,''),
            NULLIF(:I_TCONTACT_PREFIX,'') ,
            NULLIF(:I_TCONTACT_EMAIL,''),
            NULLIF(:I_TCONTACT_TEL,''),
            NULLIF(:I_TCONTACT_ADDRESS,''),
            NULLIF(:I_TCONTACT_POSTCODE,''),
            NULLIF(:I_TCONTACT_REGION,''),
            NULLIF(:I_TCONTACT_CITY,''),
            NULLIF(:I_TCONTACT_COUNTRY,''),
            NULLIF(:I_TCONTACT_ORGANIZATION,''),
            NULLIF(:I_TCONTACT_SERVICE,''),
            NULLIF(:I_TCONTACT_IDENTIFIER,''),
            NULLIF(:I_TCONTACT_CELLTEL,'')
        )
        MATCHING (ID)
        RETURNING ID INTO CONTACT_ID;
    
        SUSPEND;
        
        --		Pour l'instant on laisse l'erreur FB...
-- 		WHEN ANY DO
--             -- Récupération du code générique d'erreur et ajout d'informations complémentaires...
--             EXCEPTION EX_ERRGEN (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME='EX_ERRGEN') ||
--                 IIF(:I_TCONTACT_ID IS NULL,'Ajout','Mise à jour') || ' de TCONTACT (SET_CONTACT_INFOS) impossible suite à l''erreur non prise en charge suivante : ' ||
--                 'GDS : "' || GDSCODE || '" - SQL : "' || SQLCODE || '"';

    END
END ^

ALTER PROCEDURE SET_CONTACT_TYPE_TO_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL,
I_TCONTACT_ID INTEGER NOT NULL,
I_TCONTTYPE_ID INTEGER NOT NULL,
I_TCONTLIB_SYNC_SENDMAIL SYNC_MAIL NOT NULL DEFAULT 0,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
AS 
/*
    Ajout d'un contact à une biliothèque donnée (ie. insertion dans la table TCONTLIB)
    
    Le contact ET la bibliothèque doivent exister préalamblement à l'appel de cette procédure
    
    Les colonnes "STATE" des tables parentes (et niveaux supérieurs) sont évaluées afin de savoir s'il est possible d'utiliser l'un et/ou l'autre (cf. gestion des colonnes STATE dans la documentation)
    
    Ne renvoi rien (ie. si pas d'erreur, insertion Ok)
    
    Si le couple existe déjà, une erreur SQL standard est levée (violation PK)
    
V16 :
	Création : Annule et remplace "ADD_CONTACT_TYPE_TO_LIBRARY" pour gestion MAJ 
*/

DECLARE VARIABLE SQL_WHERE_CONTACT VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);

DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    I_TCONTACT_STATE=TRIM(I_TCONTACT_STATE );

    /* construction des WHERE */
    SQL_WHERE_CONTACT = '';
    SQL_WHERE_OWNER= '';
    SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';

    ID_OK=Null;

   /* Serveur Firebird (si non Null) utilisable outrepassable...*/
    IF (:I_TFBSERVER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;         

    /* Owner utilisable outrepassable)... */
    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    -- Library existante et modifiable...
    IF (:I_TLIBRARY_STATE ='' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

    /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
    EXECUTE STATEMENT '
        SELECT TLIBRARY.ID
		FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
			LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
        WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID ||
            IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
            IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;


    ID_OK=Null;

    /* contact utilisable outrepassable)... */
    IF (:I_TCONTACT_STATE = '' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TCONTACT.STATE') INTO :SQL_WHERE_CONTACT;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TCONTACT_STATE, 'TCONTACT.STATE') INTO :SQL_WHERE_CONTACT; 

    EXECUTE STATEMENT '
        SELECT TCONTACT.ID
        FROM TCONTACT INNER JOIN TOWNER ON TCONTACT.TOWNER_ID=TOWNER.ID
        WHERE TCONTACT.ID=' || :I_TCONTACT_ID ||
            IIF (:SQL_WHERE_CONTACT != '' , ' AND (' || :SQL_WHERE_CONTACT || ')', '') || 
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO ID_OK;

    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOCONTACT;

	/* Type de contact présent */
	IF (NOT EXISTS (SELECT ID FROM TCONTTYPE WHERE ID=:I_TCONTTYPE_ID)) THEN EXCEPTION EX_NOCONTTYPE;

    /* L'environnement est correct, on peut insérer */
    BEGIN
        UPDATE OR INSERT INTO TCONTLIB(TLIBRARY_ID, TCONTACT_ID, TCONTTYPE_ID, SYNC_SENDMAIL)
        VALUES(
            :I_TLIBRARY_ID,
            :I_TCONTACT_ID,
            :I_TCONTTYPE_ID,
			:I_TCONTLIB_SYNC_SENDMAIL
        )
		MATCHING (TLIBRARY_ID, TCONTACT_ID, TCONTTYPE_ID);
        
        /* Traitement violation PK */
        WHEN GDSCODE unique_key_violation DO
            EXCEPTION EX_CONTLIB_EXISTS;
    END

END ^

ALTER PROCEDURE SET_CONTTYPE_INFOS (I_TCONTTYPE_ID INTEGER NOT NULL DEFAULT 0,
I_TCONTTYPE_NAME VARCHAR(150) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (CONTTYPE_ID INTEGER)
AS 
/*
    Création MAJ d'un type de contact
    
    Si l'ID est 0 ==> Insertion
    Si ID passé ==> mise à jour d'un contact existant
    
    Paramètres : cf table TCONTACT

V22 :
	- Exception EX_NONULL codifiée ('Nom Type contact' ==> '%%CONTTYPE_NAME%%')

V32 :
	- Exception EX_NONULL recodifiée "%...%" (uniformisation des délimiteurs de macros)
*/

BEGIN
    /* MAJ possible */
    IF (:I_TCONTTYPE_ID !=0 AND NOT EXISTS(SELECT ID FROM TCONTTYPE WHERE ID=:I_TCONTTYPE_ID)) THEN EXCEPTION EX_NOCONTTYPE;
    
    /* Nettoyage des paramètres */
    I_TCONTTYPE_NAME = TRIM(:I_TCONTTYPE_NAME);

    /* Insertion chaine vide */
    IF (:I_TCONTTYPE_NAME = '') THEN EXCEPTION EX_NONULL (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME = 'EX_NONULL')
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%')
		|| 'CONTTYPE_NAME'
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%');
        
    BEGIN
        IF (I_TCONTTYPE_ID = 0) THEN
        BEGIN
            INSERT INTO TCONTTYPE(NAME)
            VALUES(
                :I_TCONTTYPE_NAME
            )
            RETURNING ID INTO CONTTYPE_ID;
        END
        ELSE
        BEGIN
            UPDATE TCONTTYPE SET
                NAME=:I_TCONTTYPE_NAME
            WHERE ID=:I_TCONTTYPE_ID
            RETURNING ID INTO CONTTYPE_ID;
        END
        
        SUSPEND;

--		Pour l'instant on laisse l'erreur FB...
--         WHEN ANY DO
--             -- Récupération du code générique d'erreur et ajout d'informations complémentaires...
--             EXCEPTION EX_ERRGEN (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME='EX_ERRGEN') ||
--                 IIF(:I_TCONTTYPE_ID IS NULL,'Ajout','Mise à jour') || ' de TCONTTYPE (SET_CONTTYPE_INFOS) impossible suite à l''erreur non prise en charge suivante : ' ||
--                 'GDS : "' || GDSCODE || '" - SQL : "' || SQLCODE || '"';
        
    END
END ^

ALTER PROCEDURE SET_DOMPARAM (I_TDOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TDOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL,
I_TDOMPARAM_VALUE VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TDOMPARAM_TYPE TYPE_PARAM NOT NULL DEFAULT 1,
I_TDOMPARAM_COMMENT VARCHAR(512) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TDOMPARAM_PROTECTION STATE NOT NULL DEFAULT 2)
RETURNS (DOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
DOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
DOMPARAM_VALUE VARCHAR(255) CHARACTER SET UTF8)
AS 
DECLARE VARIABLE TPARAM_ID INTEGER;
    
BEGIN
    /*
    Cette procédure ajoute ou met à jour un paramètre (dans la table TDOMPARAM)
    - Si le paramètre existe déjà, on met à jour toutes les colonnes non NULL
    - Dans le cas contraire, on essai d'ajouter le paramètre dans la table correspondante
    (attention au typo donc, si un nom de paramètre ou une section incorrect est donné dans le cadre d'une MAJ, un nouveau paramètre sera créé...)

V17 :
	- Autorisation d'une VALUE vide
	- Ajout SECTION...

V21 :
	- Correction VALUE vide finalement autorisée

V22 :
	Exception EX_NONULL codifiée ('Libellé du paramètre' ==> '%%DOMPARAM_NAME%%')

V30 :
	- Correction I_TDOMPARAM_COMMENT en entrée (255 -> 512)

V32
	- Exception EX_NONULL recodifiée "%...%" (uniformisation des délimiteurs de macros)
*/
    
    /* Nettoyage des paramètres */
    I_TDOMPARAM_NAME = TRIM(I_TDOMPARAM_NAME);
    IF (I_TDOMPARAM_NAME = '') THEN EXCEPTION EX_NONULL (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME = 'EX_NONULL')
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%')
		|| 'DOMPARAM_NAME'
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%');
 
    I_TDOMPARAM_VALUE = TRIM(I_TDOMPARAM_VALUE);
	-- V21 : oublie de désactiver ça en V17 ==> VALUE vide ==> EXCEPTION :-((((
    -- IF (I_TDOMPARAM_VALUE = '') THEN EXCEPTION EX_NONULL (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME = 'EX_NONULL') || 'Valeur du paramètre'; 
    I_TDOMPARAM_COMMENT = TRIM(I_TDOMPARAM_COMMENT);
    
    
    UPDATE OR INSERT INTO TDOMPARAM ("SECTION", "NAME", "TYPE", "VALUE", "COMMENT", PROTECTION)
        VALUES (
			:I_TDOMPARAM_SECTION,
            :I_TDOMPARAM_NAME,
            :I_TDOMPARAM_TYPE,
            NULLIF(:I_TDOMPARAM_VALUE,''),
            NULLIF(:I_TDOMPARAM_COMMENT,''),
            :I_TDOMPARAM_PROTECTION
        )
        MATCHING (SECTION, NAME)
        RETURNING "SECTION", "NAME", "VALUE"
        INTO :DOMPARAM_SECTION, :DOMPARAM_NAME, :DOMPARAM_VALUE;

    SUSPEND;
END ^

ALTER PROCEDURE SET_DOMPARAM_VALUEBLB (I_TDOMPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TDOMPARAM_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL,
I_TDOMPARAM_VALUEBLB BLOB NOT NULL DEFAULT '')
AS 
/*
	MAJ d'une valeur BLOB pour un paramètre domaine
	Les STATES ne sont PAS  évalués
	Le paramètre concerné doit exister préalablement à l'appel de cette PS

V15 :
    - Création
    
V17 :
    - Ajout SECTION
*/
BEGIN
    UPDATE TDOMPARAM
        SET VALUEBLB = NULLIF(:I_TDOMPARAM_VALUEBLB,'')
        WHERE
            SECTION = :I_TDOMPARAM_SECTION AND  NAME =:I_TDOMPARAM_NAME;
	IF (ROW_COUNT = 0) THEN
		EXCEPTION EX_NODOMPARAM;
            
END ^

ALTER PROCEDURE SET_FBSERVER_INFOS (I_TFBSERVER_ID INTEGER NOT NULL,
I_TFBSERVER_NAME VARCHAR(50) CHARACTER SET UTF8 NOT NULL,
I_TFBSERVER_HOST VARCHAR(255) CHARACTER SET UTF8 NOT NULL,
I_TFBSERVER_FBADMLOGIN VARCHAR(31) CHARACTER SET UTF8 NOT NULL,
I_TFBSERVER_FBADMPASSWD VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_TCPPORT TCPPORT NOT NULL DEFAULT 0,
I_TFBSERVER_TUNNELPORT TCPPORT NOT NULL DEFAULT 0,
I_TFBSERVER_TUNNELHOST VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_LIBROOTPATH VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (FBSERVER_ID INTEGER)
AS 
/*
    Ajout/modification d'un serveur Firebird dans la table correspondante
    
    Paramètres : cf table TFBSERVER

    Particularités :
    - TCPPORT est un domaine Firebird (V7)
    - I_TFBSERVER_STATE permet de préciser les conditions de STATE de MAJ (pas d'initialiser les colonnes STATE des tables (cf. PS SET_STATE ou DEL_FBSERVER pour ça)
        
    renvoie :
        FBSERVER_ID : Identifiant du serveur inséré/modifié si réussite
        
    Attention, cette procédure lève des erreurs en cas d'insertion impossible (erreurs sous-jacentes)

MAJ V13 :
    - Ajout FBSERVER_LIB_ROOT_PATH
    - Ajout FBADM

V22 :
	Exception EX_NONULL codifiée

V32
	- Exception EX_NONULL recodifiée "%...%" (uniformisation des délimiteurs de macros)

*/
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    
BEGIN

    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

	SQL_WHERE_FBSERVER = '';
	ID_OK = Null;
    
    /* MAJ : on vérifie l'état */
    IF (I_TFBSERVER_ID != 0 ) THEN 
    BEGIN
        IF (:I_TFBSERVER_STATE= '' ) THEN
            /* Etat de visibilité par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
        ELSE 
            /* Etat de visibilité demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;   
                  
        EXECUTE STATEMENT '
            SELECT ID FROM TFBSERVER
            WHERE ID=' || :I_TFBSERVER_ID || IIF (:SQL_WHERE_FBSERVER != '' ,' AND ' || :SQL_WHERE_FBSERVER, '')
            INTO :ID_OK;
            
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOFBSER;
    END

    ID_OK = 0; -- On se servira de cette variable pour les tests sur IP/Hôtes...
    
    /* Nettoyage des paramètres */
    I_TFBSERVER_NAME = TRIM(:I_TFBSERVER_NAME);
    IF (:I_TFBSERVER_NAME = '') THEN EXCEPTION EX_NONULL (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME = 'EX_NONULL')
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%')
		|| 'FBSERVER_NAME'
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%'); 

    I_TFBSERVER_FBADMLOGIN = TRIM(I_TFBSERVER_FBADMLOGIN);
    IF (I_TFBSERVER_FBADMLOGIN = '') THEN EXCEPTION EX_NONULL (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME = 'EX_NONULL')
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%')
		|| 'FBSERVER_FBADMLOGIN'
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%');

    I_TFBSERVER_FBADMPASSWD = TRIM(I_TFBSERVER_FBADMPASSWD);
    I_TFBSERVER_LIBROOTPATH=TRIM(I_TFBSERVER_LIBROOTPATH);
    
    /*
        Vérification des IP/Hostname (HOST peut-être un nom d'hôte ou une IP V4/V6
        On teste 
        - IPV4 (la plus contraignante en terme de forme)
        - Puis une IP V6
        - Puis un nom d'hôte
        Si aucun ne passe, on considère que l'on a passé une IP/Nom d'hôte invalide
        Attention, ces tests sont relativments peu complets (REGEXP FB +/- limitées)
        Idéalement, les Clients/NAS devraient tester à leur niveau à l'aide de bib. de test plus abouties
        Les limitations suivantes doivent être prisent en compte
        IPV4 : (rappel : 011 [0 non représentatif] est valide dans n'importe que segment ...)
            Centaine : normallement Ok (si présente, doivent être 0->2
            Dizaine/Unité : Impossible à tester correctement, par exemple 277 est possible car 177 l'est (il faudrait pouvoir tester par rapport à la centaine)...
        IPV6 : Normallement Ok sauf que le quantifer {1,8} ne fonctionne pas sur l'expression souhaitée (on dit donc que le groupe de 2 octeets doit exister au moins deux fois)
        Nom d'hote : Accepte tous les ALPHANUM  (taille de chaque segment de 63 caractères)
            Attention, un nom d'hote peut-être précisé en forme courte (ie toto vs toto.titi.fr) (cf. suffixe DNS etc)
            Attention, un nom d'hôte peut être valide sous la forme numérique XXX.XXX.XXX.XXX (conflit avec IPV4), par exemple 465.123.789.158
                Pour contourner cela, si un nom d'hôte est précisé sous cette forme, la vérification considère que c'est une IPV4 (choix arbitraire)
    */
    I_TFBSERVER_HOST = TRIM(:I_TFBSERVER_HOST);
    IF (I_TFBSERVER_HOST != '' ) THEN
    BEGIN
        -- S'il n'y a que des numériques et des points, on considères que l'on donne une IPV4
        -- Attention : RE incomplète, car autorise >255 sur les segments...
        -- TODO : La forme [[:DIGIT:]^3-9]?[[:DIGIT:]]{1,2}(.[[:DIGIT:]^3-9]?[[:DIGIT:]]{1,2}){3} (quantifier 3) ne fonctionne pas pour une raison qui m'échappe ???
        IF (I_TFBSERVER_HOST SIMILAR TO
            '[[:DIGIT:]]{1,3}.[[:DIGIT:]]{1,3}.[[:DIGIT:]]{1,3}.[[:DIGIT:]]{1,3}' -- Dotted dash notation ==> IPV4
            ) THEN -- On essai d'aller plus loin...
        BEGIN
--            TEST='IPV4';
            IF (I_TFBSERVER_HOST NOT SIMILAR TO 
            '[[:DIGIT:]^3-9]?[[:DIGIT:]]{1,2}.[[:DIGIT:]^3-9]?[[:DIGIT:]]{1,2}.[[:DIGIT:]^3-9]?[[:DIGIT:]]{1,2}.[[:DIGIT:]^3-9]?[[:DIGIT:]]{1,2}'
            ) THEN 
                EXCEPTION EX_BAD_HOSTNAME;
        END
        -- Si le caractère ":" est présent, on considère que c'est une IPV6 (":" interdit en hostname)
        ELSE IF (I_TFBSERVER_HOST SIMILAR TO -- IPV6 pratiquement impossible à traiter avec les REGEXP (à fortiori FB), on effectue donc un test de base
        -- Là aussi le quantifier {1,8} ne fonctionne pas ???
            '[0-9a-fA-F]{1,4}(:[0-9a-fA-F]{1,4})+'
            ) THEN 
        BEGIN
--            TEST='IPV6';
            ID_OK=1;
        END

        ELSE -- Reste hostname valide à tester...  Hostname (RFC 952 + 1123)
        BEGIN
            -- S'il y a un point, on considère que le hostname fourni est FQDN
            IF (POSITION('.' IN I_TFBSERVER_HOST) != 0) THEN
            BEGIN
--                TEST='HOST FQDN';
                IF (I_TFBSERVER_HOST NOT SIMILAR TO -- Hostname (RFC 1123)  (on teste donc le TLD qui doit forcément être alpha)
                    '[[:ALNUM:]][[:ALNUM:]-]{1,61}(.?[[:ALNUM:]-]{1,62})*.[[:ALPHA:]]{1,62}'
                ) THEN
                    EXCEPTION EX_BAD_HOSTNAME;
            END
            ELSE -- pas de point, il ne reste qu'un nom d'hôte non FQDN (ie un mot sans point) valide
            BEGIN
--                TEST='HOST NO FQDN';
                IF (I_TFBSERVER_HOST NOT SIMILAR TO
                    '[[:ALNUM:]][[:ALNUM:]-]{1,61}'
                ) THEN
                    EXCEPTION EX_BAD_HOSTNAME;
            END
        END
    END
    
    ELSE -- Host vide ==> rejet
        EXCEPTION EX_NONULL (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME = 'EX_NONULL')
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%')
		|| 'FBSERVER_HOST'
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%'); 
    
    I_TFBSERVER_TUNNELHOST = TRIM(:I_TFBSERVER_TUNNELHOST);
    -- Voir au-dessus pour commentaire sur ces tests...
    IF (I_TFBSERVER_TUNNELHOST != '' ) THEN
    BEGIN
        IF (I_TFBSERVER_TUNNELHOST SIMILAR TO
            '[[:DIGIT:]]{1,3}.[[:DIGIT:]]{1,3}.[[:DIGIT:]]{1,3}.[[:DIGIT:]]{1,3}' 
            ) THEN
        BEGIN
--            TEST='IPV4';
            IF (I_TFBSERVER_TUNNELHOST NOT SIMILAR TO 
            '[[:DIGIT:]^3-9]?[[:DIGIT:]]{1,2}.[[:DIGIT:]^3-9]?[[:DIGIT:]]{1,2}.[[:DIGIT:]^3-9]?[[:DIGIT:]]{1,2}.[[:DIGIT:]^3-9]?[[:DIGIT:]]{1,2}'
            ) THEN 
                EXCEPTION EX_BAD_HOSTNAME;
        END
        ELSE IF (I_TFBSERVER_TUNNELHOST SIMILAR TO
            '[0-9a-fA-F]{1,4}(:[0-9a-fA-F]{1,4})+'
            ) THEN 
        BEGIN
--            TEST='IPV6';
            ID_OK=1;
        END

        ELSE
        BEGIN
            IF (POSITION('.' IN I_TFBSERVER_TUNNELHOST) != 0) THEN
            BEGIN
--                TEST='HOST FQDN';
                IF (I_TFBSERVER_TUNNELHOST NOT SIMILAR TO
                    '[[:ALNUM:]][[:ALNUM:]-]{1,61}(.?[[:ALNUM:]-]{1,62})*.[[:ALPHA:]]{1,62}'
                ) THEN
                    EXCEPTION EX_BAD_HOSTNAME;
            END
            ELSE
            BEGIN
--               TEST='HOST NO FQDN';
                IF (I_TFBSERVER_TUNNELHOST NOT SIMILAR TO
                    '[[:ALNUM:]][[:ALNUM:]-]{1,61}'
                ) THEN
                    EXCEPTION EX_BAD_HOSTNAME;
            END
        END
    END

    BEGIN
        UPDATE OR INSERT INTO TFBSERVER (ID, NAME, TCPPORT, HOST, TUNNELPORT, TUNNELHOST,LIBROOTPATH, FBADMLOGIN, FBADMPASSWD)
        VALUES (
            NULLIF(:I_TFBSERVER_ID,0),
            :I_TFBSERVER_NAME, 
            NULLIF(:I_TFBSERVER_TCPPORT,0), 
            :I_TFBSERVER_HOST, 
            NULLIF(:I_TFBSERVER_TUNNELPORT,0), 
            NULLIF(:I_TFBSERVER_TUNNELHOST,''),
            NULLIF(:I_TFBSERVER_LIBROOTPATH,''),
            :I_TFBSERVER_FBADMLOGIN,
            NULLIF(:I_TFBSERVER_FBADMPASSWD,'')
        )
        MATCHING (ID)
        RETURNING ID INTO FBSERVER_ID;

		SUSPEND;
        
--		Pour l'instant on laisse l'erreur FB...
--         WHEN ANY DO
--             -- Récupération du code générique d'erreur et ajout d'informations complémentaires...
--             EXCEPTION EX_ERRGEN (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME='EX_ERRGEN') ||
--                 IIF(:I_TFBSERVER_ID IS NULL,'Ajout','Mise à jour') || ' de TFBSERVER SET_FBSERVER_INFOS) impossible suite à l''erreur non prise en charge suivante : ' ||
--                 'GDS : "' || GDSCODE || '" - SQL : "' || SQLCODE || '"';

    END
END  ^

ALTER PROCEDURE SET_GEDGROUP_INFOS (I_TGEDGROUP_ID INTEGER NOT NULL,
I_TGEDGROUP_TOWNER_ID INTEGER NOT NULL,
I_TGEDGROUP_NAME VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TGEDGROUP_TYPE SMALLINT NOT NULL DEFAULT 0,
I_TGEDGROUP_COMMENT VARCHAR(8164) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDGROUP_PROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDGROUP_NO_MODIF_DATE BOOLEAN NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDGROUP_ID INTEGER)
AS 
/*
	Création (ID=0) ou MAJ d'un Groupe d'utilisateur GED

V22 :
	Exception EX_NONULL codifiée

MAJ V32 :
	- Ajout TYPE + PROFILE ID
	- Exception EX_NONULL recodifiée "%...%" (uniformisation des délimiteurs de macros)

MAJ V39
    - Les dates MAJ sont initialisées ici (plus dans le trigger) via I_TOWNER_NO_MODIF_DATE

*/
DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    
DECLARE VARIABLE MODIF_DATE TIMESTAMP;

BEGIN
    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);

    ID_OK = Null;
    
    -- Modif V39 : on récupère les infos du groupe pour notamment la date MODIF_DATE et on en profite pour ajouter un contrôle sur la présence
    IF (I_TGEDGROUP_ID !=0) THEN
    BEGIN
        EXECUTE STATEMENT '
            SELECT ID, MODIF_DATE FROM TGEDGROUP
            WHERE TGEDGROUP.ID=' || :I_TGEDGROUP_ID
            INTO :ID_OK, MODIF_DATE;
            
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDGROUP;
    END

    ID_OK = Null;
    SQL_WHERE = '';
    
    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 
    EXECUTE STATEMENT '
        SELECT ID FROM TOWNER
        WHERE TOWNER.ID=' || :I_TGEDGROUP_TOWNER_ID || IIF (:SQL_WHERE != '' , ' AND (' || :SQL_WHERE || ')', '')
        INTO ID_OK;

	IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;

    ID_OK = Null;
    
    /* Profil (si passé non Null) utilisable...*/
    IF (I_TGEDGROUP_PROFILE_ID !=0) THEN
    BEGIN
        EXECUTE STATEMENT '
            SELECT ID FROM TPROFILE
            WHERE ID=' || I_TGEDGROUP_PROFILE_ID
            INTO :ID_OK;
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOPROFILE;
    END

    I_TGEDGROUP_NAME=TRIM(I_TGEDGROUP_NAME);
    IF (I_TGEDGROUP_NAME = '') THEN
        EXCEPTION EX_NONULL (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME = 'EX_NONULL')
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%')
		|| 'GEDGROUP_NAME'
		|| COALESCE((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','MACRO_DELIM')),'%');
    
	-- Ancienne date de modif init plus haut ; on réinit le cas échéant
	IF (:I_TGEDGROUP_ID = 0 OR :I_TGEDGROUP_NO_MODIF_DATE = 0) THEN MODIF_DATE = CURRENT_TIMESTAMP;

    BEGIN
        UPDATE OR INSERT INTO TGEDGROUP (ID,MODIF_DATE, TOWNER_ID, NAME, "TYPE", "COMMENT",TPROFILE_ID)
        VALUES (
            NULLIF(:I_TGEDGROUP_ID,0), -- NULL si 0 (insertion car non existant)
            :MODIF_DATE,
            :I_TGEDGROUP_TOWNER_ID, 
			:I_TGEDGROUP_NAME,
			NULLIF(:I_TGEDGROUP_TYPE,0),
			NULLIF(:I_TGEDGROUP_COMMENT,''),
			NULLIF(:I_TGEDGROUP_PROFILE_ID,0)
        )
        MATCHING (ID)
        RETURNING ID INTO GEDGROUP_ID;
        SUSPEND;
        WHEN GDSCODE unique_key_violation DO -- Violation OWNER/NAME...
            EXCEPTION EX_GEDGROUP_EXISTS;
	END
END ^

ALTER PROCEDURE SET_GEDPARAM (I_TGEDPARAM_ID INTEGER NOT NULL,
I_TGEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TGEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDPARAM_TYPE TYPE_PARAM NOT NULL DEFAULT 1,
I_TGEDPARAM_CLASS INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDPARAM_PROTECTION STATE NOT NULL DEFAULT 2,
I_TGEDPARAM_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAM_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDPARAM_ID INTEGER,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8)
AS 
/*
	Ajoute ou MAJ (ID=0) d'un paramètre GED

	Les STATES OWNER et LIB sont évalués
	
	L'unicité est déclarée dans la table, au niveau de SETION + NAME + OWNER_ID
	Toutefois, ceci n'est pas suffisant car :
	- Un paramètre spécifique à un OWNER ne doit pas pouvoir être ajouté s'il existe déjà globalement (OWNER_ID IS NULL AND I_TGEDPARAM_TOWNER_ID <>0 [idem NOT NULL])
	- Un paramètre spécifique à un OWNER peut-être être ajouté s'il existe déjà pour un autre OWNER (OWNER_ID IS NOT NULL AND <> I_TGEDPARAM_TOWNER_ID)
	- L'administrateur ne doit pas pouvoir ajouter un paramètre déjà existant pour un OWNER (ONWER_ID IS NOT NULL)

MAJ V11 : 
- Ajout SYSTEM
- Suppression paramètre VALUEBLB mis à jour par ailleurs

V20 :
    - SYSTEM ==> PROTECTION

V21 :
	- ajout TGEDDPARAM.CLASS

V31 :
	- Exception spécifique

V40 :
	- Ajout GEDPARAM_MODIF_DATE en sortie
    - Ajout de contraintes en création 
        * pas de doublons sur dico standard ou dico sous-domaine sauf au niveau des libs
        * On vérifie que les sections OWNER/LIB soit correctes si création pour un sous-domaine et/ou une bibliothèque
            - Au niveau des sections autorisées par TDOMPARAM:DOMAIN/GEDPARAM_SECTIONS_OWNER_CREATE (PS GET_GEDPARAM_SECTION_OWNER_OK)
            ou
            - Au niveau des sections autorisées par TDOMPARAM:DOMAIN/GEDPARAM_SECTIONS_OWNER (sous-domaine) ou TDOMPARAM:DOMAIN/GEDPARAM_SECTIONS_LIB (bilbiothèque)

*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);

DECLARE VARIABLE SECTION_OK BOOLEAN;

DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);

	ID_OK = Null;
	SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
	
    /* Nettoyage des paramètres */
    I_TGEDPARAM_SECTION = TRIM(I_TGEDPARAM_SECTION);
	
	-- Tentative de MAJ, on vérifie que le GEDPARAM existe déjà
	IF (I_TGEDPARAM_ID != 0) THEN
	BEGIN
        IF (NOT EXISTS(SELECT ID FROM TGEDPARAM WHERE ID=:I_TGEDPARAM_ID)) THEN EXCEPTION EX_NOGEDPARAM;
    END
	
    IF (I_TGEDPARAM_TLIBRARY_ID != 0) THEN
    BEGIN
        ID_OK=Null;

       /* Serveur Firebird (si non Null) utilisable outrepassable...*/
        IF (:I_TFBSERVER_STATE = '' ) THEN
            /* Etat de visibilité par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
        ELSE 
            /* Etat de visibilité demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;

        -- Library existante et modifiable...
        IF (:I_TLIBRARY_STATE ='' ) THEN
            /* Etat de modification par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
        ELSE 
            /* Etat de modification demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

        /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
        EXECUTE STATEMENT '
            SELECT TLIBRARY.ID
            FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
                LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
            WHERE TLIBRARY.ID=' || :I_TGEDPARAM_TLIBRARY_ID ||
                IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
                IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
                IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
            INTO :ID_OK;
                
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;
        
        -- Vérification de la présence du OWNER_ID en paramètre
        IF (I_TGEDPARAM_TOWNER_ID !=0) THEN
        BEGIN
            IF (NOT EXISTS(SELECT ID FROM TLIBRARY WHERE ID=:I_TGEDPARAM_TLIBRARY_ID AND TOWNER_ID=:I_TGEDPARAM_TOWNER_ID)) THEN
                EXCEPTION EX_BADOWNER;
        END
        ELSE -- sinon on l'initialise nous-même
            SELECT TOWNER_ID FROM TLIBRARY
            WHERE ID=:I_TGEDPARAM_TLIBRARY_ID
            INTO :I_TGEDPARAM_TOWNER_ID;
            
        -- Les vérifications de section OK sont effectuées plus bas...

    END

    -- I_TGEDPARAM_TOWNER_ID peut-être passé en paramètre ou initialisé plus haut dans les traitements de vérification de lib
    IF (I_TGEDPARAM_TOWNER_ID !=0) THEN
    BEGIN
        /* Owner utilisable outrepassable)... */
        IF (:I_TOWNER_STATE = '' ) THEN
            /* Etat de modification par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
        ELSE 
            /* Etat de modification demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

        EXECUTE STATEMENT '
            SELECT ID FROM TOWNER
            WHERE ID=' || :I_TGEDPARAM_TOWNER_ID || IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
            INTO ID_OK;

        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;
        
        -- Quelque soit le type de GEDPARAM (OWNER.LIB), on vérifie que la section corresponde à une section autorisée
        SELECT OK FROM GET_GEDPARAM_SECTION_OWNER_OK(:I_TGEDPARAM_SECTION) INTO SECTION_OK;
        
        -- Section générale non autorisée, on regarde si on est dans une section valide en fonction du type de paramètre (OWNER/LIB)
        IF (SECTION_OK!=1) THEN
        BEGIN

            -- GEDPARAM OWNER, on vérifie la section
            IF (I_TGEDPARAM_TLIBRARY_ID = 0) THEN
            BEGIN
                IF ((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','GEDPARAM_SECTION_OWNER')) != I_TGEDPARAM_SECTION) THEN
                    EXCEPTION EX_GEDPARAM_SECTION_KO;
            END

            -- GEDPARAM LIB, on vérifie la section
            ELSE
            BEGIN
                IF ((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','GEDPARAM_SECTION_LIB')) != I_TGEDPARAM_SECTION) THEN
                    EXCEPTION EX_GEDPARAM_SECTION_KO;
            END
        END
        

        /*
        -- Pour mémoire, ne devrait plus arriver avec les sections dédiées...

        -- On vérifie que la section + name n'existe pas globalement (si c'est un autre OWNER, c'est Ok)...
        -- V40 : Normalement cette vérification n'est plus si importante car on doit maintenant utiliser des sections/obligatoires pour les GEDPARAM OWNER/LIB
        -- Mais ça ne mange pas de pain (TODO voir perf de la PS avec et sans cette vérification ?)
        IF (EXISTS(SELECT ID FROM TGEDPARAM WHERE ID!=:I_TGEDPARAM_ID AND SECTION=:I_TGEDPARAM_SECTION AND NAME=:I_TGEDPARAM_NAME AND TOWNER_ID IS NULL)) THEN
            EXCEPTION EX_GEDPARAM_EXISTS;

        -- idem
        IF (EXISTS(SELECT ID FROM TGEDPARAM WHERE ID!=:I_TGEDPARAM_ID AND SECTION=:I_TGEDPARAM_SECTION AND NAME=:I_TGEDPARAM_NAME AND TOWNER_ID=:I_TGEDPARAM_TOWNER_ID AND TLIBRARY_ID IS NOT NULL)) THEN
            EXCEPTION EX_GEDPARAM_EXISTS;
        */
    END
    ELSE
    BEGIN
        /* On essaie d'initialiser un paramètre global, on vérifie donc que le même paramètre n'existe pas déjà pour un autre OWNER/LIB */
        IF (:I_TGEDPARAM_SECTION IN(
            (SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','GEDPARAM_SECTION_OWNER')),
            (SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','GEDPARAM_SECTION_LIB'))
        )) THEN
            EXCEPTION EX_BAD_PARAM;
    END

    /* Nettoyage des autres paramètres */
    I_TGEDPARAM_NAME = TRIM(I_TGEDPARAM_NAME);
    I_TGEDPARAM_DEFAULTVALUE = TRIM(I_TGEDPARAM_DEFAULTVALUE);
    I_TGEDPARAM_COMMENT = TRIM(I_TGEDPARAM_COMMENT);	

    UPDATE OR INSERT INTO TGEDPARAM (ID, "SECTION", "NAME", "TYPE", "CLASS", DEFAULTVALUE, "COMMENT", PROTECTION, TOWNER_ID, TLIBRARY_ID)
        VALUES (
			NULLIF(:I_TGEDPARAM_ID,0),
            :I_TGEDPARAM_SECTION,
            NULLIF(:I_TGEDPARAM_NAME,''),
            :I_TGEDPARAM_TYPE,
			:I_TGEDPARAM_CLASS,
            NULLIF(:I_TGEDPARAM_DEFAULTVALUE,''),
            NULLIF(:I_TGEDPARAM_COMMENT,''),
			:I_TGEDPARAM_PROTECTION,
            NULLIF(:I_TGEDPARAM_TOWNER_ID,0),
            NULLIF(:I_TGEDPARAM_TLIBRARY_ID,0)
        )
        MATCHING (ID)
        RETURNING ID, (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)) INTO :GEDPARAM_ID, :GEDPARAM_MODIF_DATE;

		SUSPEND;

		WHEN GDSCODE unique_key_violation DO -- Violation SECTION/NAME/OWNER
			EXCEPTION EX_GEDPARAM_EXISTS;

END ^

ALTER PROCEDURE SET_GEDPARAMOWNER (I_TOWNER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TGEDPARAMOWNER_VALUE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMOWNER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMOWNER_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMOWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8,
OWNER_STATE STATE)
AS 
/*
	Ajout/MAJ d'un paramètre GED à un OWNER
	
	L'ensemble des datas doit être passé à cette procédure

	Une erreur est levée si le paramètre existe déjà dans la section définie...
	
V21 :
- Création

V40 :
	- Factorisation TGEDPARAM
	- retourne les mêmes valeurs que GET_GEDPARAMOWNER (Attention, cette PS devient SELECTABLE)

*/

DECLARE VARIABLE ID_OK Integer;
DECLARE VARIABLE SQL_WHERE VARCHAR(8000);

BEGIN

	ID_OK = Null;
	SQL_WHERE = '';

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 

    /* Existence/visibilité du OWNER demandé */
    EXECUTE STATEMENT '
        SELECT TOWNER.ID
		FROM TOWNER
        WHERE TOWNER.ID=' || :I_TOWNER_ID ||
            IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '') 
        INTO :ID_OK;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;

    /* Nettoyage des paramètres */

	-- V40 V2 : on travaille directement sur GEDPARAM_ID
-- 	I_TGEDPARAM_SECTION = TRIM(I_TGEDPARAM_SECTION);
-- 	I_TGEDPARAM_NAME = TRIM(I_TGEDPARAM_NAME);
    -- V40 : TGEDPARAM.COMMENT
	-- I_TGEDPARAMOWNER_COMMENT = TRIM(I_TGEDPARAMOWNER_COMMENT);

    I_TGEDPARAMOWNER_VALUE = TRIM(I_TGEDPARAMOWNER_VALUE);

	SELECT 
        ID,
        SECTION,
        "NAME",
        "TYPE",
        COALESCE("COMMENT",''),
        CLASS,
		PROTECTION,
        (SELECT DATE_STRING FROM GET_DATE_STRING(MODIF_DATE)),
		COALESCE(TOWNER_ID,0),
		COALESCE(TLIBRARY_ID,0),
		COALESCE(DEFAULTVALUE,'')
        
	FROM TGEDPARAM
	WHERE ID=:I_TGEDPARAM_ID
	INTO
        GEDPARAM_ID,
        GEDPARAM_SECTION,
        GEDPARAM_NAME,
        GEDPARAM_TYPE,
        GEDPARAM_COMMENT,
        GEDPARAM_CLASS,
        GEDPARAM_PROTECTION,
        GEDPARAM_MODIF_DATE,	
        GEDPARAM_OWNER_ID,
        GEDPARAM_LIBRARY_ID,
		GEDPARAM_DEFAULTVALUE
    ;
        

    IF (:GEDPARAM_ID IS NULL) THEN EXCEPTION EX_NOGEDPARAM;

	UPDATE OR INSERT INTO TGEDPARAMOWNER(TGEDPARAM_ID, TOWNER_ID, "VALUE")
	VALUES (
		:GEDPARAM_ID,
		:I_TOWNER_ID,
		NULLIF(:I_TGEDPARAMOWNER_VALUE,'')
	)
	MATCHING (TOWNER_ID, TGEDPARAM_ID)
	RETURNING 
		TOWNER_ID,
		COALESCE("VALUE",''),
		IIF(VALUEBLB IS NULL,0,1),
        (SELECT DATE_STRING FROM GET_DATE_STRING(MODIF_DATE))
    
    INTO
        OWNER_ID,
        GEDPARAMOWNER_VALUE,
        GEDPARAMOWNER_VALUEBLB_FILLED,
        GEDPARAMOWNER_MODIF_DATE
    ;
	
	SUSPEND;

END ^

ALTER PROCEDURE SET_GEDPARAMOWNER_VALUEBLB (I_TOWNER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TGEDPARAMOWNER_VALUEBLB BLOB NOT NULL DEFAULT '')
RETURNS (GEDPARAMOWNER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8)
AS 
/*
	MAJ d'une valeur BLOB pour un paramètre GED Profil

	Les STATES ne sont PAS  évalués

	Le paramètre concerné doit exister préalablement à l'appel de cette PS

V40 :
	- Factorisation TGEDPARAM
	- retourne GEDPARAMOWNER_MODIF_DATE (Attention, cette PS devient SELECTABLE)
*/

DECLARE VARIABLE ID_OK Integer;
BEGIN

    /* Nettoyage des paramètres */
	-- V40 V2 : on travaille sur GEDPARAM_ID
-- 	I_TGEDPARAM_SECTION = TRIM(I_TGEDPARAM_SECTION);
-- 	I_TGEDPARAM_NAME = TRIM(I_TGEDPARAM_NAME);

	-- V40 : Vérification de l'existence du GEDPARAM...
	ID_OK = NULL;
	
	SELECT ID
	FROM TGEDPARAM
	-- V40 V2 : on travaille directement sur GEDPARAM_ID
	--WHERE "SECTION" = :I_TGEDPARAM_SECTION AND "NAME" = :I_TGEDPARAM_NAME 
	WHERE ID=:I_TGEDPARAM_ID
	INTO ID_OK;

    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDPARAM;

    UPDATE TGEDPARAMOWNER
        SET VALUEBLB = NULLIF(:I_TGEDPARAMOWNER_VALUEBLB,'')
        WHERE
            TOWNER_ID = :I_TOWNER_ID
			AND TGEDPARAM_ID = :ID_OK
        RETURNING (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMOWNER.MODIF_DATE)) INTO :GEDPARAMOWNER_MODIF_DATE;

        SUSPEND;

	IF (ROW_COUNT = 0) THEN
		EXCEPTION EX_NOGEDPARAMOWNER;
            
END ^

ALTER PROCEDURE SET_GEDPARAMPROF (I_TPROFILE_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TGEDPARAMPROF_VALUE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (PROFILE_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMPROF_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMPROF_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMPROF_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8)
AS 
/*
	Ajout/MAJ d'un paramètre GED à un Profil
	
	L'ensemble des datas doit être passé à cette procédure

	Une erreur est levée si le paramètre existe déjà dans la section définie...
	
MAJ V11 :
    - Suppression I_TGEDPARAMPROF_VALUEBLB

V40 :
    - Factorisation GEDPARAM
	- retourne les mêmes valeurs que GET_GEDPARAMPROF (Attention, cette PS devient SELECTABLE)
*/

DECLARE VARIABLE ID_OK Integer;
DECLARE VARIABLE SQL_WHERE VARCHAR(8000);


BEGIN

	ID_OK = Null;
	SQL_WHERE = '';

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 

    /* Existence/visibilité du PROFILE demandé (OWNER STATE OK)*/
    EXECUTE STATEMENT '
        SELECT TPROFILE.ID, TPROFILE.TOWNER_ID
		FROM TPROFILE INNER JOIN TOWNER ON TPROFILE.TOWNER_ID=TOWNER.ID
        WHERE TPROFILE.ID=' || :I_TPROFILE_ID ||
            IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '') 
        INTO :ID_OK, :OWNER_ID;
            
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOPROFILE;

    /* Nettoyage des paramètres */
	-- V40 V2 : on travaille directement sur GEDPARAM_ID
-- 	I_TGEDPARAM_SECTION = TRIM(I_TGEDPARAM_SECTION);
-- 	I_TGEDPARAM_NAME = TRIM(I_TGEDPARAM_NAME);
    -- V40 : TGEDPARAM.COMMENT
	--I_TGEDPARAMPROF_COMMENT = TRIM(I_TGEDPARAMPROF_COMMENT);	
    I_TGEDPARAMPROF_VALUE = TRIM(I_TGEDPARAMPROF_VALUE);

	-- V40 : Vérification de l'existence du GEDPARAM...
	ID_OK = NULL;
	
	SELECT 
        ID,
        SECTION,
        "NAME",
        "TYPE",
        COALESCE("COMMENT",''),
        CLASS,
		PROTECTION,
        (SELECT DATE_STRING FROM GET_DATE_STRING(MODIF_DATE)),
		COALESCE(TOWNER_ID,0),
		COALESCE(TLIBRARY_ID,0),
		COALESCE(DEFAULTVALUE,'')
        
	FROM TGEDPARAM
	WHERE ID=:I_TGEDPARAM_ID
	INTO
        GEDPARAM_ID,
        GEDPARAM_SECTION,
        GEDPARAM_NAME,
        GEDPARAM_TYPE,
        GEDPARAM_COMMENT,
        GEDPARAM_CLASS,
        GEDPARAM_PROTECTION,
        GEDPARAM_MODIF_DATE,	
        GEDPARAM_OWNER_ID,
        GEDPARAM_LIBRARY_ID,
		GEDPARAM_DEFAULTVALUE
    ;

    IF (:GEDPARAM_ID IS NULL) THEN EXCEPTION EX_NOGEDPARAM;

	BEGIN
		UPDATE OR INSERT INTO TGEDPARAMPROF(TGEDPARAM_ID, TPROFILE_ID, "VALUE")
		VALUES (
            :GEDPARAM_ID,
			:I_TPROFILE_ID,
			NULLIF(:I_TGEDPARAMPROF_VALUE,'')
		)
		MATCHING (TPROFILE_ID, TGEDPARAM_ID)
        RETURNING
            TPROFILE_ID,            
			COALESCE(TGEDPARAMPROF."VALUE",''),
			IIF(TGEDPARAMPROF.VALUEBLB IS NULL,0,1),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMPROF.MODIF_DATE))
        INTO
            PROFILE_ID,
            -- OWNER_ID,==> Init plus haut lors de la recherche de PROFILE OK
            GEDPARAMPROF_VALUE,
            GEDPARAMPROF_VALUEBLB_FILLED,
            GEDPARAMPROF_MODIF_DATE
        ;
        
        SUSPEND;

	END

END ^

ALTER PROCEDURE SET_GEDPARAMPROF_VALUEBLB (I_TPROFILE_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TGEDPARAMPROFVALUEBLB BLOB NOT NULL DEFAULT '')
RETURNS (GEDPARAMPROF_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8)
AS 
/*
	MAJ d'une valeur BLOB pour un paramètre GED Profil

	Les STATES ne sont PAS  évalués

	Le paramètre concerné doit exister préalablement à l'appel de cette PS
	
V40 :
	- Factorisation TGEDPARAM	
	- retourne GEDPARAMPROF_MODIF_DATE (Attention, cette PS devient SELECTABLE)

*/

DECLARE VARIABLE ID_OK Integer;

BEGIN

    /* Nettoyage des paramètres */
	-- V40 V2 : on travaille sur GEDPARAM_ID
--	I_TGEDPARAM_SECTION = TRIM(I_TGEDPARAM_SECTION);
--	I_TGEDPARAM_NAME = TRIM(I_TGEDPARAM_NAME);

	-- V40 : Vérification de l'existence du GEDPARAM...
	ID_OK = NULL;
	
	SELECT ID
	FROM TGEDPARAM
	-- V40 V2 : on travaille directement sur GEDPARAM_ID
	--WHERE "SECTION" = :I_TGEDPARAM_SECTION AND "NAME" = :I_TGEDPARAM_NAME 
	WHERE ID=:I_TGEDPARAM_ID
	INTO ID_OK;

    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDPARAM;

    UPDATE TGEDPARAMPROF
        SET VALUEBLB = NULLIF(:I_TGEDPARAMPROFVALUEBLB,'')
        WHERE
            TPROFILE_ID = :I_TPROFILE_ID 
            AND TGEDPARAM_ID = :ID_OK
        RETURNING (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMPROF.MODIF_DATE)) INTO :GEDPARAMPROF_MODIF_DATE;

        SUSPEND;


	IF (ROW_COUNT = 0) THEN
		EXCEPTION EX_NOGEDPARAMPROF;
            
END ^

ALTER PROCEDURE SET_GEDPARAMUSER (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAMUSER_VALUE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER,
LIBRARY_ID INTEGER,
GEDPARAM_SECTION VARCHAR(40) CHARACTER SET UTF8,
GEDPARAM_NAME VARCHAR(80) CHARACTER SET UTF8,
GEDPARAM_TYPE TYPE_PARAM,
GEDPARAMUSER_VALUE VARCHAR(100) CHARACTER SET UTF8,
GEDPARAMUSER_VALUEBLB_FILLED BOOLEAN,
GEDPARAM_COMMENT VARCHAR(8190) CHARACTER SET UTF8,
GEDPARAMUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
OWNER_ID INTEGER,
FBSERVER_ID INTEGER,
GEDPARAM_ID INTEGER,
GEDPARAM_CLASS INTEGER,
GEDPARAM_PROTECTION STATE,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8,
GEDPARAM_OWNER_ID INTEGER,
GEDPARAM_LIBRARY_ID INTEGER,
GEDPARAM_DEFAULTVALUE VARCHAR(255) CHARACTER SET UTF8)
AS 
/*
	Ajout/MAJ d'un paramètre GED pour un utilisateur GED
	
	L'ensemble des datas doit être passé à cette procédure

	Une erreur est levée si le paramètre existe déjà dans la section définie...
	
MAJ V11 :
- Suppression de VALUEBLOB en entrée (MAJ par ailleurs)

V40 :
	- Factorisation GEDPARAM
	- retourne les mêmes valeurs que GET_GEDPARAMUSER (Attention, cette PS devient SELECTABLE)
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);

DECLARE VARIABLE ID_OK Integer;    

BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
	I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);

	ID_OK = Null;

    SQL_WHERE_OWNER = '';
	SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
    SQL_WHERE_GEDUSER = '';

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER;

    -- Utilisateur existant et modifiable...
    IF (I_TGEDUSER_STATE = '' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER; 

    EXECUTE STATEMENT '
        SELECT TGEDUSER.ID, TGEDUSER.TOWNER_ID FROM TGEDUSER INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
        WHERE TGEDUSER.ID=' || :I_TGEDUSER_ID ||
            IIF (:SQL_WHERE_GEDUSER != '' ,' AND ' || :SQL_WHERE_GEDUSER, '') ||
            IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :ID_OK, :OWNER_ID;
        
    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDUSER;

    FBSERVER_ID=0;

    IF (I_TLIBRARY_ID != 0) THEN
    BEGIN
        ID_OK=Null;

       /* Serveur Firebird (si non Null) utilisable outrepassable...*/
        IF (:I_TFBSERVER_STATE = '' ) THEN
            /* Etat de visibilité par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
        ELSE 
            /* Etat de visibilité demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;

        -- Library existante et modifiable...
        IF (:I_TLIBRARY_STATE ='' ) THEN
            /* Etat de modification par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
        ELSE 
            /* Etat de modification demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

        /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
        EXECUTE STATEMENT '
            SELECT TLIBRARY.ID, TLIBRARY.TFBSERVER_ID
            FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
                LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
            WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID ||
                IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
                IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
                IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
            INTO :ID_OK,:FBSERVER_ID ;
                
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;
    END
    
    /* Nettoyage des paramètres */
	-- V40 V2 : on travaille directement sur GEDPARAM_ID
-- 	T_TGEDPARAM_SECTION = TRIM(T_TGEDPARAM_SECTION);
-- 	I_TGEDPARAM_NAME = TRIM(I_TGEDPARAM_NAME);
    -- V40 : TGEDPARAM.COMMENT
	-- I_TGEDPARAMUSER_COMMENT = TRIM(I_TGEDPARAMUSER_COMMENT);
    I_TGEDPARAMUSER_VALUE = TRIM(I_TGEDPARAMUSER_VALUE);
    
	SELECT 
        ID,
        SECTION,
        "NAME",
        "TYPE",
        COALESCE("COMMENT",''),
        CLASS,
		PROTECTION,
        (SELECT DATE_STRING FROM GET_DATE_STRING(MODIF_DATE)),
		COALESCE(TOWNER_ID,0),
		COALESCE(TLIBRARY_ID,0),
		COALESCE(DEFAULTVALUE,'')
        
	FROM TGEDPARAM
	WHERE ID=:I_TGEDPARAM_ID
	INTO
        GEDPARAM_ID,
        GEDPARAM_SECTION,
        GEDPARAM_NAME,
        GEDPARAM_TYPE,
        GEDPARAM_COMMENT,
        GEDPARAM_CLASS,
        GEDPARAM_PROTECTION,
        GEDPARAM_MODIF_DATE,	
        GEDPARAM_OWNER_ID,
        GEDPARAM_LIBRARY_ID,
		GEDPARAM_DEFAULTVALUE
    ;

    IF (:GEDPARAM_ID IS NULL) THEN EXCEPTION EX_NOGEDPARAM;
    
	
	BEGIN
		UPDATE OR INSERT INTO TGEDPARAMUSER(TGEDPARAM_ID, TGEDUSER_ID, TLIBRARY_ID, "VALUE")
		VALUES (
            :GEDPARAM_ID,
			:I_TGEDUSER_ID,
			NULLIF(:I_TLIBRARY_ID,0),
			NULLIF(:I_TGEDPARAMUSER_VALUE,'')
		)
		MATCHING (TGEDUSER_ID, TLIBRARY_ID, TGEDPARAM_ID)
        RETURNING
            TGEDUSER_ID,
            COALESCE(TLIBRARY_ID,0),
            COALESCE("VALUE",''),
            IIF(VALUEBLB IS NULL,0,1),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMUSER.MODIF_DATE))
        INTO
            :GEDUSER_ID,
            :LIBRARY_ID,
            :GEDPARAMUSER_VALUE,
            :GEDPARAMUSER_VALUEBLB_FILLED,            
            :GEDPARAMUSER_MODIF_DATE
        ;
        
        SUSPEND;

	END

END ^

ALTER PROCEDURE SET_GEDPARAMUSER_VALUEBLB (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDPARAM_ID INTEGER NOT NULL,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDPARAMUSER_VALUEBLB BLOB NOT NULL DEFAULT '')
RETURNS (GEDPARAMUSER_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8)
AS 
/*
	MAJ d'une valeur BLOB pour un paramètre GED USER

	Les STATES ne sont PAS  évalués

	Le paramètre concerné doit exister préalablement à l'appel de cette PS
	
	
V40 :
	- Factorisation TGEDPARAM	
	- retourne GEDPARAMUSER_MODIF_DATE (Attention, cette PS devient SELECTABLE)

*/

DECLARE VARIABLE ID_OK Integer;

BEGIN


	-- V40 : Vérification de l'existence du GEDPARAM...
	ID_OK = NULL;
	
	SELECT ID
	FROM TGEDPARAM
	-- V40 V2 : on travaille directement sur GEDPARAM_ID
	--WHERE "SECTION" = :I_TGEDPARAM_SECTION AND "NAME" = :I_TGEDPARAM_NAME 
	WHERE ID=:I_TGEDPARAM_ID
	INTO ID_OK;

    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDPARAM;

    UPDATE TGEDPARAMUSER
        SET VALUEBLB = NULLIF(:I_TGEDPARAMUSER_VALUEBLB,'')
        WHERE
            TGEDUSER_ID = :I_TGEDUSER_ID AND
            COALESCE(TLIBRARY_ID,0)=:I_TLIBRARY_ID AND
            TGEDPARAM_ID = :ID_OK
        RETURNING (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAMUSER.MODIF_DATE)) INTO :GEDPARAMUSER_MODIF_DATE;
        
    SUSPEND;
            
	IF (ROW_COUNT = 0) THEN
		EXCEPTION EX_NOGEDPARAMUSER;
            
END ^

ALTER PROCEDURE SET_GEDPARAM_DEFAULTVALUEBLB (I_TGEDPARAM_ID INTEGER NOT NULL,
I_TGEDPARAM_DEFAULTVALUEBLB BLOB NOT NULL DEFAULT '')
RETURNS (GEDPARAM_ID INTEGER,
GEDPARAM_MODIF_DATE VARCHAR(20) CHARACTER SET UTF8)
AS 
/*
	MAJ d'une valeur BLOB pour un paramètre GED

	Les STATES ne sont PAS  évalués

	Le paramètre concerné doit exister préalablement à l'appel de cette PS
	

V40 :
	- Ajout d'infos GEDPARAM en sortie
*/
BEGIN

	-- update du paramètre
	UPDATE TGEDPARAM
	SET DEFAULTVALUEBLB=NULLIF(:I_TGEDPARAM_DEFAULTVALUEBLB,'')
	WHERE ID=:I_TGEDPARAM_ID
	RETURNING TGEDPARAM.ID, (SELECT DATE_STRING FROM GET_DATE_STRING(TGEDPARAM.MODIF_DATE)) INTO :GEDPARAM_ID, :GEDPARAM_MODIF_DATE;

	SUSPEND;

	IF (ROW_COUNT = 0) THEN
		EXCEPTION EX_NOGEDPARAM;

END ^

ALTER PROCEDURE SET_GEDUSER_INFOS (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDUSER_TOWNER_ID INTEGER NOT NULL,
I_TGEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TGEDUSER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_COMMENT VARCHAR(8164) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_CHARGEABLE BOOLEAN DEFAULT 0,
I_TGEDUSER_TPROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_TGEDGROUP_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_TCONTACT_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_NO_MODIF_DATE BOOLEAN NOT NULL DEFAULT 0,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TCONTACT_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER)
AS 
/*
	Création (ID=0) ou MAJ d'un utilisateur GED

MAJ V12 :
	- GED_LOGIN/GED_PASSWD ==> LOGIN/PASSWD

MAJ V14 :
	- Suppression des filtres sur LOGIN

MAJ V32 :
	- Ajout  GEDGROUP_ID

MAJ V39
    - Les dates MAJ sont initialisées ici (plus dans le trigger) via I_TGEDUSER_NO_MODIF_DATE
*/

DECLARE VARIABLE SQL_WHERE_CONTACT VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    
DECLARE VARIABLE MODIF_DATE TIMESTAMP;


BEGIN
    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TGEDUSER_STATE = TRIM(I_TGEDUSER_STATE);
    I_TCONTACT_STATE = TRIM(I_TCONTACT_STATE);

    ID_OK = Null;

    /* Vérification présence de d'utilisateur ET STATE Ok si MAJ */
    IF (I_TGEDUSER_ID != 0 ) THEN
    BEGIN
        -- Utilisateur existant et modifiable...
        IF (I_TGEDUSER_STATE = '' ) THEN
            /* Etat de modification par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
        ELSE 
            /* Etat de modification demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER; 

        EXECUTE STATEMENT '
            SELECT ID, MODIF_DATE FROM TGEDUSER
            WHERE TGEDUSER.ID=' || :I_TGEDUSER_ID || IIF (:SQL_WHERE_GEDUSER != '' ,' AND ' || :SQL_WHERE_GEDUSER, '')
            INTO :ID_OK, MODIF_DATE;
            
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDUSER;
    END
        
    ID_OK=Null;
    
    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    EXECUTE STATEMENT '
        SELECT ID FROM TOWNER
        WHERE TOWNER.ID=' || :I_TGEDUSER_TOWNER_ID || IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
        INTO ID_OK;
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;

    ID_OK=Null;

    /* contact utilisable outrepassable)... */
    IF (I_TGEDUSER_TCONTACT_ID!=0) THEN
    BEGIN
        IF (:I_TCONTACT_STATE = '' ) THEN
            /* Etat de modification par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TCONTACT.STATE') INTO :SQL_WHERE_CONTACT;
        ELSE 
            /* Etat de modification demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TCONTACT_STATE, 'TCONTACT.STATE') INTO :SQL_WHERE_CONTACT; 

        EXECUTE STATEMENT '
            SELECT TCONTACT.ID
            FROM TCONTACT INNER JOIN TOWNER ON TCONTACT.TOWNER_ID=TOWNER.ID
            WHERE TCONTACT.ID=' || :I_TGEDUSER_TCONTACT_ID ||
                IIF (:SQL_WHERE_CONTACT != '' , ' AND (' || :SQL_WHERE_CONTACT || ')', '') || 
                IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
            INTO ID_OK;

        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOCONTACT;
    END

    ID_OK=Null;
    
    /* Profil (si passé non Null) utilisable...*/
    IF (I_TGEDUSER_TPROFILE_ID !=0) THEN
    BEGIN
        EXECUTE STATEMENT '
            SELECT ID FROM TPROFILE
            WHERE ID=' || :I_TGEDUSER_TPROFILE_ID
            INTO :ID_OK;
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOPROFILE;
    END

    ID_OK=Null;
    
    /* GEDGROUP (si passé non Null) utilisable...*/
    IF (I_TGEDUSER_TGEDGROUP_ID !=0) THEN
    BEGIN
        EXECUTE STATEMENT '
            SELECT ID FROM TGEDGROUP
            WHERE ID=' || :I_TGEDUSER_TGEDGROUP_ID
            INTO :ID_OK;
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDGROUP;
    END
    
    
    /* Nettoyage des paramètres */
    I_TGEDUSER_LOGIN = TRIM(I_TGEDUSER_LOGIN);
	/* Contrôle de données supprimée en V14 */
	/*
    IF (I_TGEDUSER_LOGIN NOT SIMILAR TO '([[:ALNUM:]]|\_|.)+' ESCAPE '\') THEN
        EXCEPTION EX_ALPHAONLY_DOM_LOGIN;
	*/

    I_TGEDUSER_COMMENT = TRIM(I_TGEDUSER_COMMENT);

	-- Ancienne date de modif init plus haut ; on réinit le cas échéant
	IF (:I_TGEDUSER_ID = 0 OR :I_TGEDUSER_NO_MODIF_DATE = 0) THEN MODIF_DATE = CURRENT_TIMESTAMP;

    BEGIN
    
        UPDATE OR INSERT INTO TGEDUSER (ID, MODIF_DATE, TOWNER_ID, LOGIN, SUBSCRIBE_START, SUBSCRIBE_END, "COMMENT", CHARGEABLE, TPROFILE_ID, TGEDGROUP_ID, TCONTACT_ID)
        VALUES (
            NULLIF(:I_TGEDUSER_ID,0), -- NULL si 0 (insertion car non existant)
            :MODIF_DATE,
            :I_TGEDUSER_TOWNER_ID, 
			:I_TGEDUSER_LOGIN,
            COALESCE(CAST((SELECT DATE_STRING FROM SET_STRING_DATE(:I_TGEDUSER_SUBSCRIBE_START)) AS DATE),NULL), 
            COALESCE(CAST((SELECT DATE_STRING FROM SET_STRING_DATE(:I_TGEDUSER_SUBSCRIBE_END)) AS DATE), NULL), 
            NULLIF(:I_TGEDUSER_COMMENT,''), 
            :I_TGEDUSER_CHARGEABLE,
            NULLIF(:I_TGEDUSER_TPROFILE_ID,0),
            NULLIF(:I_TGEDUSER_TGEDGROUP_ID,0),
            NULLIF(:I_TGEDUSER_TCONTACT_ID,0)
        )
        MATCHING (ID)
        RETURNING ID INTO GEDUSER_ID;

        SUSPEND;

        WHEN GDSCODE unique_key_violation DO -- Violation OWNER/TTITLE...
            EXCEPTION EX_GED_LOGIN_EXISTS;
	END
END ^

ALTER PROCEDURE SET_GEDUSER_PASSWD (I_TGEDUSER_ID INTEGER NOT NULL,
I_TGEDUSER_PASSWD VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TGEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (GEDUSER_ID INTEGER)
AS 
/*
    Modification du mot de passe d'un utilisateur GED
    
    Paramètres :
    - I_TGEDUSER_ID : Code Utilisateur GED
    - I_TGEDUSER_GED_PASSWD : nouveau mot de passe crypté SHA256 (impossible d'effectuer cette manipulation dans Firebird)
    - I_TOWNER_STATE : voir documentation STATE
    - I_TGEDUSER_STATE : voir documentation STATE

    Particularités :

    renvoie :
        GEDUSER_ID_ID : Identifiant de l'utilisateur
        
    Attention
    - cette procédure lève des erreurs en cas d'insertion/mise à jour impossible (erreurs sous-jacentes)
    
MAJ V12 :
	- GED_PASSWD ==> PASSWD
	
V39 :
    - MAJ inconditionnelle de MODIF_DATE
*/

DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    
BEGIN

	ID_OK= Null;
	SQL_WHERE = '';

    I_TGEDUSER_STATE=TRIM(I_TGEDUSER_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    
    EXECUTE STATEMENT '
        SELECT ID FROM TGEDUSER
        WHERE TGEDUSER.ID=' || :I_TGEDUSER_ID || IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '')
        INTO ID_OK;
        
    IF (ID_OK IS NULL) THEN EXCEPTION EX_NOGEDUSER;
    

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 

    EXECUTE STATEMENT '
        SELECT TOWNER_ID FROM TGEDUSER INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
        WHERE TGEDUSER.ID=' || :I_TGEDUSER_ID || IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '')
        INTO ID_OK;
        
    IF (ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;

	SQL_WHERE=Null;
	ID_OK= Null;

    IF (I_TGEDUSER_STATE = '' ) THEN
        /* Etat de visibilité par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE;
    ELSE
        /* Etat de visibilité demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TGEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE;

    /* Nettoyage des paramètres */
    I_TGEDUSER_PASSWD = TRIM(UPPER(I_TGEDUSER_PASSWD));
    
    /* Mise à jour */
    BEGIN
        UPDATE TGEDUSER
        SET PASSWD=NULLIF(:I_TGEDUSER_PASSWD,''), MODIF_DATE=CURRENT_TIMESTAMP
        WHERE ID=:I_TGEDUSER_ID
        RETURNING ID INTO GEDUSER_ID;
        
        SUSPEND;

    END
END ^

ALTER PROCEDURE SET_LIBRARY_INFOS (I_TLIBRARY_ID INTEGER NOT NULL,
I_TLIBRARY_TOWNER_ID INTEGER NOT NULL,
I_TLIBRARY_TFBSERVER_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_DBPATH VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_GUID VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_VERSION INTEGER NOT NULL DEFAULT '',
I_TLIBRARY_COMMENT VARCHAR(500) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_CHARGEABLE BOOLEAN NOT NULL DEFAULT 0,
I_TLIBRARY_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_ACCESS_MODE SMALLINT NOT NULL DEFAULT 0,
I_TLIBRARY_ACCESS_TYPE INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_SIZE_MB BIGINT NOT NULL DEFAULT 0,
I_TLIBRARY_LAST_SIZE_CHECK VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_SIZE_MB_ORG BIGINT NOT NULL DEFAULT 0,
I_TLIBRARY_TPROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_LISTORDER INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_NO_MODIF_DATE BOOLEAN NOT NULL DEFAULT 0,
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (LIBRARY_ID INTEGER)
AS 
/*
    Ajout/modification d'une bibliothèque Novaxel dans la table correspondante (TLIBRARY)

    Si l'ID est NULL ==> Insertion
    Si ID passé ==> mise à jour d'une librairie existante
    
    Paramètres : cf table TLIBRARY

    Particularités :
    - Les clés externes (TFBSERVER_ID [si passé NOT NULL] et TOWNER_ID) sont vérifiées avant l'insertion et les exceptions correspondantes sont levées si non présents/disponibles
    - TITLE peut ne pas être connu au moment de l'insertion (Null autorisé)
    - DBPATH n'est PAS vérifié (accès au système de fichier pas toujours possible, etc.)
    - CHARGEABLE : initialisée à 1 (True) si passé à Null
    - SUBSCRIBE_START : initialisé à la date de l'insertion si passé à Null...
    - SUBSCRIBE_END : Initialisé à la date SUBSCRIBE_START + 1 an si passé à NULL...
    - ACCESS_TYPE : inutilisé actuellement
    - I_TOWNER_STATE et I_TLIBRARY_STATE permettent de préciser les STATE de MAJ (pas d'initialiser les colonnes STATE des tables (cf. PS SET_STATE pour ça)
    - À propos des règles de MAJ en update (en insertion le problème est plus simple) et des STATES :
        * Si un parent est inactif (STATE interdisant les modifications) on considère qu'il peut toutefois être mis à jour si le nouveau parent est actif
        * Les paramètres I_XXX_STATE permettent donc de préciser si on autorise la MAJ avec un nuveau parent qui ne serait pas actif (on ne teste pas l'ancien parent)
        * Par exemple, pour le OWNER :
            * on ne se préoccupe pas de TLIBRARY.TOWNER_ID existant (STATE non évalué)
            * on regarde si le I_TOWNER_ID est utilisable
                - Si c'est le cas, on peut modifier le OWNER_ID
                - Dans le cas contraire, on prend en compte le I_TOWNER_STATE pour savoir si l'on a le droit d'utiliser un OWNER_ID désactivé
    
    renvoie :
        LIBRARY_ID : Identifiant de la bibliothèque insérée si réussite
        
    Attention, cette procédure lève des erreurs en cas d'insertion/mise à jour impossible (erreurs sous-jacentes)
    Les états des enregistrments parents sont pris en compte pour les modification ou insertion

MAJ V13:
	- Ajout LIBRARY_GUID

V18 :
	- Force les paramètres NOT NULL En entrée...

V23 :
    - Ajout de SIZE_MB + LAST_SIZE_CHECK en entrée
    
V24 :
    - SIZE_MB BIGINT

V26 :
	- Dates de souscription vides possibles...
	
V31 :
    - Ajout ACCESS_MODE

V32 :
	- Ajout LISTORDER

- MAJ V36
    - Ajout LIBRARY_SIZE_MB_ORG

MAJ V39
    - Les dates MAJ sont initialisées ici (plus dans le trigger) via I_TLIBRARY_NO_MODIF_DATE

-V40
	GUID VARCHAR(40) => VARCHAR(255)
	Ajout TLIBRARY.VERSION
*/

DECLARE VARIABLE SQL_WHERE VARCHAR(8000);

DECLARE VARIABLE ID_OK Integer;    

DECLARE VARIABLE MODIF_DATE TIMESTAMP;

BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    I_TLIBRARY_STATE = TRIM(I_TLIBRARY_STATE);
    I_TFBSERVER_STATE= TRIM(I_TFBSERVER_STATE);

    ID_OK=Null;
    SQL_WHERE= '';

    /* Vérification présence de librairie ET STATE Ok si MAJ */
    IF (:I_TLIBRARY_ID != 0 ) THEN
    BEGIN
        -- Library existante et modifiable...
        IF (:I_TLIBRARY_STATE = '' ) THEN
            /* Etat de modification par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE;
        ELSE 
            /* Etat de modification demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE; 

        EXECUTE STATEMENT '
            SELECT ID, MODIF_DATE FROM TLIBRARY
            WHERE TLIBRARY.ID=' || :I_TLIBRARY_ID || IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '')
            INTO :ID_OK, MODIF_DATE;
            
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;
    END
        
    ID_OK=Null;
    SQL_WHERE= Null;
    
    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 

    EXECUTE STATEMENT '
        SELECT ID FROM TOWNER
        WHERE ID=' || :I_TLIBRARY_TOWNER_ID || IIF (:SQL_WHERE != '' , ' AND (' || :SQL_WHERE || ')', '')
        INTO ID_OK;
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;

    ID_OK=Null;
    SQL_WHERE= Null;
        
    /* Serveur Firebird (si passé non Null) utilisable outrepassable (test en ajout/MAJ)...*/
    IF (I_TLIBRARY_TFBSERVER_ID !=0) THEN
    BEGIN
        IF (:I_TFBSERVER_STATE= '' ) THEN
            /* Etat de visibilité par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE;
        ELSE 
            /* Etat de visibilité demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE;         

        EXECUTE STATEMENT '
            SELECT ID FROM TFBSERVER
            WHERE ID=' || :I_TLIBRARY_TFBSERVER_ID || IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '')
            INTO :ID_OK;
            
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOFBSER;
    END
    
    ID_OK=Null;
    SQL_WHERE= Null;

    /* Profil (si passé non Null) utilisable...*/
    IF (I_TLIBRARY_TPROFILE_ID !=0) THEN
    BEGIN
        EXECUTE STATEMENT '
            SELECT ID FROM TPROFILE
            WHERE ID=' || :I_TLIBRARY_TPROFILE_ID
            INTO :ID_OK;
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOPROFILE;
    END
    
    
    /* Nettoyage des paramètres */
    I_TLIBRARY_COMMENT = TRIM(:I_TLIBRARY_COMMENT);
    -- TODO : Voir si contrainte de TITLE dans NOVAXEL.FDB.TCONFIG ???
    I_TLIBRARY_TITLE = TRIM(:I_TLIBRARY_TITLE);
    -- Pour l'instant le PATH est obligatoire dans la table, mais pas dans la PS (doute ;-) ) on l'insère donc à '' le cas échant
    I_TLIBRARY_DBPATH = TRIM(:I_TLIBRARY_DBPATH);
    
    I_TLIBRARY_GUID=TRIM(I_TLIBRARY_GUID);

	-- Ancienne date de modif init plus haut ; on réinit le cas échéant
	IF (:I_TLIBRARY_ID = 0 OR :I_TLIBRARY_NO_MODIF_DATE = 0) THEN MODIF_DATE = CURRENT_TIMESTAMP;
    
    BEGIN
    
        UPDATE OR INSERT INTO TLIBRARY (ID,MODIF_DATE, TOWNER_ID, TFBSERVER_ID, "COMMENT", TITLE, GUID, "VERSION", DBPATH, SUBSCRIBE_START, SUBSCRIBE_END, ACCESS_MODE, ACCESS_TYPE, SIZE_MB, LAST_SIZE_CHECK, SIZE_MB_ORG, CHARGEABLE, TPROFILE_ID, LISTORDER)
        VALUES (
            NULLIF(:I_TLIBRARY_ID,0), -- NULL si 0 (insertion car non existant)
            :MODIF_DATE,
            :I_TLIBRARY_TOWNER_ID, 
            NULLIF(:I_TLIBRARY_TFBSERVER_ID,0), 
            NULLIF(:I_TLIBRARY_COMMENT,''), 
            NULLIF(:I_TLIBRARY_TITLE,''), 
            NULLIF(:I_TLIBRARY_GUID,''), 
            NULLIF(:I_TLIBRARY_VERSION,0), 
            :I_TLIBRARY_DBPATH, 
            CAST((SELECT DATE_STRING FROM SET_STRING_DATE(:I_TLIBRARY_SUBSCRIBE_START)) AS TIMESTAMP), 
            CAST((SELECT DATE_STRING FROM SET_STRING_DATE(:I_TLIBRARY_SUBSCRIBE_END)) AS TIMESTAMP), 
			:I_TLIBRARY_ACCESS_MODE,
            NULLIF(:I_TLIBRARY_ACCESS_TYPE,0), --NULL si 0
            :I_TLIBRARY_SIZE_MB, -- 0 si non passé
            CAST((SELECT DATE_STRING FROM SET_STRING_DATE(:I_TLIBRARY_LAST_SIZE_CHECK)) AS TIMESTAMP),  -- NULL si non passé (ie passé à '')
            :I_TLIBRARY_SIZE_MB_ORG, -- 0 si non passé
            :I_TLIBRARY_CHARGEABLE,
            NULLIF(:I_TLIBRARY_TPROFILE_ID,0),
            NULLIF(:I_TLIBRARY_LISTORDER,0)

        )
        MATCHING (ID)
        RETURNING ID INTO LIBRARY_ID;

        SUSPEND;

        WHEN GDSCODE unique_key_violation DO -- Violation OWNER/TTITLE...
            EXCEPTION EX_LIBTITLE_EXISTS;
            
        WHEN GDSCODE  check_constraint DO -- Check ACCESS_MODE
            EXCEPTION EX_BADACCESSMODE;
            



--		Pour l'instant on laisse l'erreur FB...
--         WHEN ANY DO
--             -- Récupération du code générique d'erreur et ajout d'informations complémentaires...
--             EXCEPTION EX_ERRGEN (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME='EX_ERRGEN') ||
--                 IIF(:I_TLIBRARY_ID IS NULL,'Ajout','Mise à jour') || ' de TLIBRARY (SET_LIB_INFOS) impossible suite à l''erreur non prise en charge suivante : ' ||
--                 'GDS : "' || GDSCODE || '" - SQL : "' || SQLCODE || '"';
    END

END ^

ALTER PROCEDURE SET_OWNER_INFOS (I_TOWNER_ID INTEGER NOT NULL,
I_TOWNER_LOGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TOWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TOWNER_NAME VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_SUBSCRIBE_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_SUBSCRIBE_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_EXTERNAL_ID VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_COMMENT VARCHAR(8164) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TOWNER_TPROFILE_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_TCONTACT_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_NO_MODIF_DATE BOOLEAN NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER)
AS 
/*
    Ajout/modification d'un propriétaire dans la table correspondante
    
    Si l'ID est NULL ==> Insertion
    Si ID passé ==> mise à jour d'un owner existant
    
    Paramètres : cf table TOWNER

    Particularités :
        - La date de MAJ (TOWNER.MODIF_DATE) est toujours mise à jour par le trigger "AINC_TOWNER"
        - I_TFBSERVER_STATE permet de préciser les conditions de STATE de MAJ (pas d'initialiser les colonnes STATE des tables (cf. PS SET_STATE ou DEL_OWNER pour ça)    

    renvoie :
        OWNER_ID : Identifiant du propriétaire inséré/modifié si réussite
        
    Attention
    - cette procédure lève des erreurs en cas d'insertion/mise à jour impossible (erreurs sous-jacentes)
    - En cas de mise à jour, la colonne TOWNER.STATE est évaluée par le trigger de la table et une erreur peut-être levée si le owner n'est pas modifiable...
    
    Les états (colonne STATE) ne sont pas pris en compte pour les insertions...

MAJ V12 :
	- Ajout TCONTACT_ID
	- DOM_LOGIN ==> LOGIN

MAJ V14 :
	- Suppression des filtres sur LOGIN/SUBDOMAIN

V26 :
	- Optimisation CAST sur dates souscriptions
	
MAJ V39
    - Les dates MAJ sont initialisées ici (plus dans le trigger) via I_TOWNER_NO_MODIF_DATE
	
*/

DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
DECLARE VARIABLE ID_OK Integer;    
DECLARE VARIABLE MODIF_DATE TIMESTAMP;

BEGIN

    I_TOWNER_STATE = TRIM(I_TOWNER_STATE);
    
    ID_OK=Null;
    SQL_WHERE= '';

    /* Vérification présence ET STATE Ok si MAJ */
    IF (:I_TOWNER_ID != 0) THEN
    BEGIN
        IF (:I_TOWNER_STATE ='' ) THEN
            /* Etat de modification par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE;
        ELSE 
            /* Etat de modification demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE; 

        EXECUTE STATEMENT '
            SELECT ID, MODIF_DATE FROM TOWNER
            WHERE TOWNER.ID=' || :I_TOWNER_ID || IIF (:SQL_WHERE != '' ,' AND ' || :SQL_WHERE, '')
            INTO :ID_OK, MODIF_DATE;
            
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;
    END

    ID_OK=Null;
    SQL_WHERE= '';

    /* Profil (si passé non Null) utilisable...*/
    IF (I_TOWNER_TPROFILE_ID !=0) THEN
    BEGIN
        EXECUTE STATEMENT '
            SELECT ID FROM TPROFILE
            WHERE ID=' || I_TOWNER_TPROFILE_ID
            INTO :ID_OK;
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOPROFILE;
    END
    
    ID_OK=Null;
    /* Contact (si passé non Null) utilisable...*/
    IF (I_TOWNER_TCONTACT_ID !=0) THEN
    BEGIN
        EXECUTE STATEMENT '
            SELECT ID FROM TCONTACT
            WHERE ID=' || I_TOWNER_TCONTACT_ID
            INTO :ID_OK;
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOCONTACT;
    END

    /* Nettoyage des paramètres */
    I_TOWNER_NAME = TRIM(:I_TOWNER_NAME);
    I_TOWNER_LOGIN=TRIM(:I_TOWNER_LOGIN);

    /* Au moins 1 caractère ALPHANUM - Supprimé en V14 */
	/*
    IF (:I_TOWNER_LOGIN NOT SIMILAR TO '([[:ALNUM:]]|\_|.)+' ESCAPE '\') THEN
        EXCEPTION EX_ALPHAONLY_DOM_LOGIN;
    I_TOWNER_SUBDOMAIN=TRIM(:I_TOWNER_SUBDOMAIN);
	*/

    /* Au moins 1 caractère ALPHANUM  - Supprimé en V14 */
	/*
    IF (:I_TOWNER_SUBDOMAIN NOT SIMILAR TO '([[:ALNUM:]]|\_|.)+' ESCAPE '\') THEN
        EXCEPTION EX_ALPHAONLY_SUBDOMAIN;
	*/

    
    I_TOWNER_EXTERNAL_ID=TRIM(:I_TOWNER_EXTERNAL_ID);
    I_TOWNER_COMMENT=TRIM(:I_TOWNER_COMMENT);

	-- Ancienne date de modif init plus haut ; on réinit le cas échéant
	IF (:I_TOWNER_ID = 0 OR :I_TOWNER_NO_MODIF_DATE = 0) THEN MODIF_DATE = CURRENT_TIMESTAMP;
    
    BEGIN
        UPDATE OR INSERT INTO TOWNER (ID, MODIF_DATE, NAME, SUBDOMAIN, LOGIN, SUBSCRIBE_START,SUBSCRIBE_END, EXTERNAL_ID, "COMMENT",TPROFILE_ID, TCONTACT_ID)
        VALUES (
            NULLIF(:I_TOWNER_ID,0), -- NULL si 0 (insertion car non existant)
            :MODIF_DATE,
            NULLIF(:I_TOWNER_NAME,''), -- NULL autorisé depuis V7...
			:I_TOWNER_SUBDOMAIN, -- Unique
            :I_TOWNER_LOGIN, -- Unique
            CAST((SELECT DATE_STRING FROM SET_STRING_DATE(:I_TOWNER_SUBSCRIBE_START)) AS DATE), 
            CAST((SELECT DATE_STRING FROM SET_STRING_DATE(:I_TOWNER_SUBSCRIBE_END)) AS DATE), 
            NULLIF(:I_TOWNER_EXTERNAL_ID,''), -- Unique
            NULLIF(:I_TOWNER_COMMENT,''),
            NULLIF(:I_TOWNER_TPROFILE_ID,0),
            NULLIF(:I_TOWNER_TCONTACT_ID,0)
        )
        MATCHING (ID)
        RETURNING ID INTO OWNER_ID;
        
        SUSPEND;

        /* LOGIN (TABLE CONSTRAINT) déjà existant (recréé après suppression logique initiale) */
        WHEN GDSCODE unique_key_violation DO EXCEPTION EX_DOM_LOGIN_EXISTS;
        
        -- EXTERNAL_ID/SUBDOMAIN existant (IDX Unique)
        WHEN GDSCODE no_dup DO EXCEPTION EX_OWNER_INFOS_DUPLICATE;
        
    END
END ^

ALTER PROCEDURE SET_OWNER_PASSWD (I_TOWNER_ID INTEGER NOT NULL,
I_TOWNER_PASSWD VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (OWNER_ID INTEGER)
AS 
/*
    Modification du mot de passe du propriétaire
    
    Paramètres :
    - I_TOWNER_ID : Code du propriétaire
    - I_TOWNER_PASSWD : nouveau mot de passe HASH SHA256 (impossible d'effectuer cette manipulation dans Firebird)
    - I_TOWNER_STATE : voir documentation STATE

    Particularités :

    renvoie :
        OWNER_ID : Identifiant du propriétaire inséré/modifié si réussite
        
    Attention
    - cette procédure lève des erreurs en cas d'insertion/mise à jour impossible (erreurs sous-jacentes)
    
MAJ V12 :
	- DOM_PASSWD ==> PASSWD
	
V39 :
    - MAJ inconditionnelle de MODIF_DATE
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE OWNER_ID_MODIF_OK Integer;    
BEGIN

	SQL_WHERE_OWNER = '';
	OWNER_ID_MODIF_OK = Null;

    IF (:I_TOWNER_STATE = '' ) THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    EXECUTE STATEMENT '
        SELECT ID FROM TOWNER
        WHERE TOWNER.ID=' || :I_TOWNER_ID || IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
        INTO :OWNER_ID_MODIF_OK;
        
    IF (:OWNER_ID_MODIF_OK IS NULL) THEN EXCEPTION EX_NOOWNER;


    /* Nettoyage des paramètres */
    I_TOWNER_PASSWD = TRIM(UPPER(:I_TOWNER_PASSWD));
    
    /* Mise à jour */
    BEGIN
        UPDATE TOWNER
        SET PASSWD=NULLIF(:I_TOWNER_PASSWD,''), MODIF_DATE=CURRENT_TIMESTAMP
        WHERE ID=:I_TOWNER_ID
        RETURNING ID INTO OWNER_ID;
        
        SUSPEND;

--		Pour l'instant on laisse l'erreur FB...        
--         WHEN ANY DO
--             -- Récupération du code générique d'erreur et ajout d'informations complémentaires...
--             EXCEPTION EX_ERRGEN (SELECT RDB$MESSAGE FROM RDB$EXCEPTIONS WHERE RDB$EXCEPTION_NAME='EX_ERRGEN') ||
--                 'Mise à jour de TOWNER.PASSWORD (SET_OWNER_DOM_PASSWD) impossible suite à l''erreur non prise en charge suivante : ' ||
--                 'GDS : "' || GDSCODE || '" - SQL : "' || SQLCODE || '"';
    END
END ^

ALTER PROCEDURE SET_PROFILE_INFOS (I_TPROFILE_ID INTEGER NOT NULL,
I_TPROFILE_OWNER_ID INTEGER NOT NULL,
I_TPROFILE_NAME VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TPROFILE_COMMENT VARCHAR(8164) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TPROFILE_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TPROFILE_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TPROFILE_NO_MODIF_DATE BOOLEAN NOT NULL DEFAULT 0,
I_TOWNER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TLIBRARY_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TFBSERVER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_GEDUSER_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (PROFILE_ID INTEGER)
AS 
/*
Mise à jour ou Création (ID=0) d'un Profil

MAJ V39
    - Les dates MAJ sont initialisées ici (plus dans le trigger) via I_TPROFILE_NO_MODIF_DATE
*/

DECLARE VARIABLE SQL_WHERE_OWNER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_LIB VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_FBSERVER VARCHAR(8000);
DECLARE VARIABLE SQL_WHERE_GEDUSER VARCHAR(8000);

DECLARE VARIABLE ID_OK Integer;    

DECLARE VARIABLE MODIF_DATE TIMESTAMP;


BEGIN
    I_TLIBRARY_STATE=TRIM(I_TLIBRARY_STATE);
    I_TOWNER_STATE=TRIM(I_TOWNER_STATE);
    I_TFBSERVER_STATE=TRIM(I_TFBSERVER_STATE);
    I_GEDUSER_STATE=TRIM(I_GEDUSER_STATE);

    SQL_WHERE_OWNER= '';
    SQL_WHERE_LIB = '';
	SQL_WHERE_FBSERVER = '';
	SQL_WHERE_GEDUSER = '';

    ID_OK=Null;
    
    /* V 39 : On vérifie la présence d'un profil existant en MAJ même si STATE non géré en TPROFILE (permet aussi de récupérer la MODIF DATE) */
    IF (:I_TPROFILE_ID !=0) THEN
    BEGIN
        EXECUTE STATEMENT '
            SELECT ID, MODIF_DATE FROM TPROFILE
            WHERE TPROFILE.ID=' || :I_TPROFILE_ID
            INTO :ID_OK, MODIF_DATE;
            
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOPROFILE;
    END
        
    ID_OK=Null;

    /* Owner utilisable outrepassable (test en ajout/MAJ)... */
    IF (:I_TOWNER_STATE = '') THEN
        /* Etat de modification par défaut */
        SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TOWNER.STATE') INTO :SQL_WHERE_OWNER;
    ELSE 
        /* Etat de modification demandé */
        SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TOWNER_STATE, 'TOWNER.STATE') INTO :SQL_WHERE_OWNER; 

    EXECUTE STATEMENT '
        SELECT ID FROM TOWNER
        WHERE ID=' || :I_TPROFILE_OWNER_ID || IIF (:SQL_WHERE_OWNER != '' , ' AND (' || :SQL_WHERE_OWNER || ')', '')
        INTO ID_OK;

    IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOOWNER;
    
    IF (I_TPROFILE_TLIBRARY_ID != 0) THEN
    BEGIN
        ID_OK=Null;

       /* Serveur Firebird (si non Null) utilisable outrepassable...*/
        IF (:I_TFBSERVER_STATE = '' ) THEN
            /* Etat de visibilité par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;
        ELSE 
            /* Etat de visibilité demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TFBSERVER_STATE, 'TFBSERVER.STATE') INTO :SQL_WHERE_FBSERVER;

        -- Library existante et modifiable...
        IF (:I_TLIBRARY_STATE ='' ) THEN
            /* Etat de modification par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TLIBRARY.STATE') INTO :SQL_WHERE_LIB;
        ELSE 
            /* Etat de modification demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_TLIBRARY_STATE, 'TLIBRARY.STATE') INTO :SQL_WHERE_LIB; 

        /* Existence/visibilité de la librairie demandée (elle-même et ses parents)*/
        EXECUTE STATEMENT '
            SELECT TLIBRARY.ID
            FROM TLIBRARY INNER JOIN TOWNER ON TLIBRARY.TOWNER_ID=TOWNER.ID
                LEFT JOIN TFBSERVER ON TLIBRARY.TFBSERVER_ID=TFBSERVER.ID
            WHERE TLIBRARY.ID=' || :I_TPROFILE_TLIBRARY_ID ||
                IIF (:SQL_WHERE_LIB != '' ,' AND ' || :SQL_WHERE_LIB, '') ||
                IIF (:SQL_WHERE_FBSERVER != '' , ' AND (' || :SQL_WHERE_FBSERVER || 'OR TFBSERVER.STATE IS NULL)', '') ||
                IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
            INTO :ID_OK;
                
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOLIB;
    END

    IF (I_TPROFILE_TGEDUSER_ID != 0) THEN
    BEGIN
        ID_OK=Null;

        -- Utilisateur existant et modifiable...
        IF (I_GEDUSER_STATE ='' ) THEN
            /* Etat de modification par défaut */
            SELECT SQL_WHERE_DEFAULT_ALTER FROM GET_ALTER_STATE_OK('TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER;
        ELSE 
            /* Etat de modification demandé */
            SELECT CRIT_FOR_STATE FROM GET_STATE_CRITERIA(:I_GEDUSER_STATE, 'TGEDUSER.STATE') INTO :SQL_WHERE_GEDUSER; 

        /* Existence/visibilité de l'utilisateur demandé (lui-même et ses parents)*/
        EXECUTE STATEMENT '
            SELECT TGEDUSER.ID
            FROM TGEDUSER INNER JOIN TOWNER ON TGEDUSER.TOWNER_ID=TOWNER.ID
            WHERE TGEDUSER.ID=' || :I_TPROFILE_TGEDUSER_ID ||
                IIF (:SQL_WHERE_GEDUSER != '' ,' AND ' || :SQL_WHERE_GEDUSER, '') ||
                IIF (:SQL_WHERE_OWNER != '' ,' AND ' || :SQL_WHERE_OWNER, '')
            INTO :ID_OK;
                
        IF (:ID_OK IS NULL) THEN EXCEPTION EX_NOGEDUSER;
    END


    /* Nettoyage des paramètres */
    I_TPROFILE_NAME = TRIM(I_TPROFILE_NAME);
    I_TPROFILE_COMMENT = TRIM(I_TPROFILE_COMMENT);

	-- Ancienne date de modif init plus haut ; on réinit le cas échéant
	IF (:I_TPROFILE_ID = 0 OR :I_TPROFILE_NO_MODIF_DATE = 0) THEN MODIF_DATE = CURRENT_TIMESTAMP;

	BEGIN
        UPDATE OR INSERT INTO TPROFILE (ID,MODIF_DATE, TOWNER_ID, "NAME", "COMMENT", TLIBRARY_ID, TGEDUSER_ID)
        VALUES (
            NULLIF(:I_TPROFILE_ID,0), -- NULL si 0 (insertion car non existant)
            :MODIF_DATE,
            :I_TPROFILE_OWNER_ID, 
            NULLIF(:I_TPROFILE_NAME,''), 
            NULLIF(:I_TPROFILE_COMMENT,''),
            NULLIF(:I_TPROFILE_TLIBRARY_ID,0),
			NULLIF(:I_TPROFILE_TGEDUSER_ID,0)
        )
        MATCHING (ID)
        RETURNING ID INTO PROFILE_ID;

		SUSPEND;

		WHEN GDSCODE unique_key_violation DO -- Violation OWNER/NAME...
			EXCEPTION EX_PROFILE_EXISTS;
	END
END ^

ALTER PROCEDURE SET_STATE (I_EXPR_STATE VARCHAR(15) CHARACTER SET UTF8 NOT NULL,
I_CRITERIA VARCHAR(8000) CHARACTER SET UTF8 NOT NULL,
I_TARGETED_TABLE VARCHAR(255) CHARACTER SET UTF8 NOT NULL,
I_TARGETED_COLUMN VARCHAR(255) CHARACTER SET UTF8 DEFAULT 'STATE')
RETURNS (NEW_STATE STATE)
AS 
/*
    Cette procédure modifie l'état d'une colonne STATE
    
    Attend :
    - I_EXPR_STATE : une expression de mise à jour d'état sous la forme : opérateur+valeur (aucun espace ou autre caractère de séparation) où :
        -> Opérateur peut être :
        "=" pour "égal" (mise à jour d'un état atomique),
        "+" pour ajouter un ou plusieurs états
        "-" pour retirer un ou plusieurs états
        -> valeur peut-être toute valeur ou toute combinaison de valeur (doit être vide si EXPR_CRIT_STATE = "*")
    - I_TARGETED_TABLE : nom d'une table à impacter
    - I_CRITERIA : critère à appliquer pour la mise à jour
    - I_TARGETED_COLUMN : Nom de la colonne STATE dans I_TARGETED_TABLE ('STATE' par défaut)
    
    Retourne :
    - NEW_STATE : Nouvel état obtenu après application
    
    Attention cette procédure n'interdit pas de modifier un état pour un enregistrement "inactif" (elle peut-être utilisée pour cela, justement) ; par exemple, cette procédure 
    permet de remettre un état "0" pour un propriétaire en état 1 (supprimé)...
    
    Exemple :
    SELECT SET_STATE('=2','TOWNER','ID=15') ==> Mise àjour atomique de l'état de la colonne STATE (par défaut) dans la table TOWNER pour le propriétaire 15
        Résultat ==> 2
    SELECT SET_STATE('+2','TOWNER','ID=15') ==> Mise àjour ajout de l'état de la colonne STATE (par défaut) dans la table TOWNER pour le propriétaire 15
        Résultat ==> dépendant de la valeur initiale, par exemple si STATE était 3 => 3 (rien à faire car 2 déjà positionné), si STATE était 4 ==> 6, ...
    SELECT SET_STATE('-3','TOWNER','ID=15') ==> Mise àjour ajout de l'état de la colonne STATE (par défaut) dans la table TOWNER pour le propriétaire 15
        Résultat ==> dépendant de la valeur initiale, par exemple si STATE était 3 => 0, si STATE était 2 => 2 (rien à retirer), si STATE était 7 ==> 4, ...

    À ce jour (version 7), les états suivants sont référencés :
    - 0 ==> aucun état particulier donc mise à jour/visibilité activée inconditionnelement (donc, ce n'est pas à proprement parler un état ;-) )
    - 1 ==> Enregistrement supprimé donc mise à jour/visibilité normalement inactivée
        (voir les paramètres de domaine "DOM_RECORD_ALTER_KO" et/ou "DOM_RECORD_VISIBILITY_KO")
    
    Les états <= 8192 sont réservés à la gestion de domaine Novaxel (soit 14 possibilités)
    Les états > 8192 peuvent être utilisés par les administrateurs pour gérer leurs propres spécificités de domaine
        (soit 14 possibilités ; valeur maximum autorisée dans un Integer FB : 134 217 728)

    TODO : revoir la possibilité de MAJ multiligne :
    - Actuellement on fait confiance à la colonne ID (en dur) pour récupérer les enregistrements à UPDATER
    - Voir récupération de PK + Type, etc et MAJ en fonction de ces éléments ...

V31 :
	- Exception spécifique
*/

DECLARE VARIABLE OP_BIN CHAR(1);
DECLARE VARIABLE VAL_INIT INTEGER;
DECLARE VARIABLE VAL_INIT_STR VARCHAR(15);
DECLARE VARIABLE SET_VAL VARCHAR(300);
DECLARE VARIABLE TEMP_ID INTEGER;
BEGIN
    I_EXPR_STATE=TRIM(I_EXPR_STATE);
    I_TARGETED_TABLE=TRIM(I_TARGETED_TABLE);
    I_CRITERIA=TRIM(I_CRITERIA);
    I_TARGETED_COLUMN=TRIM(I_TARGETED_COLUMN);
    
    /* paramètres obligatoire */
    IF (I_EXPR_STATE='' OR I_TARGETED_TABLE='' OR I_CRITERIA='') THEN 
        EXCEPTION EX_BAD_PARAM;

    IF (NOT EXISTS 
        (SELECT RDB$RELATION_NAME FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME=:I_TARGETED_TABLE AND RDB$FIELD_NAME=:I_TARGETED_COLUMN AND RDB$SYSTEM_FLAG=0)
        ) THEN
        EXCEPTION EX_NOTABLEORCOL;

    /* Extraction de l'opérateur */
    OP_BIN = LEFT(I_EXPR_STATE,1);
    IF (OP_BIN ='' OR (OP_BIN NOT IN ('=','+','-'))) THEN
        EXCEPTION EX_BAD_PARAM;
    
    /* Extraction de la valeur  */
    VAL_INIT_STR = TRIM(SUBSTRING(I_EXPR_STATE FROM 2));
    IF (VAL_INIT_STR = '') THEN
        EXCEPTION EX_BAD_PARAM;
    ELSE
        VAL_INIT=CAST(VAL_INIT_STR AS INTEGER);
    
    /* Égal ==> = */
    IF (OP_BIN = '=') THEN
        SET_VAL = I_TARGETED_COLUMN || '=' || VAL_INIT;
    /* Ajout ==> BIN_OR */
    ELSE IF (OP_BIN = '+') THEN
        SET_VAL = I_TARGETED_COLUMN || ' = BIN_OR(' || I_TARGETED_COLUMN || ',' || VAL_INIT || ')';
    /* Retrait ==> VAL-BIN_AND */
    ELSE IF (OP_BIN = '-') THEN
        SET_VAL = I_TARGETED_COLUMN || ' = ' || I_TARGETED_COLUMN || ' - BIN_AND(' || I_TARGETED_COLUMN || ',' || VAL_INIT || ')';
    ELSE
        EXCEPTION EX_BAD_PARAM;


    FOR EXECUTE STATEMENT --'
        --UPDATE ' || :I_TARGETED_TABLE || ' SET ' || :SET_VAL || ' WHERE ' || :I_CRITERIA || ' RETURNING STATE '
        'SELECT ID FROM ' || :I_TARGETED_TABLE || ' WHERE ' || :I_CRITERIA
        INTO :TEMP_ID
        DO
        BEGIN
            EXECUTE STATEMENT 'UPDATE ' || :I_TARGETED_TABLE || ' SET ' || :SET_VAL || ' WHERE ID=' || :TEMP_ID || ' RETURNING STATE '
            INTO :NEW_STATE;
            SUSPEND;
        END

END ^

ALTER PROCEDURE SET_STORAGE (I_TSTORAGE_TOWNER_ID INTEGER NOT NULL,
I_TSTORAGE_SECTION VARCHAR(40) CHARACTER SET UTF8 NOT NULL,
I_TSTORAGE_NAME VARCHAR(80) CHARACTER SET UTF8 NOT NULL,
I_TSTORAGE_VALUE VARCHAR(8000) CHARACTER SET UTF8 NOT NULL,
I_TSTORAGE_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TSTORAGE_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0)
AS 
/*
	Ajoute ou MAJ (ID=0) d'un paramètre en TSTORAGE

	L'unicité est déclarée dans la table, au niveau de OWNER_ID, GEDUSER_ID, LIBRARY_ID,SECTION, NAME
	Si TLIBRARY_ID et/ou TGEDUSER_ID est passé, on ne vérifie pas qu'il(s) corresponde(nt) au OWNER_ID...
	Les STATES OWNER/GEDUSER/LIBRARY ne sont PAS évaluées par cette procédure...

V40 :
	- Création

*/


DECLARE VARIABLE ID_OWNER Integer;    

BEGIN

    ID_OWNER= Null;

    IF (:I_TSTORAGE_TGEDUSER_ID !=0) THEN
    BEGIN
        -- On vérifie que le GEDUSER est OK
        SELECT TOWNER_ID FROM TGEDUSER WHERE TGEDUSER.ID=:I_TSTORAGE_TGEDUSER_ID INTO :ID_OWNER;
        IF (ID_OWNER IS NULL) THEN EXCEPTION EX_NOGEDUSER;
    END
    
    IF (:I_TSTORAGE_TLIBRARY_ID != 0) THEN
    BEGIN
        ID_OWNER= Null;
        -- On vérifie que le GEDUSER est OK
        SELECT TOWNER_ID FROM TLIBRARY WHERE TLIBRARY.ID=:I_TSTORAGE_TLIBRARY_ID INTO :ID_OWNER;
        IF (ID_OWNER IS NULL) THEN EXCEPTION EX_NOLIB;
    END
    
    IF (:I_TSTORAGE_TOWNER_ID !=0) THEN
    BEGIN
        -- On vérifie que le OWNER est OK
        IF (NOT EXISTS(SELECT ID FROM TOWNER WHERE ID=:I_TSTORAGE_TOWNER_ID)) THEN
            EXCEPTION EX_NOOWNER;
        ELSE
            ID_OWNER=:I_TSTORAGE_TOWNER_ID;
    END
    ELSE
        -- Si pas de OWNER passé, ni trouvé auparavant, on lève l'erreur
        IF (:ID_OWNER IS NULL) THEN EXCEPTION EX_NOOWNER;

    /* Nettoyage des paramètres */
    I_TSTORAGE_NAME = TRIM(I_TSTORAGE_NAME);
    I_TSTORAGE_SECTION = TRIM(I_TSTORAGE_SECTION);
    I_TSTORAGE_VALUE = TRIM(I_TSTORAGE_VALUE);

    UPDATE OR INSERT INTO TSTORAGE (TOWNER_ID, "SECTION", "NAME", "VALUE", TLIBRARY_ID, TGEDUSER_ID, MODIF_DATE)
        VALUES (
			:ID_OWNER,
            :I_TSTORAGE_SECTION,
            :I_TSTORAGE_NAME,
            :I_TSTORAGE_VALUE,
            NULLIF(:I_TSTORAGE_TLIBRARY_ID,0),
            NULLIF(:I_TSTORAGE_TGEDUSER_ID,0),
            CURRENT_TIMESTAMP
        )
        MATCHING (TOWNER_ID,TGEDUSER_ID, TLIBRARY_ID,SECTION,NAME);

        -- Dans la pratique, ne devrait jamais arriver avec UPDATE OR INSERT...
		WHEN GDSCODE unique_key_violation DO -- Violation UNIQUE TABLE
			EXCEPTION EX_STORAGE_EXISTS;

END ^

ALTER PROCEDURE SET_STRING_DATE (I_STRING VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (DATE_STRING TIMESTAMP)
AS 
/*
    Renvoi un type timestamp (applicable aux date/time/timestamp)
    
    Si I_STRING='', renvoi NULL
    
    Si la chaine passé est incorrecte une erreur de conversion est levée par FB (GDSCODE 335544334)
    
    On renvoi la date correspondante à la chaine reçu sans traitement particulier...
*/
BEGIN
    IF (TRIM(I_STRING ) = '') THEN
        DATE_STRING=NULL;
    ELSE
        DATE_STRING=I_STRING;
    
    SUSPEND;
END ^

ALTER PROCEDURE SPLIT_BLOB (SQL_GETBLOB VARCHAR(8000) CHARACTER SET UTF8 NOT NULL,
FIELD_SEP VARCHAR(5) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (RESULTS VARCHAR(255) CHARACTER SET UTF8)
AS 
/*
    Procédure outil générique
    Permet de récupérer une valeur/BLOB (SUBTYPE 1) et de retourner chaque élément
    
V40 :
    Création
*/


DECLARE VARIABLE VALUE_BLOB BLOB CHARACTER SET UTF8; 

DECLARE VARIABLE LEN_VALUE_BLOB INTEGER;
DECLARE VARIABLE CURRENT_VALUE VARCHAR(40);
DECLARE VARIABLE LAST_POS INTEGER;
DECLARE VARIABLE POS INTEGER;

BEGIN

    -- Séparateur DOMAIN (; par défaut) si non passé
	FIELD_SEP=TRIM(:FIELD_SEP);
	IF (:FIELD_SEP = '' ) THEN SELECT TRIM(COALESCE(CAST(DOMPARAM_VALUE AS VARCHAR(5)),';')) FROM GET_DOMPARAM('DOMAIN','MDF_FIELD_SEP')  INTO FIELD_SEP;

    VALUE_BLOB='';

    -- Récupération de la valeur par rapport à la requête passée
    -- On laisse FB trappe les EXCEPTION...
    EXECUTE STATEMENT SQL_GETBLOB INTO :VALUE_BLOB;
    
    -- Rien dans le blob
	IF (VALUE_BLOB='') THEN EXIT;
    	
    LEN_VALUE_BLOB=CHARACTER_LENGTH(VALUE_BLOB);

	-- On ajoute un dernier SEP en fin de VALUE_BLOB pour faciliter les traitements de la boucle plus loin (recherche de sep)
	VALUE_BLOB=IIF(RIGHT(VALUE_BLOB,CHARACTER_LENGTH(FIELD_SEP))=FIELD_SEP,VALUE_BLOB,VALUE_BLOB || FIELD_SEP);
	
    LAST_POS=1;
    POS=1;
    
/*
-- DEBUG    
    RESULTS='VALUE_BLOB : ' || VALUE_BLOB;
    SUSPEND;
-- DEBUG    
    RESULTS='Taille VALUE_BLOB : ' || LEN_VALUE_BLOB;
    SUSPEND;
*/
    
    WHILE (LAST_POS<LEN_VALUE_BLOB) DO
    BEGIN

/*
-- DEBUG    
        RESULTS='LAST_POS : ' || LAST_POS;
        SUSPEND;
*/
        POS=POSITION(FIELD_SEP, VALUE_BLOB, LAST_POS+1);

/*        
-- DEBUG    
        RESULTS='POS : ' || POS;
        SUSPEND;
*/
        
        RESULTS=SUBSTRING(VALUE_BLOB FROM LAST_POS FOR POS-LAST_POS); --(CHARACTER_LENGTH(VALUE_BLOB)-(CHARACTER_LENGTH(VALUE_BLOB)-POS)+LAST_POS)-1
        
        SUSPEND;
        
        LAST_POS=POS+1;
    END

END  ^

ALTER PROCEDURE UNDEL_CONTACT (I_TCONTACT_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
/*
    Annulation de la suppression logique d'un contact dans la table correspondante
    
    Paramètres : 
    - I_CONTACT_ID : Code contact

    Particularités :
    Annualtion de la suppression logique (ie. on garde l'enregistrement physique présent dans la table) qui correspond à la mise à jour
    de la colonne STATE de l'enregistrement cible avec la valeur "1" (valeur d'état référencée comme étant la suppression)
        
    Retourne :
    - NEW_STATE : Nouvel état du proriétaire obtenu après suppression logique
        
    Attention
    - cette procédure lève des erreurs en cas de "suppresion" (mise à jour de colonne STATE) impossible

V17 :
    - Nouvelle Gestion SECTION TDOMPARAM
*/

BEGIN

    /* Contact existant */
    IF (NOT EXISTS (SELECT ID FROM TCONTACT WHERE ID=:I_TCONTACT_ID)) THEN EXCEPTION EX_NOCONTACT;
    
    /* MAJ de la colonne STATE, on ajoute la valeur DOM_RECORD_DELETED (1 par défaut) */
    SELECT NEW_STATE FROM SET_STATE('-' || COALESCE(CAST((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')) AS INTEGER),1),'TCONTACT.ID=' || :I_TCONTACT_ID,'TCONTACT','STATE') INTO :NEW_STATE;
    SUSPEND;
    
END ^

ALTER PROCEDURE UNDEL_FBSERVER (I_TFBSERVER_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
/*
    Annualtion suppression logique d'un Serveur Firebirf dans la table correspondante
    
    Paramètres : 
    - I_TFBSERVER_ID : Code serveur Firebird

    Particularités :
    Annulation suppression logique (ie. on garde l'enregistrement physique présent dans la table) qui correspond à la mise à jour
    de la colonne STATE de l'enregistrement cible avec la valeur "1" (valeur d'état référencée comme étant la suppression)
        
    Retourne :
    - NEW_STATE : Nouvel état du proriétaire obtenu après suppression logique
        
    Attention
    - cette procédure lève des erreurs en cas de "suppresion" (mise à jour de colonne STATE) impossible
    
V17 :
    - Nouvelle Gestion SECTION TDOMPARAM
*/

BEGIN

    /* Serveur existant */
    IF (NOT EXISTS (SELECT ID FROM TFBSERVER WHERE ID=:I_TFBSERVER_ID)) THEN EXCEPTION EX_NOFBSER;

    /* MAJ de la colonne STATE, on retire la valeur DOM_RECORD_DELETED (1 par défaut) */
    SELECT NEW_STATE FROM SET_STATE('-' || COALESCE(CAST((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')) AS INTEGER),1),'TFBSERVER.ID=' || :I_TFBSERVER_ID,'TFBSERVER','STATE') INTO :NEW_STATE;
    SUSPEND;
    
END ^

ALTER PROCEDURE UNDEL_GEDUSER (I_TGEDUSER_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
/*
    Annulation suppression logique d'un Utilisateur GED
    
    Paramètres : 
    - I_TGEDUSER_ID : Code Utilisateur GED

    Particularités :
    Annualtion suppression logique (ie. on garde l'enregistrement physique présent dans la table) qui correspond à la mise à jour
    de la colonne STATE de l'enregistrement cible avec la valeur "1" (valeur d'état référencée comme étant la suppression)
        
    Retourne :
    - NEW_STATE : Nouvel état de l'utilisateur obtenu après suppression logique
        
    Attention
    - cette procédure lève des erreurs en cas de "suppresion" (mise à jour de colonne STATE) impossible
    
V17 :
    - Nouvelle Gestion SECTION TDOMPARAM
*/

BEGIN

    /* Utilisateur GED existante */
    IF (NOT EXISTS (SELECT ID FROM TGEDUSER WHERE ID=:I_TGEDUSER_ID)) THEN EXCEPTION EX_NOGEDUSER;    
    
    /* MAJ de la colonne STATE, on ajoute la valeur DOM_RECORD_DELETED (1 par défaut) */
    SELECT NEW_STATE FROM SET_STATE('-' || COALESCE(CAST((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')) AS INTEGER),1),'TGEDUSER.ID=' || :I_TGEDUSER_ID,'TGEDUSER','STATE') INTO :NEW_STATE;

    SUSPEND;
    
	-- LOGIN déjà existant (recréé après suppression logique initiale)
    WHEN GDSCODE unique_key_violation DO EXCEPTION EX_GED_LOGIN_EXISTS;
    
END ^

ALTER PROCEDURE UNDEL_LIBRARY (I_TLIBRARY_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
/*
    Annulation d'une Suppression logique d'une bibliothèque dans la table correspondante
    
    Paramètres : 
    - I_TLIBRARY_ID : Code bibliothèque

    Particularités :
    Annule une suppression logique (ie. on garde l'enregistrement physique présent dans la table) qui correspond à la mise à jour
    de la colonne STATE de l'enregistrement cible avec la valeur "1" (valeur d'état référencée comme étant la suppression)
    On ne teste aucun STATE (ni parent, ni enfant), puisqu'on est en train de le mettre à jour...
        
    Retourne :
    - NEW_STATE : Nouvel état de la bibliothèque obtenu après suppression logique
        
    Attention
    - cette procédure lève des erreurs en cas de "suppression" (mise à jour de colonne STATE) impossible
    
V17 :
    - Nouvelle Gestion SECTION TDOMPARAM
*/

BEGIN

    /* Library existante */
    IF (NOT EXISTS (SELECT ID FROM TLIBRARY WHERE ID=:I_TLIBRARY_ID)) THEN EXCEPTION EX_NOLIB;    
    
    /* MAJ de la colonne STATE, on retire la valeur DOM_RECORD_DELETED (1 par défaut) */
    SELECT NEW_STATE FROM SET_STATE('-' || COALESCE(CAST((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')) AS INTEGER),1),'TLIBRARY.ID=' || :I_TLIBRARY_ID,'TLIBRARY','STATE') INTO :NEW_STATE;

    SUSPEND;
    
	-- Title déjà existant (recréé après suppression logique initiale)
    WHEN GDSCODE unique_key_violation DO EXCEPTION EX_LIBTITLE_EXISTS;

END ^

ALTER PROCEDURE UNDEL_OWNER (I_TOWNER_ID INTEGER NOT NULL)
RETURNS (NEW_STATE STATE)
AS 
/*
    Annulation suppression logique d'un propriétaire dans la table correspondante
    
    Paramètres : 
    - I_TOWNER_ID : Code propriétaire

    Particularités :
    Annualtion suppression logique (ie. on garde l'enregistrement physique présent dans la table) qui correspond à la mise à jour
    de la colonne STATE de l'enregistrement cible avec la valeur "1" (valeur d'état référencée comme étant la suppression)
        
    Retourne :
    - NEW_STATE : Nouvel état du proriétaire obtenu après suppression logique
        
    Attention
    - cette procédure lève des erreurs en cas de "suppresion" (mise à jour de colonne STATE) impossible
    
V17 :
    - Nouvelle Gestion SECTION TDOMPARAM
*/

BEGIN

    /* Owner existant */
    IF (NOT EXISTS (SELECT ID FROM TOWNER WHERE ID=:I_TOWNER_ID)) THEN EXCEPTION EX_NOOWNER;
    
    /* MAJ de la colonne STATE, on retire la valeur DOM_RECORD_DELETED (1 par défaut) */
    SELECT NEW_STATE FROM SET_STATE('-' || COALESCE(CAST((SELECT DOMPARAM_VALUE FROM GET_DOMPARAM('DOMAIN','RECORD_DELETED')) AS INTEGER),1),'TOWNER.ID=' || :I_TOWNER_ID,'TOWNER','STATE') INTO :NEW_STATE;

    SUSPEND;

	-- LOGIN déjà existant (recréé après suppression logique initiale)
    WHEN GDSCODE unique_key_violation DO EXCEPTION EX_DOM_LOGIN_EXISTS;
    
END ^
SET TERM ; ^
COMMIT WORK ;
SET AUTODDL ON;
SET TERM ^ ;

/* Triggers only will work for SQL triggers */
CREATE TRIGGER AINC_TCONTACT FOR TCONTACT 
ACTIVE BEFORE INSERT POSITION 100 
AS 
/*
	MAJ V39 : plus de MAJ DATE_MODIF en UPDATE (donc trigger activé seulement sur INSERT)
*/
BEGIN 
    /* MAJ ID*/
    IF (NEW.ID IS NULL) THEN NEW.ID=GEN_ID(SEQ_CONTACT, 1); 
    /* MAJ DATE_CREATE */
    IF (NEW.CREATE_DATE IS NULL) THEN NEW.CREATE_DATE=CURRENT_TIMESTAMP;
    /* MAJ DATE_MODIF (idem DATE_CREATE dans contexte insert) */
    IF (NEW.MODIF_DATE IS NULL) THEN NEW.MODIF_DATE=CURRENT_TIMESTAMP;
END ^

CREATE TRIGGER AINC_TCONTTYPE FOR TCONTTYPE 
ACTIVE BEFORE INSERT POSITION 100 
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN NEW.ID=GEN_ID(SEQ_CONTTYPE, 1); 
END ^

CREATE TRIGGER AINC_TFBSERVER FOR TFBSERVER 
ACTIVE BEFORE INSERT POSITION 100 
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN NEW.ID=GEN_ID(SEQ_FBSERVER, 1); 
END ^

CREATE TRIGGER AINC_TGEDGROUP FOR TGEDGROUP 
ACTIVE BEFORE INSERT POSITION 100 
AS 
/*
	MAJ V39 : plus de MAJ DATE_MODIF en UPDATE (donc trigger activé seulement sur INSERT)
*/
BEGIN 

    /* MAJ ID*/
    IF (NEW.ID IS NULL) THEN NEW.ID=GEN_ID(SEQ_GEDGROUP, 1); 
    /* MAJ DATE_CREATE */
    IF (NEW.CREATE_DATE IS NULL) THEN NEW.CREATE_DATE=CURRENT_TIMESTAMP;
    /* MAJ DATE_MODIF (idem DATE_CREATE dans contexte insert) */
    IF (NEW.MODIF_DATE IS NULL) THEN NEW.MODIF_DATE=CURRENT_TIMESTAMP;
END ^

CREATE TRIGGER AINC_TGEDPARAM FOR TGEDPARAM 
ACTIVE BEFORE INSERT POSITION 100 
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN NEW.ID=GEN_ID(SEQ_GEDPARAM, 1); 
END ^

CREATE TRIGGER TGEDPARAM_STAMP FOR TGEDPARAM 
ACTIVE BEFORE INSERT OR UPDATE POSITION 100 
AS
/*
	MAJ DATE_MODIF si non passée
	
V40 :
    -Création
*/
BEGIN
	IF (NEW.MODIF_DATE IS NULL OR NEW.MODIF_DATE=OLD.MODIF_DATE) THEN NEW.MODIF_DATE = CURRENT_TIMESTAMP;
END ^

CREATE TRIGGER TGEDPARAMOWNER_STAMP FOR TGEDPARAMOWNER 
ACTIVE BEFORE INSERT OR UPDATE POSITION 100 
AS
/*
	Création en V21
	MAJ DATE_MODIF si non passée
*/
BEGIN
	IF (NEW.MODIF_DATE IS NULL OR NEW.MODIF_DATE=OLD.MODIF_DATE) THEN NEW.MODIF_DATE = CURRENT_TIMESTAMP;
END ^

CREATE TRIGGER TGEDPARAMPROF_STAMP FOR TGEDPARAMPROF 
ACTIVE BEFORE INSERT OR UPDATE POSITION 100 
AS
/*
	Création en V11
	MAJ DATE_MODIF si non passée
*/
BEGIN
	IF (NEW.MODIF_DATE IS NULL OR NEW.MODIF_DATE=OLD.MODIF_DATE) THEN NEW.MODIF_DATE = CURRENT_TIMESTAMP;
END ^

CREATE TRIGGER TGEDPARAMUSER_STAMP FOR TGEDPARAMUSER 
ACTIVE BEFORE INSERT OR UPDATE POSITION 100 
AS
/*
	Création en V11
	MAJ DATE_MODIF si non passée
*/
BEGIN
	IF (NEW.MODIF_DATE IS NULL OR NEW.MODIF_DATE=OLD.MODIF_DATE) THEN NEW.MODIF_DATE = CURRENT_TIMESTAMP;
END ^

CREATE TRIGGER AINC_TGEDUSER FOR TGEDUSER 
ACTIVE BEFORE INSERT POSITION 100 
AS 
/*
	MAJ V39 : plus de MAJ DATE_MODIF en UPDATE (donc trigger activé seulement sur INSERT)
*/
BEGIN 
    /* MAJ ID*/
    IF (NEW.ID IS NULL) THEN NEW.ID=GEN_ID(SEQ_GEDUSER, 1); 
    /* MAJ DATE_CREATE */
    IF (NEW.CREATE_DATE IS NULL) THEN NEW.CREATE_DATE=CURRENT_TIMESTAMP;
    /* MAJ DATE_MODIF (idem DATE_CREATE dans contexte insert) */
    IF (NEW.MODIF_DATE IS NULL) THEN NEW.MODIF_DATE=CURRENT_TIMESTAMP;
END ^

CREATE TRIGGER AINC_TLIBRARY FOR TLIBRARY 
ACTIVE BEFORE INSERT POSITION 100 
AS 
/*
	MAJ V39 : plus de MAJ DATE_MODIF en UPDATE (donc trigger activé seulement sur INSERT)
*/
BEGIN 
    /* MAJ ID */
    IF (NEW.ID IS NULL) THEN NEW.ID=GEN_ID(SEQ_LIBRARY, 1); 
    /* MAJ CREATE_DATE */
    IF (NEW.CREATE_DATE IS NULL) THEN NEW.CREATE_DATE=CURRENT_TIMESTAMP; 
    
    /* Version 6 : Si un title est Null, on initialise avec une chaine */
    IF (NEW.TITLE IS NULL) THEN NEW.TITLE='Bibliothèque N° ' || NEW.ID;
    
    IF (NEW.MODIF_DATE IS NULL) THEN NEW.MODIF_DATE=CURRENT_TIMESTAMP;
END ^

CREATE TRIGGER UPDSIZE_TLIBRARY FOR TLIBRARY 
ACTIVE AFTER INSERT OR UPDATE POSITION 100 
AS 
/*
    Mise à jour des tailles occupées dans les tables TOWNER et TFBSERVER...

V31 :
	- Création

V36 :
	- Prise en compte SIZE_MB_ORG pour le calcul de TOWNER.SIZE_MB_CHARGEABLE
*/
BEGIN 
    -- MAJ seulement si taille de bib modifiée
    IF ((COALESCE(NEW.SIZE_MB,0)!=COALESCE(OLD.SIZE_MB,0)) OR (COALESCE(NEW.SIZE_MB_ORG,0)!=COALESCE(OLD.SIZE_MB_ORG,0))) THEN
    BEGIN
        -- OWNER : seulement les lib en état Ok (not deleted)
        UPDATE TOWNER o
            SET o.SIZE_MB = (
                SELECT SUM(l.SIZE_MB)
                    FROM TLIBRARY l
                    WHERE o.ID=l.TOWNER_ID
                        AND BIN_AND(l.STATE, COALESCE((SELECT CAST("VALUE" AS INTEGER) FROM TDOMPARAM WHERE SECTION='DOMAIN' AND "NAME"='RECORD_DELETED'),1))=0
                );
        UPDATE TOWNER o
            SET o.SIZE_MB_CHARGEABLE = (
            -- Prise en compte, si access_mode=2 (Full saas) => Synchro impossible
                SELECT SUM(
                    IIF(l.ACCESS_MODE!=2, -- Synchro possible pour ces modes, on prend en compte les tailles SIZE_MB_ORG en priorité (sinon la taille SIZE_MB)
                        IIF (SIZE_MB_ORG<>0,l.SIZE_MB_ORG,l.SIZE_MB),
                        l.SIZE_MB -- Sinon, on prend la taille locale inconditionnelement
                    )
                )
                FROM TLIBRARY l
                WHERE o.ID=l.TOWNER_ID AND l.CHARGEABLE=1
                    AND BIN_AND(l.STATE, COALESCE((SELECT CAST("VALUE" AS INTEGER) FROM TDOMPARAM WHERE SECTION='DOMAIN' AND "NAME"='RECORD_DELETED'),1))=0
                );

        -- FBSERVEUR : Toutes les bases hébergées (occupation "réelle" disque)
        UPDATE TFBSERVER f
            SET f.SIZE_MB = (SELECT SUM(l.SIZE_MB)
                FROM TLIBRARY l
                WHERE f.ID=l.TFBSERVER_ID);
	END
END ^

CREATE TRIGGER AINC_TLOGSYNC FOR TLOGSYNC 
ACTIVE BEFORE INSERT POSITION 100 
AS 
BEGIN 
  IF (NEW.ID IS NULL) THEN NEW.ID=GEN_ID(SEQ_LOGSYNC, 1); 
  SELECT TLIBRARY.TOWNER_ID FROM TLIBRARY WHERE TLIBRARY.ID=NEW.TLIBRARY_ID INTO NEW.TOWNER_ID;
END ^

CREATE TRIGGER ULIB_TLOGSYNC FOR TLOGSYNC 
ACTIVE AFTER INSERT POSITION 100 
AS 
/*
    Mise à jour de TLOGYSNC_ID dans TLIBRARY
*/
BEGIN 
  UPDATE TLIBRARY SET TLOGSYNC_ID=NEW.ID WHERE TLIBRARY.ID=NEW.TLIBRARY_ID; 
END ^

CREATE TRIGGER AINC_TOWNER FOR TOWNER 
ACTIVE BEFORE INSERT POSITION 100 
AS 
/*
	MAJ V39 : plus de MAJ DATE_MODIF en UPDATE (donc trigger activé seulement sur INSERT)
*/
BEGIN 
  /* Mise à jour des données en insertion seulement */
    /* MAJ ID*/
    IF (NEW.ID IS NULL) THEN NEW.ID=GEN_ID(SEQ_OWNER, 1); 
    /* MAJ DATE_CREATE */
    IF (NEW.CREATE_DATE IS NULL) THEN NEW.CREATE_DATE=CURRENT_TIMESTAMP;
    /* MAJ DATE_MODIF (idem DATE_CREATE dans contexte insert) */
    IF (NEW.MODIF_DATE IS NULL) THEN NEW.MODIF_DATE=CURRENT_TIMESTAMP;
END ^

CREATE TRIGGER AINC_TPROFILE FOR TPROFILE 
ACTIVE BEFORE INSERT POSITION 100 
AS 
/*
	MAJ V39 : plus de MAJ DATE_MODIF en UPDATE (donc trigger activé seulement sur INSERT)
*/
BEGIN 
    /* MAJ ID*/
    IF (NEW.ID IS NULL) THEN NEW.ID=GEN_ID(SEQ_PROFILE, 1); 
    /* MAJ DATE_CREATE */
    IF (NEW.CREATE_DATE IS NULL) THEN NEW.CREATE_DATE=CURRENT_TIMESTAMP;
    /* MAJ DATE_MODIF (idem DATE_CREATE dans contexte insert) */
    IF (NEW.MODIF_DATE IS NULL) THEN NEW.MODIF_DATE=CURRENT_TIMESTAMP;
END ^

COMMIT WORK ^
SET TERM ; ^
CREATE VIEW ADMBD_EXCEPTIONS ("Nom", "Description", "Code FB", "Code NAS", "Message NAS", "Message") AS

  
    
SELECT
    TRIM(RDB$EXCEPTION_NAME) "Nom",
    TRIM(RDB$DESCRIPTION) "Description",
    TRIM(RDB$EXCEPTION_NUMBER) "Code FB",
    LEFT(RDB$MESSAGE,5) "Code NAS",
    TRIM(SUBSTRING(RDB$MESSAGE FROM 7)) "Message NAS",
    TRIM(RDB$MESSAGE) "Message"
FROM RDB$EXCEPTIONS
ORDER BY LEFT(RDB$MESSAGE,5);
CREATE VIEW ADMBD_PS ("Procédure", "Description", "Paramètre", "Type Paramètre", "Type Donnée", "Taille") AS


SELECT
    TRIM(p.RDB$PROCEDURE_NAME) "Procédure",
	TRIM(p.RDB$DESCRIPTION) "Description",
    TRIM(a.RDB$PARAMETER_NAME) "Paramètre",
    DECODE(a.RDB$PARAMETER_TYPE,0,'Entrée',1,'Sortie') "Type Paramètre",
    DECODE(fs.RDB$FIELD_TYPE,7,'smallint', 8,'integer', 12,'date', 13,'time', 14,'char', 16,'bigint', 27,'double precision', 35,'timestamp', 37,'varchar', 261,'blob') "Type Donnée",
    fs.RDB$CHARACTER_LENGTH "Taille"

FROM RDB$PROCEDURES p
    INNER JOIN RDB$PROCEDURE_PARAMETERS a ON p.RDB$PROCEDURE_NAME = a.RDB$PROCEDURE_NAME
        INNER JOIN RDB$FIELDS fs ON a.RDB$FIELD_SOURCE = fs.RDB$FIELD_NAME
        
ORDER BY p.RDB$PROCEDURE_NAME, a.RDB$PARAMETER_TYPE,a.RDB$PARAMETER_NUMBER;
CREATE VIEW GET_LAST_SYNC (ID, LIBRARY, OWNER, TIME_START, TIME_END, SIZE_BEFORE, SIZE_AFTER, SIZE_TRANSFERED, STATE) AS

      
SELECT FIRST 100 log.ID,COALESCE(lib.TITLE, lib.COMMENT) AS LIBRARY, own.NAME AS OWNER,
    (SELECT DATE_STRING FROM GET_DATE_STRING(log.TIME_START)) AS TIME_START,
    (SELECT DATE_STRING FROM GET_DATE_STRING(log.TIME_END)) AS TIME_END,
    log.SIZE_BEFORE,log.SIZE_AFTER,log.SIZE_TRANSFERED, log.STATE
FROM
    TLOGSYNC log
        INNER JOIN TLIBRARY lib ON lib.ID=log.TLIBRARY_ID
        INNER JOIN TOWNER own ON lib.TOWNER_ID=own.ID
ORDER BY TIME_END DESC;
CREATE VIEW GET_LIB_CUSTOMERS ("Code Bib Cloud", "Code prop", "Propriétaire", "Genesys", "Nom Bib", "Titre Bib", "Bib Facturable") AS

     
SELECT l.ID as "Code Bib Cloud", l.TOWNER_ID AS "Code prop", o.NAME AS "Propriétaire", o.EXTERNAL_ID AS "Genesys", l.COMMENT AS "Nom Bib", l.TITLE AS "Titre Bib", l.CHARGEABLE AS "Bib Facturable"
FROM TLIBRARY l INNER JOIN TOWNER o ON l.TOWNER_ID=o.ID;
CREATE VIEW GET_SYNC_DAILY_STATS (BIB, BIB_NAME, FIN_OK, NO_OK, CLIENT, SERVEUR, DOSSIER, DEBUT, FIN, MO_AVANT, MO_APRES, KO_TRANSF) AS

      
SELECT
        lib.ID AS BIB, COALESCE(lib.TITLE, lib.COMMENT) AS BIB_NAME,
        IIF(log.STATE=1,'OK','KO') AS FIN_OK, IIF(log.STATE=1,'','*****') AS NO_OK,
        o.NAME AS CLIENT,s.NAME AS SERVEUR,
        lib.DBPATH AS DOSSIER,
        LPAD(EXTRACT(DAY FROM log.TIME_START),2,'0') || '/' || LPAD(EXTRACT(MONTH FROM log.TIME_START),2,'0') || '/' || LPAD(EXTRACT(YEAR FROM log.TIME_START),4,'0') || ' ' || LPAD(EXTRACT(HOUR FROM log.TIME_START),2,'0') || ':' || LPAD(EXTRACT(MINUTE FROM log.TIME_START),2,'0') AS DEBUT,
        LPAD(EXTRACT(DAY FROM log.TIME_END),2,'0') || '/' || LPAD(EXTRACT(MONTH FROM log.TIME_END),2,'0') || '/' || LPAD(EXTRACT(YEAR FROM log.TIME_END),4,'0') || ' ' || LPAD(EXTRACT(HOUR FROM log.TIME_END),2,'0') || ':' || LPAD(EXTRACT(MINUTE FROM log.TIME_END),2,'0') AS FIN,
        CAST(log.SIZE_BEFORE/POWER(1024,2) AS INTEGER) AS MO_AVANT,
        CAST(log.SIZE_AFTER/POWER(1024,2) AS INTEGER) AS MO_APRES,
        CAST (log.SIZE_TRANSFERED/POWER(1024,1) AS INTEGER) AS KO_TRANSF
FROM
    TLIBRARY AS lib INNER JOIN TFBSERVER AS s
        ON lib.TFBSERVER_ID=s.ID
    INNER JOIN TOWNER AS o
        ON o.ID=lib.TOWNER_ID
    INNER JOIN TLOGSYNC AS log ON
        lib.ID=log.TLIBRARY_ID
WHERE
    TIME_END BETWEEN DATEADD(-1 DAY TO CAST(current_date || ' 08:00' AS timestamp)) AND CAST(current_date || ' 08:00' AS timestamp)
ORDER BY FIN ASC;
CREATE VIEW ADMBD_DICO ("Nom Table", "Description Table", "Nom Colonne", "Description Colonne", "Position", "Null Interdit", "Default value", "Type Donnée", "Taille", "Collation", "Character Set") AS

 
  
SELECT
    TRIM(r.RDB$RELATION_NAME) "Nom Table",
    TRIM(r.RDB$DESCRIPTION) "Description Table",
    TRIM(f.RDB$FIELD_NAME) "Nom Colonne", TRIM(f.RDB$DESCRIPTION) "Description Colonne", f.RDB$FIELD_POSITION "Position",
    COALESCE(f.RDB$NULL_FLAG,0) "Null Interdit",
    COALESCE(SUBSTRING(IIF(f.RDB$DEFAULT_SOURCE IS NULL, fs.RDB$DEFAULT_SOURCE,f.RDB$DEFAULT_SOURCE) FROM 9),'NULL') "Default value",
    DECODE(fs.RDB$FIELD_TYPE,7,'smallint', 8,'integer', 12,'date', 13,'time', 14,'char', 16,'bigint', 27,'double precision', 35,'timestamp', 37,'varchar', 261,'blob') "Type Donnée",
    fs.RDB$CHARACTER_LENGTH "Taille",
    TRIM(co.RDB$COLLATION_NAME) "Collation",
    TRIM(cs.RDB$CHARACTER_SET_NAME) "Character Set"
FROM
    RDB$RELATIONS r
        INNER JOIN RDB$RELATION_FIELDS f ON r.RDB$RELATION_NAME = f.RDB$RELATION_NAME
            INNER JOIN RDB$FIELDS fs ON f.RDB$FIELD_SOURCE = fs.RDB$FIELD_NAME
                LEFT JOIN RDB$CHARACTER_SETS cs ON fs.RDB$CHARACTER_SET_ID=cs.RDB$CHARACTER_SET_ID
                    LEFT JOIN RDB$COLLATIONS co ON (f.RDB$COLLATION_ID=co.RDB$COLLATION_ID AND fs.RDB$CHARACTER_SET_ID=co.RDB$CHARACTER_SET_ID)
WHERE
    r.RDB$SYSTEM_FLAG!=1 AND r.RDB$RELATION_TYPE=0

ORDER BY
    r.RDB$RELATION_NAME,f.RDB$FIELD_POSITION;
CREATE VIEW GET_OWNERS_STATS (ID, SUBDOMAIN, LOGIN, CREATION, NBJOURPRESENT, NBLIB, NBSYNC, LIBSIZE, NBGRP, NBUSER, NBCNT, NBPROF, NBDICOGEDPARAM, NBGEDPARAM) AS


SELECT OWN.ID, OWN.SUBDOMAIN, OWN.LOGIN, EXTRACT(YEAR FROM OWN.CREATE_DATE) || '-' || LPAD(EXTRACT(MONTH FROM OWN.CREATE_DATE),2,'0') || '-' || LPAD(EXTRACT(DAY FROM OWN.CREATE_DATE),2,'0') AS CREATION, DATEDIFF(DAY,OWN.CREATE_DATE,CURRENT_DATE) AS NBJOURPRESENT,
    (SELECT COUNT(LIB.ID) FROM TLIBRARY LIB WHERE LIB.TOWNER_ID=OWN.ID AND BIN_AND(LIB.STATE,1)=0) AS NBLIB,
    (SELECT COUNT(SYNC.ID) FROM TLOGSYNC SYNC WHERE SYNC.TOWNER_ID=OWN.ID) AS NBSYNC,
    COALESCE((SELECT SUM(LIB2.SIZE_MB) FROM TLIBRARY LIB2 WHERE LIB2.TOWNER_ID=OWN.ID AND BIN_AND(LIB2.STATE,1)=0),0) AS LIBSIZE,
    (SELECT COUNT(GRP.ID) FROM TGEDGROUP GRP WHERE GRP.TOWNER_ID=OWN.ID) AS NBGRP,
    (SELECT COUNT(USR.ID) FROM TGEDUSER USR WHERE USR.TOWNER_ID=OWN.ID AND BIN_AND(USR.STATE,1)=0) AS NBUSER,
    (SELECT COUNT(CNT.ID) FROM TCONTACT CNT WHERE CNT.TOWNER_ID=OWN.ID AND BIN_AND(CNT.STATE,1)=0) AS NBCNT,
    (SELECT COUNT(PROF.ID) FROM TPROFILE PROF WHERE PROF.TOWNER_ID=OWN.ID) AS NBPROF,
    (SELECT COUNT(GEDP.ID) FROM TGEDPARAM GEDP WHERE GEDP.TOWNER_ID=OWN.ID) AS NBDICOGEDPARAM,
    (SELECT COUNT(GEDPO.TOWNER_ID) FROM TGEDPARAMOWNER GEDPO WHERE GEDPO.TOWNER_ID=OWN.ID) AS NBGEDPARAM
FROM TOWNER OWN
WHERE BIN_AND(OWN.STATE,1)=0 AND OWN.ID>0
ORDER BY OWN.CREATE_DATE, OWN.LOGIN;
COMMENT ON DOMAIN       BOOLEAN IS 'Valeurs SmallInt 0/1 (0 par défaut) *NOT NULL* pour la gestion des colonnes à 2 états - 32767 est utilisé pour ne pas tenir compte d''une colonne BOOLEAN dans un critère de Procédure stockée';
COMMENT ON DOMAIN       STATE IS 'Utilisé dans la plupart des tables pour identifier des états spécifiques d''enregistrement (0 ==> État normal, >0 ==> État anormal) ; doit être traité comme "binaire" (0,1,2,4,8,...)';
COMMENT ON DOMAIN       SYNC_MAIL IS 'Envoi de mail de rapport de synchronisation : 0 => pas de mail (valeur par défaut) ; 1 => mail si échec seulement ; 2 => mail dans tous les cas';
COMMENT ON DOMAIN       TCPPORT IS 'Valeurs Integer acceptable pour les ports TCP/UDP 0 (admis pour gestion des colonnes NULL dans les PS) jusqu''à 65536 * DEFAULT NULL';
COMMENT ON DOMAIN       TYPE_PARAM IS 'Domaine utilisé par les colonnes "TYPE" des tables de paramètres';
COMMENT ON TABLE        TCONTACT IS 'Tables des contacts associés à un propriétaire et/ou une Bibliothèque';
COMMENT ON    COLUMN    TCONTACT.ID IS 'Identifiant du contact';
COMMENT ON    COLUMN    TCONTACT.TOWNER_ID IS 'Code propriétaire associé';
COMMENT ON    COLUMN    TCONTACT.NAME IS 'Nom (Personne physique ou morale)';
COMMENT ON    COLUMN    TCONTACT."FIRSTNAME" IS 'Prénom';
COMMENT ON    COLUMN    TCONTACT.PREFIX IS 'Titre de courtoisie';
COMMENT ON    COLUMN    TCONTACT.EMAIL IS 'Adresse de messagerie du contact';
COMMENT ON    COLUMN    TCONTACT.TEL IS 'N° de téléphone du contact';
COMMENT ON    COLUMN    TCONTACT.ADDRESS IS 'Adresse du contact';
COMMENT ON    COLUMN    TCONTACT.POSTCODE IS 'Code postal  du contact';
COMMENT ON    COLUMN    TCONTACT.REGION IS 'Région du contact';
COMMENT ON    COLUMN    TCONTACT.CITY IS 'Ville du contact';
COMMENT ON    COLUMN    TCONTACT.COUNTRY IS 'Pays du contact';
COMMENT ON    COLUMN    TCONTACT.STATE IS 'STATE du contact (cf. doc STATE)';
COMMENT ON    COLUMN    TCONTACT.CELLTEL IS 'N° de téléphone mobile (ou assimilé) du contact';
COMMENT ON    COLUMN    TCONTACT.IDENTIFIER IS 'Indentifiant interne à l''organisation du contact (N° salarié, N° SS, N° Client interne, etc...)';
COMMENT ON    COLUMN    TCONTACT.SERVICE IS 'Service interne dans l''organisation du contact';
COMMENT ON    COLUMN    TCONTACT.ORGANIZATION IS 'Organisation (Raison sociale, Entreprise, Société, Association, etc.) du contact';
COMMENT ON    COLUMN    TCONTACT.CREATE_DATE IS 'Date de création du contact';
COMMENT ON    COLUMN    TCONTACT.MODIF_DATE IS 'Date de dernière modification du contact';
COMMENT ON TABLE        TCONTLIB IS 'Association des contacts (personnes physiques/morales) avec les bibliothèques';
COMMENT ON    COLUMN    TCONTLIB.TLIBRARY_ID IS 'Code bibliothèque associée';
COMMENT ON    COLUMN    TCONTLIB.TCONTACT_ID IS 'Code contact associée';
COMMENT ON    COLUMN    TCONTLIB.TCONTTYPE_ID IS 'Type de contact (qualification, par exemple "juridique"/"technique"/"administratif")';
COMMENT ON    COLUMN    TCONTLIB.SYNC_SENDMAIL IS 'Envoi d''un email à l''issue d''une synchronisation (0 => jamais, 1 => sur erreur, 2 => toujours)';
COMMENT ON TABLE        TCONTOWNER IS 'Association des types de contacts (personnes physiques/morales) avec les contacts';
COMMENT ON    COLUMN    TCONTOWNER.TCONTACT_ID IS 'Code contact associée';
COMMENT ON    COLUMN    TCONTOWNER.TCONTTYPE_ID IS 'Type de contact (qualification, par exemple "juridique"/"technique"/"administratif")';
COMMENT ON TABLE        TCONTTYPE IS 'Type de contact';
COMMENT ON    COLUMN    TCONTTYPE.ID IS 'Code interne de type de contact';
COMMENT ON    COLUMN    TCONTTYPE.NAME IS 'Nom de type de contact';
COMMENT ON TABLE        TDOMPARAM IS 'Table des paramètes Domaine (globaux pour l''ensemble du domaine)';
COMMENT ON    COLUMN    TDOMPARAM.NAME IS 'Nom du paramètre Domaine';
COMMENT ON    COLUMN    TDOMPARAM.TYPE IS 'Type de données associée au Paramètre Domaine (Informatif)';
COMMENT ON    COLUMN    TDOMPARAM."VALUE" IS 'Valeur du paramètre Domaine (toujours retournée sous le type char, Cast nécessaire à l''aide du type de données';
COMMENT ON    COLUMN    TDOMPARAM.VALUEBLB IS 'Valeur BLOB (si applicable) du Paramètre domaine';
COMMENT ON    COLUMN    TDOMPARAM.COMMENT IS 'Commentaires (explications) sur le paramètre Domaine';
COMMENT ON    COLUMN    TDOMPARAM.PROTECTION IS 'Paramètre Domaine protégé (0), valeurs modifiables (1) ou créé par l''administrateur local (2)';
COMMENT ON TABLE        TFBSERVER IS 'Table des serveurs Firebird';
COMMENT ON    COLUMN    TFBSERVER.ID IS 'Identifiant Serveur Firebird';
COMMENT ON    COLUMN    TFBSERVER.NAME IS 'Nom courant du Serveur Firebird';
COMMENT ON    COLUMN    TFBSERVER.TCPPORT IS 'Port à l''écoute du Serveur Firebird';
COMMENT ON    COLUMN    TFBSERVER.HOST IS 'IP ou Nom FQDN du serveur Firebird';
COMMENT ON    COLUMN    TFBSERVER.TUNNELPORT IS 'Port à utiliser sur le serveur de tunnel (ou accès client lourd)';
COMMENT ON    COLUMN    TFBSERVER.TUNNELHOST IS 'IP ou Nom FQDN de l''hôte serveur de tunnel (ou accès client lourd)';
COMMENT ON    COLUMN    TFBSERVER.LIBROOTPATH IS 'Chemin d''accès des librairies situées sur ce serveur (initialisation des librairies)';
COMMENT ON    COLUMN    TFBSERVER.FBADMLOGIN IS 'Utilisateur *ADMINISTRATEUR* du serveur Firebird';
COMMENT ON    COLUMN    TFBSERVER.FBADMPASSWD IS 'Passord (cryptage Novaxel) de *ADMINISTRATEUR* du serveur Firebird';
COMMENT ON    COLUMN    TFBSERVER.STATE IS 'Serveur Firebird Actif/Inactif';
COMMENT ON    COLUMN    TFBSERVER.SIZE_MB IS 'Taille cumulée de toutes les bibliothèques sur disque (en Mo) pour ce serveur';
COMMENT ON TABLE        TGEDGROUP IS 'Table des Groupes d''utilisateurs GED';
COMMENT ON    COLUMN    TGEDGROUP.ID IS 'Code identifiant du Groupe d''utilisateur GED';
COMMENT ON    COLUMN    TGEDGROUP.TOWNER_ID IS 'Code identifiant du Propriétaire';
COMMENT ON    COLUMN    TGEDGROUP.NAME IS 'Nom du Groupe d''utilisateur GED (unique pour chaque Propriétaire';
COMMENT ON    COLUMN    TGEDGROUP.TYPE IS 'Type de groupe (1 = groupe primaire)';
COMMENT ON    COLUMN    TGEDGROUP.COMMENT IS 'Commentaire';
COMMENT ON    COLUMN    TGEDGROUP.CREATE_DATE IS 'Date de création du groupe';
COMMENT ON    COLUMN    TGEDGROUP.MODIF_DATE IS 'Date de modification (dernière MAJ) du groupe';
COMMENT ON    COLUMN    TGEDGROUP.TPROFILE_ID IS 'Profil à appliquer au groupe d''utilisateur';
COMMENT ON TABLE        TGEDGROUPLIB IS 'Table association des groupes d''utilisateur GED et Bibliothèque';
COMMENT ON    COLUMN    TGEDGROUPLIB.TGEDGROUP_ID IS 'Code identifiant du groupe';
COMMENT ON    COLUMN    TGEDGROUPLIB.TLIBRARY_ID IS 'Code identifiant de la Bibliothèque';
COMMENT ON    COLUMN    TGEDGROUPLIB.TPROFILE_ID IS 'Code identifiant du Profil à appliquer pour ce groupe d''utilisateur GED et cette Bibliothèque';
COMMENT ON TABLE        TGEDGROUPUSER IS 'Association des Groupes et des utilisateurs GED';
COMMENT ON    COLUMN    TGEDGROUPUSER.TGEDGROUP_ID IS 'Code identifiant du Groupe d''utilisateur GED';
COMMENT ON    COLUMN    TGEDGROUPUSER.TGEDUSER_ID IS 'Code identifiant de l''utilisateur GED';
COMMENT ON TABLE        TGEDPARAM IS 'Table de référence des paramètres GED (utilisables dans les Profils)';
COMMENT ON    COLUMN    TGEDPARAM.ID IS 'Identifiant du Paramètre';
COMMENT ON    COLUMN    TGEDPARAM.SECTION IS 'Section (classement) du Paramètre GED';
COMMENT ON    COLUMN    TGEDPARAM.NAME IS 'Nom du Paramètre GED (unique dans une Section)';
COMMENT ON    COLUMN    TGEDPARAM.TYPE IS 'Type de données associée au Paramètre GED (Informatif)';
COMMENT ON    COLUMN    TGEDPARAM.CLASS IS 'Classe (utilisation[s] possible[s]) de paramètre';
COMMENT ON    COLUMN    TGEDPARAM.DEFAULTVALUE IS 'Valeur par défaut pouvant être appliquée lors de l''utilisation de ce paramètre';
COMMENT ON    COLUMN    TGEDPARAM.DEFAULTVALUEBLB IS 'Valeur BLOB par défaut pouvant être appliquée lors de l''utilisation de ce paramètre';
COMMENT ON    COLUMN    TGEDPARAM.COMMENT IS 'Commentaires (explications) sur le Paramètre GED';
COMMENT ON    COLUMN    TGEDPARAM.PROTECTION IS 'Paramètre GED protégé (0), valeurs modifiables (1) ou créé par l''administrateur local (2)';
COMMENT ON    COLUMN    TGEDPARAM.MODIF_DATE IS 'Date (automatique) de dernière mise à jour d''un Paramètre';
COMMENT ON    COLUMN    TGEDPARAM.TOWNER_ID IS 'Code identifiant du Propiétaire (si saisi, ce paramètre ne pourra pas être visualisé par un autre propriétaire)';
COMMENT ON    COLUMN    TGEDPARAM.TLIBRARY_ID IS 'Code identifiant de la Bibliothèque (si saisi, ce paramètre ne pourra pas être visualisé par un autre propriétaire ou une autre Bibliothèque';
COMMENT ON TABLE        TGEDPARAMOWNER IS 'Table des paramètres  GED associés à chaque Profil (VALUE *OU* VALUEBLB doivent être NOT NULL)';
COMMENT ON    COLUMN    TGEDPARAMOWNER.TGEDPARAM_ID IS 'Code identifiant Paramètre GED';
COMMENT ON    COLUMN    TGEDPARAMOWNER.TOWNER_ID IS 'Code identifiant du Propriétaire';
COMMENT ON    COLUMN    TGEDPARAMOWNER."VALUE" IS 'Valeur (si applicable) du Paramètre GED dans le Profil';
COMMENT ON    COLUMN    TGEDPARAMOWNER.VALUEBLB IS 'Valeur BLOB (si applicable) du Paramètre GED dans le Profile';
COMMENT ON    COLUMN    TGEDPARAMOWNER.MODIF_DATE IS 'Date (automatique) de dernière mise à jour d''un Paramètre Profil';
COMMENT ON TABLE        TGEDPARAMPROF IS 'Table des paramètres  GED associés à chaque Profil (VALUE *OU* VALUEBLB doivent être NOT NULL)';
COMMENT ON    COLUMN    TGEDPARAMPROF.TGEDPARAM_ID IS 'Code identifiant Paramètre GED';
COMMENT ON    COLUMN    TGEDPARAMPROF.TPROFILE_ID IS 'Code identifiant du Profil';
COMMENT ON    COLUMN    TGEDPARAMPROF."VALUE" IS 'Valeur (si applicable) du Paramètre GED dans le Profil';
COMMENT ON    COLUMN    TGEDPARAMPROF.VALUEBLB IS 'Valeur BLOB (si applicable) du Paramètre GED dans le Profile';
COMMENT ON    COLUMN    TGEDPARAMPROF.MODIF_DATE IS 'Date (automatique) de dernière mise à jour d''un Paramètre Profil';
COMMENT ON TABLE        TGEDPARAMUSER IS 'Table des paramètres GED hors profils, donc directement associés à un Utilisateur GED (VALUE *OU* VALUEBLB doivent être NOT NULL)';
COMMENT ON    COLUMN    TGEDPARAMUSER.TGEDPARAM_ID IS 'Code identifiant Paramètre GED';
COMMENT ON    COLUMN    TGEDPARAMUSER.TGEDUSER_ID IS 'Code identifiant de l''Utilisateur GED';
COMMENT ON    COLUMN    TGEDPARAMUSER.TLIBRARY_ID IS 'Code identifiant de la Bibliothèque';
COMMENT ON    COLUMN    TGEDPARAMUSER."VALUE" IS 'Valeur (si applicable) du Paramètre GED dans le Profil';
COMMENT ON    COLUMN    TGEDPARAMUSER.VALUEBLB IS 'Valeur BLOB (si applicable) du Paramètre GED dans le Profile';
COMMENT ON    COLUMN    TGEDPARAMUSER.MODIF_DATE IS 'Date (automatique) de dernière mise à jour d''un Paramètre Utilisateur';
COMMENT ON TABLE        TGEDUSER IS 'Table des utilisateurs GED';
COMMENT ON    COLUMN    TGEDUSER.ID IS 'Code identifiant de l''utilisateur GED';
COMMENT ON    COLUMN    TGEDUSER.TOWNER_ID IS 'Code identifiant du Propriétaire';
COMMENT ON    COLUMN    TGEDUSER.LOGIN IS 'Login technique de l''utilisateur GED (restriction des cars. autorisés)';
COMMENT ON    COLUMN    TGEDUSER.PASSWD IS 'Mot de passe (sha256sum) de l''utilisateur GED (restriction des cars. autorisés)';
COMMENT ON    COLUMN    TGEDUSER.STATE IS 'STATE de l''utilisateur GED (cf. doc STATE)';
COMMENT ON    COLUMN    TGEDUSER.CREATE_DATE IS 'Date de création de l''utilisateur GED';
COMMENT ON    COLUMN    TGEDUSER.MODIF_DATE IS 'Date de dernière modification de l''utilisateur GED';
COMMENT ON    COLUMN    TGEDUSER.SUBSCRIBE_START IS 'Date de début d''abonnement';
COMMENT ON    COLUMN    TGEDUSER.SUBSCRIBE_END IS 'Date de fin d''abonnement';
COMMENT ON    COLUMN    TGEDUSER.COMMENT IS 'Commentaires sur l''utilisateur GED';
COMMENT ON    COLUMN    TGEDUSER.CHARGEABLE IS 'Gestion d''abonnement utilisateur GED';
COMMENT ON    COLUMN    TGEDUSER.TPROFILE_ID IS 'Profil par défaut à appliquer à l''utilisateur GED';
COMMENT ON    COLUMN    TGEDUSER.TCONTACT_ID IS 'Contact associé à l''utilisateur GED';
COMMENT ON    COLUMN    TGEDUSER.TGEDGROUP_ID IS 'Groupe de référence (primaire) de l''utilisateur';
COMMENT ON TABLE        TGEDUSERLIB IS 'Table association des utilisateurs GED et Bibliothèque';
COMMENT ON    COLUMN    TGEDUSERLIB.TGEDUSER_ID IS 'Code identifiant de l''utilisateur GED';
COMMENT ON    COLUMN    TGEDUSERLIB.TLIBRARY_ID IS 'Code identifiant de la Bibliothèque';
COMMENT ON    COLUMN    TGEDUSERLIB.TPROFILE_ID IS 'Code identifiant du Profil à appliquer pour cet utilisateur GED et cette Bibliothèque';
COMMENT ON TABLE        TLIBRARY IS 'Table des bibliothèques Novaxel hébergées sur le domaine';
COMMENT ON    COLUMN    TLIBRARY.ID IS 'Identifiant de la Bibliothèque';
COMMENT ON    COLUMN    TLIBRARY.TOWNER_ID IS 'Code Propriétaire associé';
COMMENT ON    COLUMN    TLIBRARY.TFBSERVER_ID IS 'Serveur Firebird supportant la Bibliothèque';
COMMENT ON    COLUMN    TLIBRARY.COMMENT IS 'Nom Bibliothèque interne au domaine (pas forcément le titre)';
COMMENT ON    COLUMN    TLIBRARY.TITLE IS 'Titre de la bibliothèque Novaxel (cf. NOVAXEL.FDB.TCONFIG.CLEE=''TITLE''';
COMMENT ON    COLUMN    TLIBRARY.GUID IS 'GUID de la bibliothèque Novaxel (cf. NOVAXEL.FDB.TCONFIG.CLEE=''GUID''';
COMMENT ON    COLUMN    TLIBRARY.VERSION IS 'Version Novaxel de la bibliothèque';
COMMENT ON    COLUMN    TLIBRARY.DBPATH IS 'Chemin d''accès à la Bibliothèque';
COMMENT ON    COLUMN    TLIBRARY.STATE IS 'Bibliothèque active/inactive';
COMMENT ON    COLUMN    TLIBRARY.CREATE_DATE IS 'Date/heure de création de la Bibliothèque ';
COMMENT ON    COLUMN    TLIBRARY.MODIF_DATE IS 'Date/heure de la dernière modification apportée à cette bibliothèque';
COMMENT ON    COLUMN    TLIBRARY.SUBSCRIBE_START IS 'Date de début de souscription d''abonnement';
COMMENT ON    COLUMN    TLIBRARY.SUBSCRIBE_END IS 'Date de fin de souscription d''abonnement';
COMMENT ON    COLUMN    TLIBRARY.ACCESS_MODE IS 'Mode d''accès de la bibliothèque : Si 0 (read only, valeur par défaut) : aucune MAJ directe possible en item (document par panière possible, si autorisée) - Si 1 (maj par panières) : MAJ possible en arborescence (complète) et document (par panière) - Si 2 (full Cloud) : Tout ajout/MAJ possible directement';
COMMENT ON    COLUMN    TLIBRARY.ACCESS_TYPE IS 'Type d''accès sur cette bibliothèque (Client Lourd/WEB OU Synchro)';
COMMENT ON    COLUMN    TLIBRARY.SIZE_MB IS 'Taille de la bibliothèque sur le disque (en Mo) - Si 0 (par défaut) voir en fonction de LAST_SIZE_CHECK (si NULL = taille à 0 mais jamais évalué, sinon taille effective à 0)';
COMMENT ON    COLUMN    TLIBRARY.LAST_SIZE_CHECK IS 'Date/heure de la dernière vérification de taille (procédure automatisée)';
COMMENT ON    COLUMN    TLIBRARY.SIZE_MB_ORG IS 'Taille de la bibliothèque sur le poste client de synchro (facturation)';
COMMENT ON    COLUMN    TLIBRARY.CHARGEABLE IS 'Bibliothèque facturable';
COMMENT ON    COLUMN    TLIBRARY.TPROFILE_ID IS 'Profil par défaut à appliquer à la Bibliothèque';
COMMENT ON    COLUMN    TLIBRARY.TLOGSYNC_ID IS 'Identifiant de la dernière synchro pour cette bibliothèque';
COMMENT ON    COLUMN    TLIBRARY.LISTORDER IS 'Poids pour ordre de tri de la liste des bibliothèques en GUI';
COMMENT ON TABLE        TLOGSYNC IS 'Table de journalisation des synchronisations';
COMMENT ON    COLUMN    TLOGSYNC.TLIBRARY_ID IS 'Identifiant de la bilbiothèque synchronisée';
COMMENT ON    COLUMN    TLOGSYNC.TOWNER_ID IS 'Propriétaire de la bilbiothèque synchronisée';
COMMENT ON    COLUMN    TLOGSYNC.TIME_START IS 'Début de synchronisation';
COMMENT ON    COLUMN    TLOGSYNC.TIME_END IS 'Fin de synchronisation';
COMMENT ON    COLUMN    TLOGSYNC.DURATION IS 'Durée de la synchronisaiton en secondes';
COMMENT ON    COLUMN    TLOGSYNC.SIZE_BEFORE IS 'Espace occupé avant la synchronisation';
COMMENT ON    COLUMN    TLOGSYNC.SIZE_AFTER IS 'Espace occupé après la synchronisation';
COMMENT ON    COLUMN    TLOGSYNC.STATE IS 'Etat de la synchro (0 => Ok ; 1 => problème)';
COMMENT ON    COLUMN    TLOGSYNC.ERR_COMMENT IS 'Message d''erreur de synchronisation';
COMMENT ON TABLE        TOWNER IS 'Table des profils d''accès au domaine';
COMMENT ON    COLUMN    TOWNER.ID IS 'Identifiant Compte';
COMMENT ON    COLUMN    TOWNER.NAME IS 'Nom courant du compte';
COMMENT ON    COLUMN    TOWNER.SUBDOMAIN IS 'Nom (unique) de sous-domaine affecté à un propriétaire pour les accès GED';
COMMENT ON    COLUMN    TOWNER.LOGIN IS 'Nom technique du compte (accès administration espace perso sur le domaine)';
COMMENT ON    COLUMN    TOWNER.PASSWD IS 'Mot de passe du compte (sha256sum)';
COMMENT ON    COLUMN    TOWNER.STATE IS 'Compte Actif/Inactif';
COMMENT ON    COLUMN    TOWNER.SIZE_MB IS 'Taille cumulée des bibliothèques actives sur disque (en Mo) pour ce propriétaire';
COMMENT ON    COLUMN    TOWNER.SIZE_MB_CHARGEABLE IS 'Taille cumulée des bibliothèques facturables sur disque (en Mo) pour ce propriétaire';
COMMENT ON    COLUMN    TOWNER.CREATE_DATE IS 'Date de création du compte';
COMMENT ON    COLUMN    TOWNER.MODIF_DATE IS 'Date de dernière modification';
COMMENT ON    COLUMN    TOWNER.SUBSCRIBE_START IS 'Date de début d''abonnement';
COMMENT ON    COLUMN    TOWNER.SUBSCRIBE_END IS 'Date de fin d''abonnement';
COMMENT ON    COLUMN    TOWNER.EXTERNAL_ID IS 'Code client externe (Genesys par exemple)';
COMMENT ON    COLUMN    TOWNER.COMMENT IS 'Commentaire sur le propriétaire';
COMMENT ON    COLUMN    TOWNER.TPROFILE_ID IS 'Profil par défaut à appliquer au Propriétaire';
COMMENT ON    COLUMN    TOWNER.TCONTACT_ID IS 'Contact principal associé au Propriétaire';
COMMENT ON TABLE        TPROFILE IS 'Table des Profils (ensemble de paramètres) à appliquer lors de la connexion d''un utilisateur GED';
COMMENT ON    COLUMN    TPROFILE.ID IS 'Identifiant du Profil';
COMMENT ON    COLUMN    TPROFILE.TOWNER_ID IS 'Identifiant du Propriétaire du Profil';
COMMENT ON    COLUMN    TPROFILE.NAME IS 'Nom du Profil';
COMMENT ON    COLUMN    TPROFILE.CREATE_DATE IS 'Date de création du Profil';
COMMENT ON    COLUMN    TPROFILE.MODIF_DATE IS 'Date de dernière modification du Profil';
COMMENT ON    COLUMN    TPROFILE.COMMENT IS 'Commentaire sur le Profil';
COMMENT ON    COLUMN    TPROFILE.TLIBRARY_ID IS 'Identifiant de bibliothèque : si le Profil est associé à une bibliothèque particulière (notion de PROFILE LIBRARY) - Si NULL, le Profil est considéré comme étant utilisable à tous les niveaux (notion de PROFILE GLOBAL)';
COMMENT ON    COLUMN    TPROFILE.TGEDUSER_ID IS 'Identifiant d''utilisateur GED : si le Profil est associé à un utiilsateur GED particulier (notion de PROFILE GEDUSER) - Si NULL, le Profil est considéré comme étant utilisable à tous les niveaux (notion de PROFILE GLOBAL)';
COMMENT ON TABLE        TSTORAGE IS 'Table de paramètres "libres" utilisables par les clients sans contrôle du serveur d''application';
COMMENT ON    COLUMN    TSTORAGE.TOWNER_ID IS 'Code identifiant du propriétaire';
COMMENT ON    COLUMN    TSTORAGE.SECTION IS 'Section (classement) du Paramètre';
COMMENT ON    COLUMN    TSTORAGE.NAME IS 'Nom du Paramètre (unique dans une Section)';
COMMENT ON    COLUMN    TSTORAGE."VALUE" IS 'Valeur du Paramètre';
COMMENT ON    COLUMN    TSTORAGE.TGEDUSER_ID IS 'Code identifiant de la l''utilisateur GED';
COMMENT ON    COLUMN    TSTORAGE.TLIBRARY_ID IS 'Code identifiant de la Bibliothèque';
COMMENT ON    COLUMN    TSTORAGE.MODIF_DATE IS 'Date (automatique) de dernière mise à jour du Paramètre';
COMMENT ON PROCEDURE    ADD_CONTACT_TYPE_TO_OWNER IS 'Ajout d''une association Type de contact/Bibliothèque dans la table TCONTOWER';
COMMENT ON PROCEDURE    ADD_GEDGROUP_TO_LIBRARY IS 'Ajout d''une association Groupe d''Utilisateur GED/Bibliothèqie dans la table TGEDGROUPLIB';
COMMENT ON PROCEDURE    ADD_GEDUSER_TO_GEDGROUP IS 'Ajout d''une association Utilisateur GED/Groupe d''utilisateur GED dans la table TGEDGROUPUSER';
COMMENT ON PROCEDURE    ADD_GEDUSER_TO_LIBRARY IS 'Ajout d''une association Utilisateur GED/Bibliothèqie dans la table TGEDUSERLIB';
COMMENT ON PROCEDURE    ADD_LOGSYNC IS 'Ajout d''une ligne en journalisation de synchronisation (table TLOGSYNC)';
COMMENT ON PROCEDURE    DEL_CONTACT IS 'Suppression *logique* d''un Contact dans TCONTACT';
COMMENT ON PROCEDURE    DEL_CONTACT_TYPE_FOR_LIBRARY IS 'Suppression *physique* d''une association Contact + Type de contact/Bibliothèque dans la table TCONTLIB';
COMMENT ON PROCEDURE    DEL_CONTACT_TYPE_FOR_OWNER IS 'Suppression *physique* d''une association Type de contact/Bibliothèque dans la table TCONTOWER';
COMMENT ON PROCEDURE    DEL_CONTTYPE IS 'Suppression *physique* d''un Type de contact dans la table TCONTTYPE';
COMMENT ON PROCEDURE    DEL_DOMPARAM IS 'Suppression d''un paramètre domaine (table TDOMPARAM)';
COMMENT ON PROCEDURE    DEL_FBSERVER IS 'Suppression *logique* d''un Serveur Firebird dans la table TFBERVER';
COMMENT ON PROCEDURE    DEL_GEDGROUP IS 'Suppression *physique* d''un Groupe d''utilisateur GED dans la table TGEDGROUP';
COMMENT ON PROCEDURE    DEL_GEDGROUP_FOR_LIBRARY IS 'Suppression *physique* d''une association Groupe d''utilisateur GED/Bibliothèque dans la table TGEDGROUPLIB';
COMMENT ON PROCEDURE    DEL_GEDPARAM IS 'Suppression (physique) d''un Paramètre GED dans la table TGEDPARAM';
COMMENT ON PROCEDURE    DEL_GEDPARAMOWNER IS 'Suppression d''un Paramètre GED associé à une utilisateur dans la table TGEDPARAMOWNER';
COMMENT ON PROCEDURE    DEL_GEDPARAMPROF IS 'Suppression d''un Paramètre GED pour un Utilisateur GED dans table TGEDPARAMUSER';
COMMENT ON PROCEDURE    DEL_GEDPARAMUSER IS 'Suppression d''un Paramètre GED pour un utilisateur dans la table TGEDPARAMUSER';
COMMENT ON PROCEDURE    DEL_GEDUSER IS 'Suppression *logique* d''un Utilisateur GED dans la table TGEDUSER (STATE + LOGIN)';
COMMENT ON PROCEDURE    DEL_GEDUSER_FOR_GEDGROUP IS 'Suppression *physique* d''une association Utilisateur GED/Groupes d''utilisateur GED dans la table TGEDGROUPUSER';
COMMENT ON PROCEDURE    DEL_GEDUSER_FOR_LIBRARY IS 'Suppression *physique* d''une association Utilisateur GED/Bibliothèque dans la table TGEDUSERLIB';
COMMENT ON PROCEDURE    DEL_LIBRARY IS 'Suppression *logique* d''une Bibliothèque dans la table TLIBRARY (STATE + TITLE)';
COMMENT ON PROCEDURE    DEL_OWNER IS 'Suppression *logique* d''un Propriétaire dans la table TOWNER (STATE + LOGIN)';
COMMENT ON PROCEDURE    DEL_PROFILE IS 'Suppression *physique* d''un Profil dans la table TPROFILE';
COMMENT ON PROCEDURE    DEL_STORAGES IS 'Suppression *physique* de paramètres dans la table TSTORAGE';
COMMENT ON PROCEDURE    GET_ALL_LIBRARIES_FOR_GEDUSER IS 'Liste de TOUTES les bibliothèques rattachées à un utilisateur GED, soit directement (base TGEDUSERLIB) soit via son groupe primaire (base TGEDGROUPLIB)';
COMMENT ON PROCEDURE    GET_ALTER_STATE_OK IS 'Technique - Renvoie une chaine de critère (utilisable dans un WHERE) adaptée aux STATE de *modification* initialisés par défaut';
COMMENT ON PROCEDURE    GET_CONTACTS IS 'Liste détaillée de tous les contacts (base TCONTACT)';
COMMENT ON PROCEDURE    GET_CONTACTS_FOR_OWNER IS 'Liste des contacts rattachés à un Propriétaire (base TCONTACT)';
COMMENT ON PROCEDURE    GET_CONTACTS_TYPES_FOR_CONTACT IS 'Liste complète des relations d''un contact (utilisation) dans TCONTOWNER et TCONTLIB';
COMMENT ON PROCEDURE    GET_CONTACTS_TYPES_FOR_LIBRARY IS 'Liste des contacts + Types de contact rattachés à une Biliothèque (base TCONTLIB)';
COMMENT ON PROCEDURE    GET_CONTACTS_TYPES_FOR_OWNER IS 'Liste des contacts + Types de contact rattachés à un Propriétaire (base TCONTOWNER)';
COMMENT ON PROCEDURE    GET_CONTACT_INFOS IS 'Informations détaillées sur un Contact (base TCONTACT)';
COMMENT ON PROCEDURE    GET_CONTACT_TYPE_FOR_LIBRARY IS 'Liste complète des relations d''un contact avec une bibliothèque (base TCONTLIB)';
COMMENT ON PROCEDURE    GET_CONTTYPES IS 'Liste des Types de contact possible  (base TCONTTYPE)';
COMMENT ON PROCEDURE    GET_CONTTYPE_INFOS IS 'Informations détaillées sur un Type de contact (base TCONTTYPE)';
COMMENT ON PROCEDURE    GET_CONTTYPE_MDF IS 'Informations détaillées du type de contact pour un contact donné';
COMMENT ON PROCEDURE    GET_DATE_STRING IS 'Technique - Renvoie une chaine formatée pour la gestion des date en CHAR (paramètres de procédure)';
COMMENT ON PROCEDURE    GET_DOMPARAM IS 'Renvoie les informations détaillées pour un paramètre de domaine donné (base TDOMPARAM)';
COMMENT ON PROCEDURE    GET_DOMPARAMS IS 'Renvoie la liste complète des paramètres de domaine (base TDOMPARAM)';
COMMENT ON PROCEDURE    GET_DOMPARAM_VALUEBLB IS 'Contenu d''une colonne BLOB pour un paramètre domaine';
COMMENT ON PROCEDURE    GET_DOM_ACCESS IS 'Renvoie l''accès au domaine pour un type particulier (accès global, WEB, Mobile, etc.)';
COMMENT ON PROCEDURE    GET_FBSERVERS IS 'Liste des Serveurs Firebird disponibles (base TFBSERVER)';
COMMENT ON PROCEDURE    GET_FBSERVER_INFOS IS 'Informations détaillées sur un Serveur Firebird (base TFBSERVER)';
COMMENT ON PROCEDURE    GET_GEDGROUPS_FOR_GEDUSER IS 'Liste des Groupes d''utilisateurs GED rattachés à un Utilisateur GED (base TGEDGROUPUSER)';
COMMENT ON PROCEDURE    GET_GEDGROUPS_FOR_LIBRARY IS 'Liste des Groupes d''utilisateur GED associés à une Bibliothèque';
COMMENT ON PROCEDURE    GET_GEDGROUPS_FOR_OWNER IS 'Liste des Groupes d'' Utilisateur GED associés à un Propriétaire (base TGEDGROUP)';
COMMENT ON PROCEDURE    GET_GEDGROUP_INFOS IS 'Informations détaillées sur Groupe d''Utilisateur GED (base TGEDGROUP)';
COMMENT ON PROCEDURE    GET_GEDPARAM IS 'Renvoie les informations détaillées pour un paramètre de GED donné (base TGEDPARAM)';
COMMENT ON PROCEDURE    GET_GEDPARAMOWNER IS 'Détail d''un Paramètre GED donné pour un Propriétaire donné (base TGEDPARAMOWNER)';
COMMENT ON PROCEDURE    GET_GEDPARAMOWNERS_FOR_OWNER IS 'Liste des Paramètre GED pour un Propriétaire donné (base TGEDPARAMOWNER)';
COMMENT ON PROCEDURE    GET_GEDPARAMOWNER_MDF IS 'Informations détaillées des paramètres d''un Propriétaire (base TGEDPARAMOWNER)';
COMMENT ON PROCEDURE    GET_GEDPARAMOWNER_VALUEBLB IS 'Contenu d''une colonne BLOB pour un paramètre GED d''un propriétaire';
COMMENT ON PROCEDURE    GET_GEDPARAMPROF IS 'Détail d''un Paramètre GED donné pour un Profil donné (base TGEDPARAMPROF)';
COMMENT ON PROCEDURE    GET_GEDPARAMPROFS_FOR_PROFILE IS 'Liste des Paramètre GED pour un Profil donné (base TGEDPARAMPROF)';
COMMENT ON PROCEDURE    GET_GEDPARAMPROF_VALUEBLB IS 'Contenu d''une colonne BLOB pour un paramètre GED d''un profil';
COMMENT ON PROCEDURE    GET_GEDPARAMS IS 'Renvoie la liste détaillée des paramètres GED globaux OU pour un Propriétaire OU pour une Bibliothèque (base TGEDPARAM)';
COMMENT ON PROCEDURE    GET_GEDPARAMUSER IS 'Détail d''un Paramètre GED donné pour un Utilisateur GED donné (base TGEDPARAMUSER)';
COMMENT ON PROCEDURE    GET_GEDPARAMUSERS_FOR_USER IS 'Liste des Paramètre GED pour un Utilisateur GED donné et, éventuellement, une Bibliothèque et une sectioin donnée (base TGEDPARAMUSER)';
COMMENT ON PROCEDURE    GET_GEDPARAMUSER_VALUEBLB IS 'Contenu d''une colonne BLOB pour un paramètre GED d''un utilisateur';
COMMENT ON PROCEDURE    GET_GEDPARAM_DEFAULTVALUEBLB IS 'Contenu d''une colonne BLOB pour un paramètre GED';
COMMENT ON PROCEDURE    GET_GEDPARAM_FOR_NAME IS 'Renvoie les informations détaillées pour un paramètre de GED donné par son Nom ET sa section (base TGEDPARAM)';
COMMENT ON PROCEDURE    GET_GEDUSERS_FOR_LIBRARY IS 'Liste des Utilisateurs GED rattachés à une Bibliothèque (base TGEDUSERLIB)';
COMMENT ON PROCEDURE    GET_GEDUSERS_FOR_OWNER IS 'Liste des Utilisateurs GED rattachés à un Propriétaire (base TGEDUSER) ou à un Groupe d''utilisateurs (base TGEDGROUPUSER)';
COMMENT ON PROCEDURE    GET_GEDUSER_ID IS 'Renvoie le code et le STATE d''un Utilisateur GED par rapport à un couple d''authentification LOGIN/PASSWORD (base TGEDUSER)';
COMMENT ON PROCEDURE    GET_GEDUSER_INFOS IS 'Informations détaillées sur Utilisateur GED (base TGEDUSER)';
COMMENT ON PROCEDURE    GET_LASTSYNC_MDF IS 'Informations détaillées concernant la dernière synchronisation d''une librairie donnée';
COMMENT ON PROCEDURE    GET_LIBRARIES IS 'Liste des bibliothèques du domaine (base TLIBRARY)';
COMMENT ON PROCEDURE    GET_LIBRARIES_FOR_FBSERVER IS 'Liste des bibliothèques rattachées à un serveur Firebird (base TLIBRARY)';
COMMENT ON PROCEDURE    GET_LIBRARIES_FOR_GEDGROUP IS 'Liste des Bibliothèques associées à un Groupe d''utilisateur GED';
COMMENT ON PROCEDURE    GET_LIBRARIES_FOR_GEDUSER IS 'Liste des bibliothèques rattachées à un utilisateur GED (base TGEDUSERLIB)';
COMMENT ON PROCEDURE    GET_LIBRARIES_FOR_OWNER IS 'Liste des bibliothèques rattachées à un propriétaire (base TLIBRARY)';
COMMENT ON PROCEDURE    GET_LIBRARY_CONNECT IS 'Renvoie une chaine de connexion technique Firebird (utilisable par un client Firebird) pour un Bibliothèque donnée (base TLIBRARY)';
COMMENT ON PROCEDURE    GET_LIBRARY_INFOS IS 'Informations détaillées sur une bibliothèque (base TLIBRARY)';
COMMENT ON PROCEDURE    GET_LOGSYNCS IS 'Renvoie les détails de synchronisation pour une Bibliothèque ou un Propriétaire donné (table TLOGSYNC)';
COMMENT ON PROCEDURE    GET_LOGSYNCSTATS IS 'Renvoie les détails de synchronisation pour une Bibliothèque ou une Propriétaire donné (table TLOGSYNC)';
COMMENT ON PROCEDURE    GET_LOGSYNC_MDF IS 'Informations détaillées concernant les synchronisations d'' propriétaire (attention, très long), d''une librairie (attention, très long) ou d''une synchronisation donnée';
COMMENT ON PROCEDURE    GET_OWNERS IS 'Liste des Propriétaires du domaine (base TOWNER)';
COMMENT ON PROCEDURE    GET_OWNER_ID IS 'Renvoie le code et le STATE d''un Propriétaire par rapport à un couple d''authentification LOGIN/PASSWORD (base TOWNER)';
COMMENT ON PROCEDURE    GET_OWNER_INFOS IS 'Informations détaillées sur un Propriétaire (base TOWNER)';
COMMENT ON PROCEDURE    GET_OWNER_IS_ADMIN IS 'Renvoie 0/1 en fonction de l''état "Administrateur du Domaine" pour un Propriétaire donné (base TOWNER)';
COMMENT ON PROCEDURE    GET_PROFILES_FOR_OWNER IS 'Liste des Profils associés à un Propriétaire';
COMMENT ON PROCEDURE    GET_PROFILE_FOR_GEDGROUPLIB IS 'Renvoie LE profil associé à la Bibliothèque et au groupe d''utilisateur donné dans la table TGEDGROUPLIB';
COMMENT ON PROCEDURE    GET_PROFILE_FOR_GEDUSERLIB IS 'Renvoie LE profil associé à la Bibliothèque et l''utilisateur donné dans la table TGEDUSERLIB';
COMMENT ON PROCEDURE    GET_PROFILE_INFOS IS 'Informations détaillées sur un Profil';
COMMENT ON PROCEDURE    GET_STATES IS 'Technique - Renvoie une liste des états (colonne STATE) pour une table et des critères données (base générique)';
COMMENT ON PROCEDURE    GET_STATE_CRITERIA IS 'Construction d''critère à appliquer sur un STATE d''une table donnée en fonction d''un paramètre STATE passé en entrée de Procédure stockées (utilisable dans un WHERE)';
COMMENT ON PROCEDURE    GET_STORAGES IS 'Liste des paramètres en STORAGE disponibles filtrés en fonction des paramètres (base TSTORAGE)';
COMMENT ON PROCEDURE    GET_SUBDOMAIN_EXISTS IS 'Renvoie le code Propriétaire d''un sous-domaine (unique) donné (base TOWNER)';
COMMENT ON PROCEDURE    GET_VISIBILITY_STATE_OK IS 'Technique - Renvoie une chaine de critère (utilisable dans un WHERE) adaptée aux STATE de *visualisation* initialisés par défaut';
COMMENT ON PROCEDURE    SET_CONTACT_INFOS IS 'Création (ID = 0) ou MAJ d''un Contact dans la table TCONTACT';
COMMENT ON PROCEDURE    SET_CONTACT_TYPE_TO_LIBRARY IS 'Association d''un contact avec une bibliobthèque (base TCONTLIB)';
COMMENT ON PROCEDURE    SET_CONTTYPE_INFOS IS 'Création (ID = 0) ou MAJ d''un Type de Contact dans la table TCONTTYPE';
COMMENT ON PROCEDURE    SET_DOMPARAM IS 'Création (NAME inexistant) ou MAJ d''un Paramètre dans la table TDOMPARAM';
COMMENT ON PROCEDURE    SET_DOMPARAM_VALUEBLB IS 'Mise à jour de la valeur BLOB d''un Paramètre déjà présent dans la table TDOMPARAM';
COMMENT ON PROCEDURE    SET_FBSERVER_INFOS IS 'Création (ID = 0) ou MAJ d''un Serveur Firebird dans la table TFBSERVER';
COMMENT ON PROCEDURE    SET_GEDGROUP_INFOS IS 'Création (ID=0) ou MAJ d''un Groupe d''Utilisateur GED dans la table TGEDGROUP';
COMMENT ON PROCEDURE    SET_GEDPARAM IS 'Création (ID inexistant) ou MAJ d''un Paramètre GED dans la table TGEDPARAM';
COMMENT ON PROCEDURE    SET_GEDPARAMOWNER IS 'Ajout ou mise à jour d''un Paramètre GED pour un Propriétaire donné, dans la table TGEDPARAMOWNER';
COMMENT ON PROCEDURE    SET_GEDPARAMOWNER_VALUEBLB IS 'Mise à jour de la valeur BLOB d''un Paramètre Propriétaire déjà présent dans la table TGEDPARAMOWNER';
COMMENT ON PROCEDURE    SET_GEDPARAMPROF IS 'Ajout ou mise à jour d''un Paramètre GED pour un Profil donné dans la table TGEDPARAMPROF';
COMMENT ON PROCEDURE    SET_GEDPARAMPROF_VALUEBLB IS 'Mise à jour de la valeur BLOB d''un Paramètre Profil déjà présent dans la table TGEDPARAMPROF';
COMMENT ON PROCEDURE    SET_GEDPARAMUSER IS 'Ajout ou mise à jour d''un Paramètre GED à un utilisateur donné dans la table TGEDPARAMUSER';
COMMENT ON PROCEDURE    SET_GEDPARAMUSER_VALUEBLB IS 'Mise à jour de la valeur BLOB d''un Paramètre Utilisateur déjà présent dans la table TGEDPARAMUSER';
COMMENT ON PROCEDURE    SET_GEDPARAM_DEFAULTVALUEBLB IS 'Mise à$ jour d''une colonne BLOB pour un paramètre GED';
COMMENT ON PROCEDURE    SET_GEDUSER_INFOS IS 'Création (ID=0) ou MAJ d''un Utilisateur GED dans la table TGEDUSER';
COMMENT ON PROCEDURE    SET_GEDUSER_PASSWD IS 'MAJ du mot de passe d''un Utilisateur GED dans la table TGEDUSER';
COMMENT ON PROCEDURE    SET_LIBRARY_INFOS IS 'Création (ID = 0) ou MAJ d''une Bibliothèque dans la table TLIBRARY';
COMMENT ON PROCEDURE    SET_OWNER_INFOS IS 'Création (ID = 0) ou MAJ d''un Propriétaire (sauf mot de passe, voir PS "SET_OWNER_DOM_PASSWD") dans la table TOWNER';
COMMENT ON PROCEDURE    SET_OWNER_PASSWD IS 'MAJ du mot de passe d''un Propriétaire dans la table TOWNER';
COMMENT ON PROCEDURE    SET_PROFILE_INFOS IS 'Création (ID = 0) ou MAJ d'' un Profil dans la table TPROFILE';
COMMENT ON PROCEDURE    SET_STATE IS 'Technique - MAJ d''une colonne STATE dans une table donnée(base générique)';
COMMENT ON PROCEDURE    SET_STORAGE IS 'Création d''un Paramètre STORAGE dans la table TSTORAGE';
COMMENT ON PROCEDURE    SET_STRING_DATE IS 'Technique - Initialise une chaine formatée pour la gestion des date en CHAR (paramètres de procédure)';
COMMENT ON PROCEDURE    UNDEL_CONTACT IS 'Annulation de la suppression *logique* d''un Contact dans TCONTACT';
COMMENT ON PROCEDURE    UNDEL_FBSERVER IS 'Annulation de la suppression *logique* d''un Serveur Firebird dans la table TFBERVER';
COMMENT ON PROCEDURE    UNDEL_GEDUSER IS '''un Utilisateur GED dans la table TGEDUSER (STATE)';
COMMENT ON PROCEDURE    UNDEL_LIBRARY IS 'Annulation de la suppression *logique* d''une Bibliothèque dans la table TLIBRARY (STATE + TITLE)';
COMMENT ON PROCEDURE    UNDEL_OWNER IS 'Annulation de la suppression *logique* d''un Propriétaire dans la table TOWNER (STATE + LOGIN)';
COMMENT ON TRIGGER      AINC_TCONTACT IS 'MAJ ID SEQ_CONTACT/CREATE_DATE en insertion';
COMMENT ON TRIGGER      AINC_TCONTTYPE IS 'MAJ ID SEQ_CONTTYPE en insertion';
COMMENT ON TRIGGER      AINC_TFBSERVER IS 'MAJ ID SEQ_LOG_SYNC en insertion';
COMMENT ON TRIGGER      AINC_TGEDGROUP IS 'MAJ ID SEQ_GEDGROUP/CREATE_DATE en insertion';
COMMENT ON TRIGGER      AINC_TGEDPARAM IS 'MAJ ID SEQ_GEDPARAM';
COMMENT ON TRIGGER      AINC_TGEDUSER IS 'MAJ ID SEQ_GEDUSER/CREATE_DATE en insertion';
COMMENT ON TRIGGER      AINC_TLIBRARY IS 'MAJ ID SEQ_OWNER/CREATE_DATE en insertion';
COMMENT ON TRIGGER      AINC_TPROFILE IS 'MAJ ID SEQ_PROFILE/CREATE_DATE en insertion';
COMMENT ON TRIGGER      TGEDPARAMOWNER_STAMP IS 'Mise à jour de la date de modification du paramètre Profil';
COMMENT ON TRIGGER      TGEDPARAMPROF_STAMP IS 'Mise à jour de la date de modification du paramètre Profil';
COMMENT ON TRIGGER      TGEDPARAMUSER_STAMP IS 'Mise à jour de la date de modification du paramètre Utilisateur';
COMMENT ON TRIGGER      UPDSIZE_TLIBRARY IS 'Mise à jour des cumuls de taille de LIB pour TOWNER et TFBSERVER';
COMMENT ON EXCEPTION    EX_ALPHAONLY_DOM_LOGIN IS 'Violation des règles de contraintes de TOWNER.DOM_LOGIN (non vide, alphanum + "_" + "." seulement)';
COMMENT ON EXCEPTION    EX_ALPHAONLY_SUBDOMAIN IS 'Violation des règles de contraintes de TOWNER.SUBDOMAIN (non vide, alphanum + "_" + "." seulement)';
COMMENT ON EXCEPTION    EX_BADACCESSMODE IS 'Mode d''accès TLIBRARY.ACCESS_MODE non référencé (check)';
COMMENT ON EXCEPTION    EX_BADOWNER IS 'Propriétaire incohérent pour les paramètres GED';
COMMENT ON EXCEPTION    EX_BAD_DOM_LOGIN IS 'Login Propriétaire inexistant OU ou non visible/modifiable par rapport au TOWNER.STATE';
COMMENT ON EXCEPTION    EX_BAD_DOM_PASSWD IS 'Mot de passe incorrect par rapport au login fourni';
COMMENT ON EXCEPTION    EX_BAD_GED_LOGIN IS 'Login inexistant ou Utilisateur GED non visible (lui-même ou son Propiétaire';
COMMENT ON EXCEPTION    EX_BAD_HOSTNAME IS 'Violation des règles de contraintes de TFBSERVER.HOST (respect RFC 873/1123) - Attention les contraintes sur les IP sont peu fiables (>255 possible)';
COMMENT ON EXCEPTION    EX_BAD_PARAM IS 'Paramètre passé à une procédure incorrect (traitement du paramètre en erreur)';
COMMENT ON EXCEPTION    EX_CONTLIB_EXISTS IS 'Association Contact/Bibliothèque déjà existante dans la table TCONTLIB (doublon PK)';
COMMENT ON EXCEPTION    EX_CONTOWN_EXISTS IS 'Association Type de contact/Propriétaire déjà existante dans la table TCONTOWER (doublon PK)';
COMMENT ON EXCEPTION    EX_CONTTYPE_INUSE IS 'Type de contact utilisé (violation FK Cascade';
COMMENT ON EXCEPTION    EX_DELCOLOVERFLOW IS 'Dépassement de capacité de colonne suite aux ajouts de marque de suppression (PS DEL_*)';
COMMENT ON EXCEPTION    EX_DOMPARAMSYSTEM IS 'Paramètre TDOMPARAM avec FLAG SYSTEM non modifiable/supprimable';
COMMENT ON EXCEPTION    EX_DOM_LOGIN_EXISTS IS 'Login déjà existant dans la table TOWNER (doublon UNIQUE)';
COMMENT ON EXCEPTION    EX_GEDGROUPLIB_EXISTS IS 'Association Groupe d''utilisateur GED/Bibliothèque déjà existante dans la table TGEDGROUPLIB';
COMMENT ON EXCEPTION    EX_GEDGROUPUSER_EXISTS IS 'Association Groupe/Utilisateur GED déjà existante dans la table TGEDGROUPUSER';
COMMENT ON EXCEPTION    EX_GEDGROUP_EXISTS IS 'Groupe d''Utilisateur GED déjà existant pour ce Propiétaire dans la table TGEDGROUP';
COMMENT ON EXCEPTION    EX_GEDGROUP_INUSE IS 'Groupe utilisé, donc ne peut pas être modifié (violation FK Cascade)';
COMMENT ON EXCEPTION    EX_GEDPARAMPROF_EXISTS IS 'Association Paramètre GED/Profil déjà existante dans la table TGEDPARAMPROF';
COMMENT ON EXCEPTION    EX_GEDPARAMUSER_EXISTS IS 'Association Paramètre GED/Profil déjà existante dans la table TGEDPARAMUSER';
COMMENT ON EXCEPTION    EX_GEDPARAM_EXISTS IS 'Le paramètre GED spécifié existe déjà pour la même section et le même propriétaire dans la table TGEDPARAM';
COMMENT ON EXCEPTION    EX_GEDPARAM_INUSE IS 'Paramètre GED utilisé par un Profil (violation FK)';
COMMENT ON EXCEPTION    EX_GEDPARAM_SECTION_KO IS 'La création d''un GEDPARAM nécessite l''utilisation d''une section spécifique (TDOMPARAM:DOMAIN/GEDPARAM_SECTION_OWNER ou TDOMPARAM:DOMAIN/GEDPARAM_SECTION_LIB  ou être autorisée par TDOMPARAM:DOMAIN/GEDPARAM_SECTIONS_OWNER_CREATE';
COMMENT ON EXCEPTION    EX_GEDUSERLIB_EXISTS IS 'Association Utilisateur GED/Bibliothèque déjà existante dans la table TGEDUSERLIB';
COMMENT ON EXCEPTION    EX_GED_LOGIN_EXISTS IS 'Login déjà existant dans la table TGEDUSER pour le même Propiétaire (doublon UNIQUE)';
COMMENT ON EXCEPTION    EX_LIBTITLE_EXISTS IS 'Titre de bibliothèque déjà existant dans la table TLIBRARY pour le même propréiétaire (doublon UNIQUE)';
COMMENT ON EXCEPTION    EX_NOCONTACT IS 'Contact non présent physiquement dans la table TCONTACT ou non visible/modifiable par rapport au STATE';
COMMENT ON EXCEPTION    EX_NOCONTLIB IS 'Association Contact/Bibliothèque inexistante dans la table TCONTLIB';
COMMENT ON EXCEPTION    EX_NOCONTOWN IS 'Association Type de contact/Propriétaire inexistante dans la table TCONTOWER';
COMMENT ON EXCEPTION    EX_NOCONTTYPE IS 'Type de contact non présent physiquement dans la table TCONTTYPE';
COMMENT ON EXCEPTION    EX_NODOMPARAM IS 'Paramètre TDOMPARAM inexistant';
COMMENT ON EXCEPTION    EX_NOFBSER IS 'Serveur non présent physiquement dans la table TFBSERVER ou non visible/modifiable par rapport au STATE';
COMMENT ON EXCEPTION    EX_NOGEDGROUP IS 'Groupe d''Utilisateur GED non présent physiquement dans la table GEDGROUP ou non visible/modifiable par rapport au STATE du Propriétaire';
COMMENT ON EXCEPTION    EX_NOGEDGROUPLIB IS 'Association Groupe d''utilisateur GED/Bibliothèque inexistante';
COMMENT ON EXCEPTION    EX_NOGEDGROUPUSER IS 'Association Groupe/Utilisateur GED inexistante dans la table TGEDGROUPUSER';
COMMENT ON EXCEPTION    EX_NOGEDPARAM IS 'Le paramètre GED spécifié n''existe pas dans la table TGEDPARAM';
COMMENT ON EXCEPTION    EX_NOGEDPARAMPROF IS 'Association Paramètre GED/Profil inexistante dans la table TGEDPARAMPROF';
COMMENT ON EXCEPTION    EX_NOGEDPARAMUSER IS 'Association Paramètre GED/Utilisateur inexistante dans la table TGEDPARAMUSER';
COMMENT ON EXCEPTION    EX_NOGEDUSER IS 'Utilisateur GED non présent physiquement dans la table TGEDUSER ou non visible/modifiable par rapport au STATE';
COMMENT ON EXCEPTION    EX_NOGEDUSERLIB IS 'Association Utilisateur GED/Bibliothèque inexistante dans la table TGEDUSERLIB';
COMMENT ON EXCEPTION    EX_NOLIB IS 'Bibliothèque non présente physiquement dans la table TLIBRARY ou non visible/modifiable par rapport au STATE';
COMMENT ON EXCEPTION    EX_NOMODIF IS 'Enregistrement non modifiable par rapport à la colonne STATE';
COMMENT ON EXCEPTION    EX_NONULL IS 'Un paramètre obligatoire n''a pas été soumis à une procédure (la procédure doit ajouter le nom du paramètre au message)';
COMMENT ON EXCEPTION    EX_NOOWNER IS 'Propriétaire non présent physiquement dans la table TOWNER ou non visible/modifiable par rapport au STATE';
COMMENT ON EXCEPTION    EX_NOPARAM IS 'Paramètre non présent physiquement dans la table TPARAMETERS';
COMMENT ON EXCEPTION    EX_NOPROFILE IS 'Profil non présent physiquement dans la table TPROFILE ou non visible/modifiable par rapport au STATE';
COMMENT ON EXCEPTION    EX_NOSTORAGE IS 'Le paramètre STORAGE spécifié n''existe pas dans la table TSTORAGE';
COMMENT ON EXCEPTION    EX_NOTABLEORCOL IS 'Table et/ou colonne inexistante (PS techniques à usage interne seulement)';
COMMENT ON EXCEPTION    EX_OWNER_INFOS_DUPLICATE IS 'Code externe ou sous-domaine déjà existant dans la table TOWNER (doublon UNIQUE)';
COMMENT ON EXCEPTION    EX_PROFILE_EXISTS IS 'Nom de Profil déjà existant pour le même propiétaire (doublon UNIQUE)';
COMMENT ON EXCEPTION    EX_PROFILE_INUSE IS 'Profil utilisé, donc ne peut pas être modifié (violation FK Cascade)';
COMMENT ON EXCEPTION    EX_STORAGE_EXISTS IS 'Le paramètre STORAGE spécifié existe déjà pour la même section et le même propriétaire dans la table TSTORAGE (violation de la règle d''unicité de la table)';
COMMENT ON GENERATOR    SEQ_CONTACT IS 'Générateur ID Contact';
COMMENT ON GENERATOR    SEQ_CONTTYPE IS 'Générateur ID Type de contact';
COMMENT ON GENERATOR    SEQ_FBSERVER IS 'Générateur ID Serveur Firebird';
COMMENT ON GENERATOR    SEQ_GEDGROUP IS 'Générateur ID Groupe d''utlisateur GED';
COMMENT ON GENERATOR    SEQ_GEDPARAM IS 'Générateur ID Paramètre GED';
COMMENT ON GENERATOR    SEQ_GEDUSER IS 'Générateur ID Utilisateur GED';
COMMENT ON GENERATOR    SEQ_LIBRARY IS 'Générateur ID Bibliothèque';
COMMENT ON GENERATOR    SEQ_LOGSYNC IS 'Générateur ID Journalisation synchronisation';
COMMENT ON GENERATOR    SEQ_OWNER IS 'Générateur ID Propriétaire';
COMMENT ON GENERATOR    SEQ_PROFILE IS 'Générateur ID Profil';
/* version 40 */
COMMIT WORK;
