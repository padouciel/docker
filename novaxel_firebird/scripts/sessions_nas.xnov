Program infotech;
// const

{$I func_nas.xnov}
{$I local_auth.xnov}


var
	ErrMsg:String;

  oNasDomClient:TNasDomClient;
  i,j:integer;
  HttpServers:THttpServers;
  NasSessions:TNasSessions; 

 
Begin
	oNasDomClient:=TNasDomClient.create;
// 	oNasDomClient.domainLogout;
 
	Try
		if not NASConnect(oNasDomClient, GetNASHost('')) then
		Begin
			ErrMsg:='"Le serveur NAS n''est pas joignable !"';
			exit;
		End;

		if not NASLogin(oNasDomClient, AdmNASLogin,AdmNASHashedPasswd, True) then 
		Begin
			ErrMsg:='Impossible de se connecter au serveur NAS !';
			exit;
		End;

//        Taskbackup:= TNasTask.create(oNasDomClient);
//        Taskbackup.Owner_Id:=1;
//        Taskbackup.Library_Id:=1;
//        Taskbackup.Task_name:='backup';
//        Taskbackup.task_state:=1;
//        
//        //Démarrage d'une tache
//        oNasDomClient.set_task_state(Taskbackup);           

       NasSessions:=TNasSessions.create(oNasDomClient);
       HttpServers:=THttpServers.create(oNasDomClient);
       HttpServers.load(false);
       For i:=0 to HttpServers.count-1 do
       begin
           output( HttpServers[i].server_name+'['+intTostr(HttpServers[i].Tcp_Port)+']'+'  '+HttpServers[i].Root_path);
           //les sessions par serveurs :
           NasSessions.load(HttpServers[i].Tcp_Port,0,0,0,true);
           For j:=0 to NasSessions.count-1 do
			Begin
				output(
					'Type de session : '+'  '+ NasSessions[j].Session_Type_str + '(' + intTostr(NasSessions[j].Session_Type) + ')'
					+ ' - Date de création : ' + DateTimeToNas(NasSessions[j].creation_Date)
					+ ' - Dernier Accès : ' + DateTimeToNas(NasSessions[j].Last_Access_Date)
					+ ' - Expirée : ' + BoolToStr(NasSessions[j].Is_Expired,1)
					+ ' - IP : ' + NasSessions[j].Remote_address
				);
			End;
       end;
       
      
       HttpServers.free;
       NasSessions.free;
       
//        NasTasks:=TNasTasks.create(oNasDomClient);
//        //function Load(ownerid, libraryid: integer; taskname:string; force: boolean): boolean;
//        NasTasks.load(0,0,'',true);
//        For i:=0 to NasTasks.count-1 do
//            output('Task='+NasTasks[i].Task_name);
//        NasTasks.free;

	Finally
		if ErrMsg<>'' then
		Begin
			OutputErr(ErrMsg);
			SetExitCode(1);
		End;
		Try
			FreeNASRes;
			//if OLibs<>Nil then OLibs.Free;

			if oNAsDomClient<>Nil then
			Begin
				oNasDomClient.domainLogout
				oNasDomClient.Close;
				oNAsDomClient.Free;
			End;
		Except
		End;

	End;


//        //Arrêt de la tache
//        Taskbackup.task_state:=2;
//        oNasDomClient.set_task_state(Taskbackup);           
//        
//        Taskbackup.free;

//   oNasDomClient.domainLogout;
//   oNasDomClient.Close;
//   oNasDomClient.free;
End.
