{
Script utilisé pour l'initialisation de la synchro d'une bibliothèque sur le serveur


TODO :
	- MAJ de tlibrary.size_mb_org lors de la demande de synchro => Done (15/06/2014)

}

{$DEFINE DEBUG}

Program init_sync;
// Functions/variables/constantes communes...
{$I func_sync.xnov}

var
	oNasDomClient:TNasDomClient;
	oNasDomAdmin:TNasDomClient;

	oLib:TLibrary;
	oFBServer:TFBServer;
	oOwner:TOwner;

	Login:string;
	Password:string;
	Libid:integer;
	slibID: string;
	libGUID:string;

	IniConfSec: string;

	IniConf, IniTemplate:TIniFile;
	IniSects,IniKeys:TStringList;

	IniTempVals:TStrings;
	IniTempVal:String;

	ValIni:THashedStringList;

	i,j,x:integer;

	LogFile: string;

	TempConfSecret:String;

	rsyncdReq:string;
	rSyncdPath:string;

	FileSyncReq:String;
	//SyncReq:String;
	SyncReqItems:TstringList;
	IdCur,IdPrec:TstringList;
	FileSyncResp:String;
	FileSyncIdent:String;

	SecretItems:TstringList;

	rSyncScript,rSyncScriptOpt:String;
	rSyncConfAltered:Boolean;

	DBBasePath:String;

	CALLER:String;
	disk:byte;

	VerScriptSync:Integer;
	LibSendSize:Int64;
	FreeDiskSize:Int64;
	TransfertSize:Int64;

	RestState:String;

	// Ajout protocole synchro 8
	FullTextSize:Int64;

	oGedPV:tGedParamValue;

Begin
	// Caller pour ce program (cf. logger)
	CALLER:='init_sync';

	// Appel hors rsync, on rejette
	if GetRsyncEnv('PID')='' then
	Begin
		outputErr('Ce script ne peut-être utilisé que dans un contexte d''appel par le daemon rsync !');
		SetExitCode(1);
		Exit;
	End;

	// On initialise d'abord sur un fichier de log générique avant de basculer sur un fichier de log spécifique
	//LogFile:=NAS_LOGSYNC_PATH + 'init.log';
	//logger('test', CALLER, LOG_INFO, LogFile);
	LogFile:=StrReplace(NAS_LOGSYNC_PATH,'#id#','init');


	logger('', CALLER, LOG_INFO, LogFile);
	logger('=======================================================================', CALLER,LOG_INFO,LogFile);

		logger('Sollicitation rsync avec la requête "' + GetRsyncEnv('REQUEST') + '"', CALLER ,LOG_DEBUG, LogFile);
		logger('Arguments rsync "'  + GetRsyncEnv('ARG0') + ' - ' + GetRsyncEnv('ARG1') + ' - ' + GetRsyncEnv('ARG3') + ' - ' + GetRsyncEnv('ARG4') + ' - ' + GetRsyncEnv('ARG5') + ' - ' + GetRsyncEnv('ARG6') + ' - ' + GetRsyncEnv('ARG7') + ' - ' + GetRsyncEnv('ARG8') + ' - ' + GetRsyncEnv('ARG9') + '"', CALLER, LOG_DEBUG, LogFile);
		logger('PID rsync "' + GetRsyncEnv('PID')+ '"', CALLER , LOG_DEBUG, LogFile);
		logger('MODULE NAME rsync "' + GetRsyncEnv('MODULE_NAME') + '"', CALLER, LOG_DEBUG, LogFile);
		logger('MODULE PATH rsync "' + GetRsyncEnv('MODULE_PATH') + '"', CALLER, LOG_DEBUG, LogFile);
	
	{
		Si la variable RSYNC_ARG0 n'est PAS positionnée, nous sommes en post-xfer
		Le pre-xfer du process en cours (RSYNC_PID) a du créer un fichier contenant le nom de la demande précédente
		Nous supprimons le fichier de réponse à la requête de synchro, qui a déjà été transféré au client
		(le fichier requête a déjà été déplacé dans le rép. de transfert par la procédure pre-xfer)
	}
	if GetRsyncEnv('ARG0') = '' then
	begin
		logger('Appel en post-xfer  : tentative de suppression d''un fichier de requête de synchro déjà renvoyé (ménage)', CALLER, LOG_DEBUG, LogFile);
		
		FileSyncReq:=IncludeTrailingPathDelimiter(GetTempDir) + GetRsyncEnv('MODULE_NAME') + '.' + GetRsyncEnv('PID');
		if FileExists(FileSyncReq) then
		begin
			logger('Suppression des Fichiers de flag "' + FileSyncReq + '" et "' + trim(LitFichier(FileSyncReq)) + '"', CALLER, LOG_INFO, LogFile);
			if not (Deletefile(trim(LitFichier(FileSyncReq)))) and (Deletefile(FileSyncReq)) then
			Begin
				// Non fatale...
				logger('Erreur lors de la suppression des fichiers Flag de réponse de synchro', CALLER, LOG_WARNING, LogFile);
			End;
		End;
		// Sortie sans erreur...
		SetExitCode(0);
		Exit;
	End;

	rsyncdReq:=GetRsyncEnv('REQUEST');

	// Si le fichier demandé ne correspond pas à une requête ou une réponse de synchro, on quitte sans autre action...
	if not ((ExecRegExpr('.*' + SYNC_FILE_RESP + '.*', rsyncdReq)) or (ExecRegExpr('.*' + SYNC_FILE_REQUEST + '.*', rsyncdReq))) then
	begin
		logger('Tentative de connexion erronée : aucune requête présente - sortie en erreur', CALLER, LOG_ERROR, LogFile);
		SetExitCode(1);
		exit;
	End;

	// Si le fichier demandé est une requête (dépôt), on ne fait rien
	if ExecRegExpr('.*' + SYNC_FILE_REQUEST + '.*', rsyncdReq) then
	begin
		SetExitCode(0);
		exit;
	End;
			
	Try
		// Si on est ici, c'est qu'on reçoit bien une demande de fichier de réponse de synchro...

		logger('Demande de nouvelle synchronisation avec la requête : ' + rsyncdReq  +'"', CALLER, LOG_INFO, LogFile);

		rSyncdPath:=Trim(GetRsyncEnv('MODULE_PATH'));

		// On extrait le nom du fichier de réponse de la variable d'environnement
		FileSyncResp:=ReplaceRegExpr('.*(' + SYNC_FILE_RESP + '\.[0-9]*).*', rsyncdReq, '${1}',true);
		FileSyncResp:=IncludeTrailingPathDelimiter(rSyncdPath) + FileSyncResp; 

		FileSyncReq:= IncludeTrailingPathDelimiter(rSyncdPath) + SYNC_FILE_REQUEST + ExtractFileExt(FileSyncResp);

		logger('Vérification de la présence du fichier de requête "' + FileSyncReq + '"', CALLER, LOG_DEBUG, LogFile);
		
		if not FileExists(FileSyncReq) then
		begin
			logger('601 : Le Fichier de requête de synchro "' + FileSyncReq + '" correspondand à "' + FileSyncResp + '" n''existe pas...', CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '601');
		end;

		// Lecture du contenu du fichier de requête
		logger('Ouverture et traitement du fichier de requête "' + FileSyncReq + '"', CALLER, LOG_INFO, LogFile);

		SyncReqItems:=TStringList.Create;
		SyncReqItems:=GetSyncReqItem(FileSyncReq);

		// Modif suite à ajout de version novasync + version novaxel dans le fichier .req...
		if SyncReqItems.count < 8 then
		Begin
			logger('1000 : Le Fichier de requête de synchro ne correspond pas au format attendu (Nombre d''éléments : ' + intTostr(SyncReqItems.count) + ')', CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '1000');
		End;

		logger('Vérification des informations présentes dans la demande de synchro "' + FileSyncReq +'" : ' + CRLF + SyncReqItems.Text,CALLER ,LOG_INFO, LogFile);

		slibID:=SyncReqItems[0];
		Login:=SyncReqItems[1];
		Password:=SyncReqItems[2];
		if SyncReqItems[3] <> nil then libGUID:=SyncReqItems[3];

		IdCur:=TStringList.Create();
		IdCur.add(SyncReqItems[4]); // Chaine d'information identification synchro
		IdCur.add(SyncReqItems[5]); // Signature Client synchro
		// On ne récupère que la version majeure (ie. premier nombre trouvé)
		VerScriptSync:=StrToInt(ReplaceRegExpr('([0-9]+).*' ,trim(SyncReqItems[6]),'${1}',true));
		LibSendSize:=StrToInt64(SyncReqItems[7]) * (1024 * 1024); // Taille envoyé en Mo...

		logger('Vérification de l''Id library "' + slibID + '"', CALLER, LOG_DEBUG, LogFile);
		
		if not ExecRegExpr('[0-9]+', slibID) then
		begin
			logger('602 : Code library incorrect : ' + slibID, CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '602');
		End;

		libID:=StrToInt64(slibID);

		logger('Vérification correspondance Id Lib "' + slibID + '" vs extension du fichier réponse "' + FileSyncResp + '"', CALLER, LOG_DEBUG, LogFile);
		
		if slibID <> Copy(ExtractFileExt(FileSyncResp),2,Length(ExtractFileExt(FileSyncResp))-1) then
		begin
			logger('603 : L''extension des fichiers requêtes/réponses ne correspond pas à l''identifiant de la bibliothèque donné dans "' + FileSyncReq + '"', CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '603');
		end;

		 
		logger('Vérification Login "' + Login + '"', CALLER, LOG_DEBUG, LogFile);
		if Login = '' then
		begin
			logger('604 : Login vide', CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '604');
		End;

		// SHA 256 ==> 64 car alpha
		logger('Vérification password', CALLER, LOG_DEBUG, LogFile);
		if not ExecRegExpr('(?i)[0-9A-Z]{64}', Password) then
		begin
			logger('605 : Mot de passe n''est pas une empreinte SHA : "' + Password + '"', CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '605');
		End;
		
		// Pad avec des "0" en entête
		slibID:=format('%.10u',[libID]);

		logger('La suite de la journalisation de cette synchronisation se trouve dans /var/log/novasync_' + slibID + '.log' , CALLER, LOG_INFO, LogFile);
		//LogFile:=NAS_LOGSYNC_PATH + slibID + '.log';
		LogFile:=StrReplace(NAS_LOGSYNC_PATH,'#id#',slibID)

		logger('', CALLER, LOG_INFO, LogFile);
		logger('==================================================================================================================================================', CALLER,LOG_INFO,LogFile);
		logger('                                         DEMANDE DE NOUVELLE SYNCHRONISATION', CALLER,LOG_INFO,LogFile);
		logger('==================================================================================================================================================', CALLER,LOG_INFO,LogFile);
		logger('LibId = ' + Int64ToStr(LibId) + ' - Login : ' + Login + ' - GUID : ' + libGUID, CALLER, LOG_INFO, LogFile);
		if SyncReqItems.count > 8 then
			logger('Version novasync = ' + iif(SyncReqItems[8] <> nil, SyncReqItems[8], 'non fournie') + ' - version client cloud : ' + iif(SyncReqItems[9] <> nil, SyncReqItems[9], 'non fournie'), CALLER, LOG_INFO, LogFile);
		// Protocole 8 : ajour d'une ligne de taille pour le support FULLText
		if SyncReqItems.count > 10 then
			FullTextSize:=StrToInt64(SyncReqItems[10]) * (1024 * 1024);

		logger('Vérification de la version du protocole reçu : ' + IntToStr(VerScriptSync), CALLER, LOG_INFO, LogFile);
		rSyncScript:=GetSyncScript(VerScriptSync);
		if rSyncScript='' then
		Begin
			logger('102 : Aucun script n''est associé à la version protocole client ' +  IntToStr(VerScriptSync) + ' (version cliente non reconnue)', CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '102');
		End;

		logger('Vérification de l''accessibilité pour le owner "' + Login +'" et la bib "' +Int64ToStr(LibId) + '"', CALLER, LOG_INFO, LogFile);

		oNasDomClient:=TNasDomClient.Create();
		oNasDomClient:=SyncNASConnect(GetNASHost(''), Login, password,logfile);

		oLib:=NASGetLib(oNasDomClient,libId);

		if oLib = nil then
		begin
			logger('609 : Erreur Accès Library : ' + oNasDomClient.Errcode + ':' + oNasDomClient.Errmsg, CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '609');
		end;
		logger('Connexion sur bib OK', CALLER, LOG_DEBUG, LogFile);

		// Ici tout est Ok en terme d'accès, on se connecte en tant qu'admin pour la suite des opération...
		oNasDomClient.Close();
		oNasDomClient.Free();


		oNasDomAdmin:=TNasDomClient.Create();
		oNasDomAdmin:=SyncNASConnect(GetNASHost(''), AdmNASLogin, AdmNASHashedPasswd,logfile);

		logger('Nom du domaine : ' + oNasDomAdmin.DomainName, CALLER, LOG_DEBUG, LogFile);
		logger('Version NAS : ' + oNasDomAdmin.ServerVersion, CALLER, LOG_DEBUG, LogFile);
		logger('Type : '+ oNasDomAdmin.ServerType, CALLER, LOG_DEBUG, LogFile);
		logger('URI Ged : ' + oNasDomAdmin.UriGed, CALLER, LOG_DEBUG, LogFile);
		if oNasDomAdmin.Encrypted then 
			logger('Cryptage activé : OUI', CALLER, LOG_DEBUG, LogFile)
		else
			logger('Cryptage activé : NON', CALLER, LOG_DEBUG, LogFile);

		logger('Domaine : ' + oNasDomAdmin.DomainName + ' - version : ' + oNasDomAdmin.DomainVersion, CALLER, LOG_DEBUG, LogFile);

		oNasDomAdmin.Owners.load(False);
		oNasDomAdmin.Libraries.load(False);
		
		logger('Récup. des informations Owner...' + oNasDomAdmin.DomainVersion, CALLER, LOG_DEBUG, LogFile);
		oOwner:=oNasDomAdmin.Owners.Find(Login); // Devrait toujours être ok (connexion Owner Ok au-dessus)
		if oOwner = nil then
		begin
			logger('1000 : Erreur Récupération infos owners "' + Login + '" : ' + oNasDomAdmin.Errcode + ':' + oNasDomAdmin.Errmsg, CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '1000');
		end;
		logger('Récupération info Owner OK', CALLER, LOG_DEBUG, LogFile);

		// Tant que l'on sur le OWNER, on vérifie la licence FULLTEXT, si applicable...
		if FullTextSize>0 then
		Begin
			logger('Volume FULLText demandé/Présent (Taille volume : ' + Int64ToStr(FullTextSize) + ') on vérifie la licence', CALLER, LOG_INFO, LogFile);

			oOwner.GedParamValues.Load(False);
			oGedPV:=oOwner.GedParamValues.Find('LICENCE','FULLTEXT');

			if oGedPV=Nil then i:=0 else i:=StrToInt64(trim(oGedPV.value));

			if i<>1 then
			begin
				logger('630 : Licence FULLTEXT non activée ou non présente', CALLER, LOG_ERROR, LogFile);
				RaiseException(erCustomError, '630');
			end;
		End
		Else
			logger('Volume FULLText non demandé/Présent', CALLER, LOG_DEBUG, LogFile);


		logger('Récup des informations lib...' + Int64ToStr(LibID), CALLER, LOG_DEBUG, LogFile);
		oLib:=NASGetLib(oNasDomAdmin,libId); // Devrait toujours être ok (connexion Lib Ok au-dessus)
		if oLib = nil then
		begin
			logger('1000 : Erreur Récupération Infos Library "' + Int64ToStr(LibID) + '" : ' + oNasDomAdmin.Errcode + ':' + oNasDomAdmin.Errmsg, CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '1000');
		end;

		logger('Vérif Lib DBPath...' + Int64ToStr(LibID), CALLER, LOG_DEBUG, LogFile);
		if trim(oLib.dbpath) = '' then
		begin
			logger('1000 : DBPath vide', CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '1000');
		end;
		logger('dDBPath : ' + oLib.dbpath, CALLER, LOG_DEBUG, LogFile);

		logger('Récupération info bib OK', CALLER, LOG_DEBUG, LogFile);

		logger('Récupération d''information sur serveur Firebird "' + int64tostr(oLib.FBServer_id) + '"', CALLER, LOG_DEBUG, LogFile);

		// Informations sur le serveur (nosync)
		oFBServer:=NASGetFBServer(oNasDomAdmin, oLib.FBServer_id);
		
		if oFBServer = nil then
		begin
			logger('1000 : Erreur Information serveur Firebird de la bibliothèque ' + intTostr(libID) + ': ' + oNasDomAdmin.Errcode + ':' + oNasDomAdmin.Errmsg, CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '1000');
		end;
		logger('Récupération d''information sur serveur Firebird OK', CALLER, LOG_DEBUG, LogFile);

		logger('Vérification des états de synchronisation Lib, NAS et serveur', CALLER, LOG_INFO, LogFile);
		if oLib.nosync or oFBServer.noSync or oNasDomAdmin.loggedOwner.nosync then
		Begin
			logger('610 : La synchronisation est actuellement désactivée sur le serveur, la library ou le owner...', CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '610');
		End;
		
		// Récupération et test GUID LIB
		logger('Vérification du GUID "' + libGUID + '" pour la bib "' + int64tostr(libId) + '"', CALLER, LOG_DEBUG, LogFile);
		
		if libGUID <> '' then // GUID passé à la proc
		Begin
			// Comparaison avec GUID TLIBRARY (si présent)
			if oLib.guid <> '' then 
			begin
				if libGUID<>oLib.guid then
				begin
					logger('611 : Les GUID client et serveur sont différents', CALLER, LOG_ERROR, LogFile);
					RaiseException(erCustomError, '611');
				End;
			End;
		End;
		logger('Vérification du GUID OK', CALLER, LOG_DEBUG, LogFile);

		// Vérification de mode Restore
		logger('Vérification du mode RESTORE pour la bib "' + int64tostr(libId) + '"', CALLER, LOG_DEBUG, LogFile);
		if not NASGetDomParamValues(TNasDomClient(oLib.NasDomClient), DOM_REST_STATE_S, DOM_REST_STATE_N, RestState, Nil) then
		Begin
			logger('Échec de récupération de l''état RESTORE (' + DOM_REST_STATE_S + '/' + DOM_REST_STATE_N + ') - On considère que ce n''est pas mis en place et on continue la synchro...',CALLER , LOG_WARNING, LogFile);
		End
		Else
		Begin
			if GetStateCompare(oLib.state,'~',StrToInt64(RestState)) then
				RaiseException(erCustomError, '613');
		End;

		// vérification access_mode lib (on ne synchronise pas les lib en full saas)
		logger('Vérification du mode d''accès de la lib...', CALLER, LOG_INFO, LogFile);
		if oLib.access_mode=2 then
		Begin
			logger('614 : La bibliothèque est en mode d''accès Full NAS...', CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '614');
		End;

		// REcherche d'un flag de synchro déjà engagée
		logger('Vérification de conflit de synchro pour "' + Olib.dbpath + '"',CALLER ,LOG_INFO, LogFile);
		FileSyncIdent:=IncludeTrailingPathDelimiter(oLib.dbpath) + FLAG_SYNC;
		if fileExists(FileSyncIdent) then
		begin
			logger('un fichier "' + FileSyncIdent + '" existe déjà  : Gestion de conflit de synchronisation',CALLER ,LOG_INFO, LogFile);
			IdPrec:=TStringList.Create();
			Try
				IdPrec.LoadFromFile(FileSyncIdent);
			Except
				logger('1000 : Erreur lors du chargement des informations d''identification du fichier "' +  FileSyncIdent + '" : ' + ExceptionParam,CALLER ,LOG_DEBUG, LogFile);
				RaiseException(erCustomError, '1000');
			End;
			// Véritable conflit ???
			logger('Comparaison des 2 identifications ',CALLER ,LOG_DEBUG, LogFile);

			if (IdPrec[0] <> IdCur[0]) or (IdPrec[1] <> IdCur[1]) then
			begin
				logger('Les 2 identifications ne correspondent pas :',CALLER ,LOG_DEBUG, LogFile);
				logger('   Identification actuelle : ' + CRLF + IdCur.Text,CALLER ,LOG_DEBUG, LogFile);
				logger('   Ancienne identification :' + CRLF + IdPrec.Text,CALLER ,LOG_DEBUG, LogFile);
				logger('Création du fichier de conflit pour traitement par le client',CALLER ,LOG_DEBUG, LogFile);
				// On dépose un fichier de conflit afin que si le client force la synchro malgrès tout, on puisse l'en empêcher...
				if not EcritFichier('', IncludeTrailingPathDelimiter(oLib.dbpath) + FLAG_CONFLIT) then
					logger('1000 : Erreur lors de la création du fichier flag de conflit "' + IncludeTrailingPathDelimiter(oLib.dbpath) + FLAG_CONFLIT + '"', CALLER, LOG_ERROR, LogFile);
				RaiseException(erCustomError, '100');
			End
			else
				logger('Les 2 identifications correspondent, on peut continuer...',CALLER ,LOG_INFO, LogFile);
		End;

		// Gestion de l'espace disque... Attention, on travaille tout en octet...
		{ 
			TODO : Attention en production importante :
			Il se peut que des synchro simultanées soient demandées
			Il faudrait donc prendre en compte la taille "réservée" (mais pas encore utilisée) par les synchros précédentes en cours dans
			le calcul de l'espace nécessaire...
		}

		if not DirectoryExists(oLib.dbpath) then
		Begin
			logger('Le répertoire "' +  oLib.dbpath + '" n''existe pas (première synchro initiale) ; tentative de création...',CALLER ,LOG_DEBUG, LogFile);
			if not ForceDirectories(oLib.dbpath) then
			Begin
				logger('1000 : Création répertoire de base de la lib : ' + ExceptionParam, CALLER, LOG_ERROR, LogFile);
				RaiseException(erCustomError, '1000');
			End;
		End;

		disk:=AddDisk(oLib.dbpath);
		FreeDiskSize:=DiskFree(disk);

		// MAJ protocole 8 : on prend la taille de FULLTEXT  en compte
		LibSendSize:=LibSendSize + FullTextSize;

		// MAJ protocole 9 : on enregistre (inconditionellement) la taille fournie dans le fichier requête
		logger('Mise à jour de la taille totale coté client (size_mb_org) : ' + Int64ToStr(LibSendSize),CALLER ,LOG_INFO, LogFile);
		try
			oLib.size_mb_org:=LibSendSize / (1024 * 1024);
			// doamin V39, on ne met PAS à jour la MODIF_DATE de la lib dans ce contexte...
			oLib.NotUpdateModifDate:=true;
			oLib.update;
		Except
			// On passe sans interrompre, juste du log
			logger('1000 : Erreur lors de la mise à jour de la taille coté client : ' + ExceptionParam, CALLER, LOG_ERROR, LogFile);
		End;

		logger('Vérification  de l''espace disque nécessaire',CALLER ,LOG_INFO, LogFile);
		logger('Volume demandé par les fichiers à synchroniser (Mo) : ' + Int64ToStr(LibSendSize),CALLER ,LOG_DEBUG, LogFile);
		logger('Volume disponible sur le disque (Mo) : ' + Int64ToStr(FreeDiskSize),CALLER ,LOG_DEBUG, LogFile);

		// On regarde s'il y a un existant (ie nouvelle synchro ou synchro régluière)
		if FileExists(IncludeTrailingPathDelimiter(oLib.dbpath) + VOL_PRINC) then 
		Begin
			// Récupération de la taille de l'existant...
			TransfertSize:=GetVolNovaDirSize(oLib.dbpath);

			logger('Volume actuellement occupé sur le le disque (Mo) : ' + IntToStr(TransfertSize),CALLER ,LOG_DEBUG, LogFile);

			// TODO : revérifier ça car ça peut-être incorrect :
			// libsendsize est le volume occupé par la lib coté client et prut-être complètement différent du volume occupé coté serveur (procédure plan de nuit, etc...)
			TransfertSize:=LibSendSize - TransfertSize
				+ GetFileSize(IncludeTrailingPathDelimiter(oLib.dbpath) + VOL_PRINC)
				+ GetFileSize(GetLastVolume(oLib.dbpath));

			logger('Synchro régulière ; besoin en espace disque (Mo) : ' + Int64ToStr(TransfertSize) ,CALLER ,LOG_DEBUG, LogFile);
		End
		else
		Begin
			// Sinon, c'est le volume envoyé * 2
			TransfertSize:=LibSendSize * 2;
			logger('Synchro initiale ; besoin en espace disque (Mo) : ' + Int64ToStr(TransfertSize),CALLER ,LOG_DEBUG, LogFile);
		End;

		if FreeDiskSize < TransfertSize then
		Begin
			logger('104 : La taille disponible sur disque (' + int64ToStr(FreeDiskSize) + ') est inférieure à la taille nécessaire pour le transfert (' + int64ToStr(TransfertSize) +')', CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '104');
		End;
		
		logger('Vérification de l''arborescence "' + Olib.dbpath + '"',CALLER ,LOG_INFO, LogFile);

		// On cherche le répertoire de base de la lib (ie oFBServer.LibRootPath + premier répertoire oLib.dbPath)
		// TODO : Voir ce qui se passe si le FBSERVER.librootpath a éte modifié entre 2 synchros...
		if oFBServer.LibRootPath='' then
			DBBasePath:=oLib.dbpath
		else
		Begin
			DBBasePath:=ExtractRelativePath(IncludeTrailingPathDelimiter(oFBServer.LibRootPath),oLib.dbpath);
			DBBasePath:=IncludeTrailingPathDelimiter(oFBServer.LibRootPath) + GetFirstDir(DBBasePath);
		End;
		logger('BaseName pour les droits/owner ' + DBBasePath, CALLER, LOG_DEBUG, LogFile);

		// Création inconditionelle arbo bases + droits + owner (si déjà existant, sans effet)

		// TODO : non portable sous Windows...

		logger('Création du path de la bib (inconditionnel) : "' + Trim(oLib.dbpath) + '"', CALLER, LOG_DEBUG, LogFile);

		Try 
			// On (re)crée d'abord le répertoire de la base de donnée
			if not ForceDirectories(Trim(oLib.dbpath)) then RaiseException(erCustomError, '1000');

			// On crée le répertoire temporaire
			logger('création du répertoire temporaire "' + IncludeTrailingPathDelimiter(Trim(oLib.dbpath)) + DIRDB_TEMPDIR + '"', CALLER, LOG_DEBUG, LogFile);
			
			if Not ForceDirectories(IncludeTrailingPathDelimiter(Trim(oLib.dbpath)) + DIRDB_TEMPDIR) then RaiseException(erCustomError, '1000');

			logger('Mise en place des droits "' + DIRDB_PERMS + '" sur "' + DBBasePath + '"', CALLER, LOG_DEBUG, LogFile);
			
			// On lui affecte les droits souhaités (PS la suite de la synchro devra affectre les bon droits aux autres fichiers)
			if not SysRun('/bin/chmod','-R ' + DIRDB_PERMS + ' ' + DBBasePath) then RaiseException(erCustomError, '1000');
			
			// On affecte les propriétaires à l'arboresence
			logger('Changement de propriétaire "' + DIRDB_USER + ':' + DIRDB_GROUP  + '" sur l''arborescence "' + DBBasePath + '"', CALLER, LOG_DEBUG, LogFile);
			
			If Not SysRun('/bin/chown','-R ' + DIRDB_USER + ':' + DIRDB_GROUP + ' ' + DBBasePath) then RaiseException(erCustomError, '1000');
			
		Except
			logger('1000 : Création arboresence de la base : ' + ExceptionParam, CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '1000');
		End;

		logger('Mise à jour des fichiers de configuration rsync', CALLER, LOG_INFO, LogFile);
		// Initialisation des variables nécessaires à la construction du fichier rsyncd.conf
		ValIni:=THashedStringList.Create();
		ValIni.Add('lib_id=' + slibID);
		ValIni.Add('lib_title=' + oLib.title);
		ValIni.Add('lib_path=' + oLib.dbpath);
		ValIni.Add('desttemp=' + DIRDB_TEMPDIR);
		ValIni.Add('own_login=' + Login);

		if not NetRsyncParam(sLibId,Login, LogFile) then
			// On ne génère pas d'erreur...
			logger('Les sections "' + sLibId + '" n''existaient pas dans la configuration rsync...' + ExceptionParam , CALLER, LOG_DEBUG, LogFile);

 		IniSects:=TstringList.create();IniKeys:=TstringList.create();
 
		Try
			IniTemplate:=TIniFile.Create(IncludeTrailingPathDelimiter(ExtractFilePath(FichierScript())) + RSYNCD_TEMPLATE_NAME);
			IniConf:=LockIni(logfile);
			if IniConf=Nil then
			Begin
				if logfile <>'' then logger('Impossible d''obtenir un accès en écriture à ' + RSYNCD_CONF_NAME, CALLER, LOG_DEBUG, LogFile);
				RaiseException(erCustomError, '1000');
			End;
		Except
			logger('1000 : Chargement des fichiers pour traitement MAJ rsyncd.conf : ' + ExceptionParam, CALLER, LOG_DEBUG, LogFile);
			RaiseException(erCustomError, '1000');
		End;
		logger('Mise à jour dynamique de ' + IniConf.FileName, CALLER, LOG_DEBUG, LogFile);
		logger('Fichier template : ' + IniTemplate.FileName + ' - Fichier rsyncd : ' + IniConf.FileName, CALLER, LOG_DEBUG, LogFile);


		// Très important pour ne pas modifier les fichiers sur disque...
		IniTemplate.CacheUpdates:=true;
		IniConf.CacheUpdates:=True;

		IniTemplate.ReadSections(IniSects);

		IniTempVals:=TstringList.create();

		Try

			for i:=0 to IniSects.count-1 do
			begin

				// MAJ titre section avec LibId
				IniConfSec:=ReplaceRegExpr('(.*)' + RSYNCD_TEMLPLATE_DELIM + '(.*)' + RSYNCD_TEMLPLATE_DELIM +'(.*)', IniSects[i],'${1}' + slibID + '${3}',true);

				logger('Création de la section "' +  IniConfSec + '"', CALLER, LOG_DEBUG, LogFile);
				
				IniTemplate.ReadSection(IniSects[i],IniKeys);

				// Pour chaque clé, on regarde s'il y a un remplacement à faire....
				for j:=0 to IniKeys.count-1 do
				begin
					IniTempVals.Clear();
					IniTempVal:='';
					SplitRegExpr(RSYNCD_TEMLPLATE_DELIM, IniTemplate.ReadString(IniSects[i],IniKeys[j],''), IniTempVals);
					// Il se peut qu'il y ait plusieurs remplacement à faire sur la valeur d'une seule clé....
					for x:=0 to IniTempVals.count-1 do
					begin
						IniTempVal:=IniTempVal 
							+ iif(IniTempVals[x]<>'',
								iif(ValIni.IndexOfName(IniTempVals[x])=-1,
									IniTempVals[x],
									ValIni.Values[IniTempVals[x]])
								,'');
					end;
					// Vérification de l'accessibilité des scripts (sinon on ne pourra rien faire plus tard)
					if (IniKeys[j] = 'pre-xfer exec') or (IniKeys[j] = 'post-xfer exec') then
					Begin
						// Le script correspondant à la version du client (la vérification de version a été effectuée plus haut)
						rSyncScript:=GetSyncScript(VerScriptSync);

						// Les options (éventuelles) du script
						rSyncScriptOpt:=ReplaceRegExpr('^(.*)(\s+)(.*)(\s+)(.*)$' ,IniTempVal,'${5}' ,true);

						logger('Vérification de la présence du script : "' + rSyncScript + '"', CALLER, LOG_DEBUG, LogFile);
						if not FileExists(rSyncScript) then
						Begin
							logger('1000 : Le script  "' + rSyncScript + '" :  n''existe pas', CALLER, LOG_ERROR, LogFile);
							RaiseException(erCustomError, '1000');
						End;
						// Le moteur de script 
						IniTempVal:=ExpandFileName(paramstr(0)) + ' ' + rSyncScript + ' ' + rSyncScriptOpt;
						
					End;

					IniConf.WriteString(IniConfSec,IniKeys[j],IniTempVal);
					logger('    Création de la clé "' + IniKeys[j] + '" avec la valeur "' + IniTempVal + '"', CALLER, LOG_DEBUG, LogFile);
					
				end;
			end;

			logger('Validation des modifications dans le fichier "' + RSYNCD_CONF_NAME + '"', CALLER, LOG_DEBUG, LogFile);
			
			IniTemplate.CancelFile(); // Annule les modifications apportées accidentellement sur IniTemplate
			IniConf.UpdateFile(); // Valide les modifications apportées à IniConf

		Except
			logger('1000 : Erreur lors de la mise à jour du fichier "' + IniConf.FileName + '" : ' + ExceptionParam, CALLER, LOG_ERROR, LogFile);
			// On tente d'annuler toutes les MAJ apportées sur les fichiers INI
			IniTemplate.CancelFile();
			IniConf.CancelFile();
			RaiseLastException;
		Finally
			UnLockIni(logfile);

		End;

		// Test de conformité après MAJ
		If not CheckRsyncdOk(LogFile) then
		Begin
			logger('1000 : le fichier "' + RSYNCD_CONF_NAME + '" n''est plus conforme après la MAJ des sections', CALLER, LOG_DEBUG, LogFile);
			RaiseException(erCustomError, '1000');
		End;

		rSyncConfAltered:=True;

		// secrets
		logger('Traitement du fichier ' + RSYNCD_CONF_SECRET, CALLER, LOG_INFO, LogFile);
		TempConfSecret:=IncludeTrailingPathDelimiter(GetCurrentDir()) + ExtractFileName(RSYNCD_CONF_SECRET) + '.bak';
		SecretItems:=TstringList.Create();

		logger('Copie du fichier "' + RSYNCD_CONF_SECRET + '" vers "' + TempConfSecret +'"', CALLER, LOG_DEBUG, LogFile);
		if not CopyFile(RSYNCD_CONF_SECRET, TempConfSecret) then
		Begin
			logger('1000 : Erreur lors de la copie/lecture du fichier "' + RSYNCD_CONF_SECRET + '" : ' + ExceptionParam, CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '1000');
		End;

		Try
			SecretItems.NameValueSeparator:=':';
			SecretItems.loadFromFile(RSYNCD_CONF_SECRET);

			// Ajout du owner
			logger('Ajout de "' + login +  ':passwordSHA" dans "' + RSYNCD_CONF_SECRET + '"', CALLER, LOG_DEBUG, LogFile);
			
			SecretItems.Add(login + ':' + Password);
			SecretItems.SaveToFile(RSYNCD_CONF_SECRET);

		Except
			logger('1000 : Erreur lors de la mise à jour du fichier "' + RSYNCD_CONF_SECRET + '" : ' + ExceptionParam, CALLER, LOG_ERROR, LogFile);
			// On tente de récupérer la version sauvegardée
			CopyFile(TempConfSecret, RSYNCD_CONF_SECRET);
			RaiseException(erCustomError, '1000');

		Finally
			logger('Suppression de "' + TempConfSecret +'"', CALLER, LOG_DEBUG, LogFile);
		
			Deletefile(TempConfSecret);
		End;

		// On déplace le fichier de demande de synchronisation dans le répertoire cible de synchronisation (destemp)
		// On en aura besoin plus tard pour récupérer les informations nécessaires (login, etc.)
		logger('déplacement du fichier "' + FileSyncReq + '" vers "' + IncludeTrailingPathDelimiter(IniConf.ReadString(slibID, 'path', '')) + ExtractFileName(FileSyncReq) + '"', CALLER, LOG_DEBUG, LogFile);
		
		// rename  plante sur cloudnovaxel.fr ??? ==> On copie puis efface...
		if not CopyFile(FileSyncReq,IncludeTrailingPathDelimiter(IniConf.ReadString(slibID, 'path', '')) + ExtractFileName(FileSyncReq)) then
		Begin
			logger('1000 : Erreur lors du déplacement du fichier "' + FileSyncReq + '" vers "' + IncludeTrailingPathDelimiter(IniConf.ReadString(slibID, 'path', '')) + ExtractFileName(FileSyncReq) + '" : ' + ExceptionParam, CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '1000');
		End;
{
		Else
			if not Deletefile(FileSyncReq) then
				logger('Erreur suppression de  : "' + FileSyncReq + '"', CALLER, LOG_WARNING, LogFile);
}
		// On enregistre le nom du fichier de réponse (dans un fichier unique basé sur PID rsync en cours) pour pouvoir le supprimer dès que le transfert de celui-ci aura abouti...
		logger('Enregistrement du nom de fichier réponse "' + FileSyncResp +
			'" dans le fichier "' + IncludeTrailingPathDelimiter(GetTempDir) + GetRsyncEnv('MODULE_NAME') + '.' + GetRsyncEnv('PID') +
			'" pour suppression après transfert', CALLER, LOG_DEBUG, LogFile);
		
		if not EcritFichier(FileSyncResp,IncludeTrailingPathDelimiter(GetTempDir) + GetRsyncEnv('MODULE_NAME') + '.' + GetRsyncEnv('PID')) then
		Begin
			logger('1000 : Erreur lors de l''enregistrement du nom de fichier réponse "' + FileSyncResp +
				'" dans le fichier "' + IncludeTrailingPathDelimiter(GetTempDir) + GetRsyncEnv('MODULE_NAME') + '.' + GetRsyncEnv('PID') +
				'" : ' +  + ExceptionParam, CALLER, LOG_WARNING, LogFile);
			// Nous considérerons uqe ce n'est pas une erreur fatale (ça gènera le ménage mais pas la synchro par elle-même)
			//EcritFichier('1000' + CRLF + GetErrSyncCode(1000), FileSyncResp);
		End;
			
		// Nettoyage des fichiers flag
		NetFlags(oLib.dbpath, LogFile);

		// On positionne un fichier flag de synchro avec le contenu du fichier FLAG_IDENT déjà présent
		logger('Création du flag de synchronisation "' + FLAG_SYNC +'"',CALLER ,LOG_DEBUG, LogFile);
		Try
			IdCur.SaveToFile(IncludeTrailingPathDelimiter(oLib.dbpath) + FLAG_SYNC);
		Except
			logger('1000 : Erreur lors de l''écriture des informations dans les fichiers de flag en fin de traitement "' + CALLER + '" : ' +  ExceptionParam, CALLER, LOG_ERROR, LogFile);
			RaiseException(erCustomError, '1000');
		End;

		// On place la lib en mode synchro
		logger('Mise en place du flag de synchro sur la bibliothèque',CALLER ,LOG_DEBUG, LogFile);
		if not SetNasTaskSync(oLib, 1) then
			logger('1000 : Erreur lors de la mise en place du flag interne de début sur la tâche', CALLER, LOG_WARNING, LogFile);

		// Enfin, on renvoie les informations nécessaires...
		logger('Fin d''init_sync... Renvoie du fichier "' + FileSyncResp + '"', CALLER, LOG_INFO, LogFile);
		if Not EcritFichier('0' + CRLF + 'Environnement mis en place, la synchronisation de cette bibliothèque peut commencer' + CRLF, FileSyncResp) then
			logger('1000 : Erreur lors de l''écriture du fichier "' + FileSyncResp + '"', CALLER, LOG_ERROR, LogFile);

	Except
		// Gestionnaire d'erreur global : Si une exception est générée par nous même, on traite, sinon on renvoie et on sort...
		if ExceptionType = erCustomError then
		Begin
			logger('Erreur traitée (ie. message(s) plus haut), on renvoie dans le fichier de réponse : ' + ExceptionParam, CALLER, LOG_INFO, LogFile);
			if ExceptionParam = '100' then // Traitement spécifique conflit de version
			begin
				if not EcritFichier('1' + CRLF + IdPrec[0] + CRLF + '"' + FormatDateTime('yyyy-mm-dd hh:nn:ss',GetFileDate(FileSyncIdent)) + '"', FileSyncResp) then
					logger('1000 : Erreur lors de l''écriture du fichier "' + FileSyncResp + '"', CALLER, LOG_ERROR, LogFile);
			End
			Else
			Begin
				if not EcritFichier(ExceptionParam + CRLF + GetErrSyncCode(ExceptionParam), FileSyncResp) then
					logger('1000 : Erreur lors de l''écriture du fichier "' + FileSyncResp + '"', CALLER, LOG_ERROR, LogFile);
			End;
			// On sort sans erreur rsync
			SetExitCode(0);
		End
		Else
		Begin
			logger('1000 : Erreur non traitée : ' + ExceptionParam, CALLER, LOG_ERROR, LogFile);
			EcritFichier('1000' + CRLF + GetErrSyncCode('1000'), FileSyncResp);
			//On sort avec erreur rsync
			SetExitCode(1000);
		End;

		// Le path des DB n'est pas forcément connu ici (pas encore de MAJ Ini effectuée par exemple)
		if not LogSync(
			oNasDomAdmin,
			libId,
			iif(oLib<>nil,oLib.dbpath,GetSyncParam(sLibId + RSYNCD_MOD_INFO, 'path')), // Si on n'a déjà pu se cconnecter à la lib, on prend le path en compte, sinon on prend le path paramétré en rsyncd.conf (peut-être vide si non encore initialisé)
			false,
			GetErrSyncCode(ExceptionParam),
			LogFile
		) then
			logger('1000 : Erreur lors de l''ajout en log de synchro...', CALLER, LOG_ERROR, LogFile);


		if not sendmailSync(
			oNasDomAdmin,
			libId,
			False,
			ExceptionParam='99999',
			GetErrSyncCode(ExceptionParam),
			LogFile
		) then
			logger('1000 : Erreur lors de l''envoi des emails...', CALLER, LOG_ERROR, LogFile);

		// On essaie d'annuler les modification en conf...
		if rSyncConfAltered then NetRsyncParam(sLibID,login,logfile);
		

	Finally
		Try
			// On libère les ressources
			if IniTempVals <> nil then IniTempVals.free;
			if ValIni <> nil then ValIni.Free;
			if IniSects<>nil then IniSects.free;
			if IniKeys<>nil then IniKeys.free;
			if IniTemplate<>nil then IniTemplate.free;
			if IniConf<>nil then IniConf.free;
			if SecretItems<>nil then SecretItems.free;
			if SyncReqItems<> Nil then SyncReqItems.Free;
			if IdCur <> Nil then IdCur.Free();
			if IdPrec <> Nil then IdPrec.Free();

			//if oLib <> nil then oLib.Free;
			//if oFBServer <> nil then oFBServer.Free;
			if oNasDomClient <> nil then
			Begin
				//oNasDomClient.domainLogout;
				oNasDomClient.Close;
				oNasDomClient.free;
			End;

			if oNasDomAdmin<>nil then
			Begin
				oNasDomAdmin.domainLogout;
				oNasDomAdmin.Close;
				oNasDomAdmin.free;
			End;

			// Libération des ressources partagées
			FreeRsyncRes;
		Except
			logger('1000 : Erreur lors de la libération des ressources internes : ' + ExceptionParam, CALLER, LOG_WARNING, LogFile);
		End;

	End;

End.
