{
	Routine permettant de connaitre (et d'init si un paramètre "-f" (force) est passé) l'état read-only des volumes d'une bibliothèque
	Si un paramètre "-b libid" est passé, on ne traite que cette lib
}

Program maj_vol_ro;
{$I func_nas.xnov}
{$I local_auth.xnov}


var
	ErrMsg:String;
	ONasDomClient:TNasDomClient;
	i:Integer;
	oLibs:TLibraries;
	oLib:TLibrary;


	dummy: String;
	force: Boolean;
	libId:Integer;


function TraitLib(oCurlLib:TLibrary):boolean;
var
	j:Integer;
	oFDBFile:TFDBFile;
	cFDBFiles:TFDBFiles;
Begin
	result:=False;

	oFDBFile:=TFDBFile.create(ONasDomClient);

	Try

		Output('Lib ' + Int64ToStr(oCurlLib.id));
	//	oLib.id:=OLibs[i].id;
	//	oCurlLib.load(True);
		Output('    Lib title : ' + oCurlLib.title);
		Output('    owner_id : ' + Int64ToStr(oCurlLib.owner_id));
		Output('    owner_name : ' + oCurlLib.LastLogSync.owner_name);
		//  (0:lecture seul, 1:Dépose de document 2: full saas)
		Output('    Mode d''accès : ' + Int64ToStr(oCurlLib.Access_Mode));

		if not oCurlLib.FDBFiles.load(false, true) then
		Begin
			outputErr('Impossible de récupérer la liste des volumes de la bibliothèque ' +  IntToStr(oCurlLib.Id) + ' - Erreur : ' + ONasDomClient.Errcode + ':' + ONasDomClient.Errmsg);
	//		Continue;
		End;

		cFDBFiles:=oCurlLib.FDBFiles;
		Output('    Nb vol : ' + Int64ToStr(cFDBFiles.count-1));

		for j:=0 to cFDBFiles.count-1 do
		begin
			//OutputErr('        Récupération des informations détaillées du volume "' + cFDBFiles[j].name + '"');
			oFDBFile.LibraryId:=cFDBFiles[j].LibraryId;
			oFDBFile.name:=cFDBFiles[j].name;
			if not oFDBFile.load(true) then
			Begin
				outputErr('Impossible de charger le volume "' + oCurlLib.DbPath + clPathDelim + oFDBFile.name  + ' - Erreur : ' + ONasDomClient.Errcode + ':' + ONasDomClient.Errmsg);
				Continue;
			End;
			
			if not oFDBFile.accessible then
			begin
				Output('        Le volume : "' + oCurlLib.DbPath + clPathDelim + oFDBFile.name + '" ne peut pas être ouvert : ' + oFDBFile.accessErrorMsg);
				Continue;
			End;
				
			if (oFDBFile.name <> VOL_PRINC) then
			Begin
				Output('        État ReadOnly du volume : "' + oCurlLib.DbPath + clPathDelim + oFDBFile.name + '" en production : ' + booltoStr(oFDBFile.readOnlyMode,BOOLSTR));

				if (not oFDBFile.readOnlyMode) and (force) and (oCurlLib.Access_Mode<>2) then
				Begin
					//if FileExists(IncludeTrailingPathDelimiter(savpath) + cFDBFiles[i].name) then
					Output('        Mise en RO du volume : "' + oFDBFile.name + '" en production');
					if not ONasDomClient.fbadmin(oCurlLib.id,oFDBFile.name,'readonly') then
					begin
						OutputErr('Impossible de passer le volume "' + oFDBFile.name + '" en ReadOnly; Erreur : ' + ONasDomClient.Errcode + ':' + ONasDomClient.Errmsg);
					End;
				End;
			End;
		End;

		Result:=True;

	Finally
		if oFDBFile<> Nil then oFDBFile.Free();
	End;
	
End;


Begin

	if FindCmdLineSwitch('f', dummy, False) then force:=true;

	if FindCmdLineSwitch('b', dummy, true) then libId:=StrToInt(dummy);


	oNAsDomClient:=TNasDomClient.Create();

	try  
		if not NASConnect(oNasDomClient, GetNASHost('')) then
		Begin
			ErrMsg:='"Le serveur NAS n''est pas joignable !"';
			exit;
		End;

		if not NASLogin(oNasDomClient, AdmNASLogin,AdmNASHashedPasswd, True) then 
		Begin
			ErrMsg:='"Impossible de se connecter au serveur NAS !"';
			exit;
		End;

		//GetNasParam(oNAsDomClient);
		VOL_PRINC:=ONasDomClient.GEDFilename;
		if trim(VOL_PRINC) = '' then
		Begin
			ErrMsg:='Impossible d''initialiser la valeur de VOL_PRINC';
			Exit;
		End
		else
			OutputErr('Récupération des paramètres du NAS ; VOL_PRINC : "' + VOL_PRINC + '"');

		// Chargement des bibliothèques (seulement celles en state Ok par défaut)
		ONasDomClient.libraries.load(True);
		OLibs:=ONasDomClient.libraries;

		oLib:=TLibrary.create(ONasDomClient);         

		if libId<>0 then
		begin
			oLib.id:=libId;
			if not oLib.load(True) then
			Begin
				ErrMsg:='Erreur lors de la récupération des informations de la lib "' + IntToStr(libId) + '" : ' + ONasDomClient.Errcode + ': ' + ONasDomClient.Errmsg;
				exit;
			End;
			TraitLib(oLib);
		End
		Else
		Begin
			for i:=0 to OLibs.count-1 do
			Begin
				oLib.id:=OLibs[i].id;
				oLib.load(True);
				TraitLib(oLib);
			End;
		End;


	Finally
		if ErrMsg<>'' then
		Begin
			OutputErr(ErrMsg);
			SetExitCode(1);
		End;
		Try
			FreeNASRes;
			if OLib<>Nil  then OLib.Free;
			//if OLibs<>Nil then OLibs.Free;

			if oNAsDomClient<>Nil then
			Begin
				oNasDomClient.domainLogout
				oNasDomClient.Close;
				oNAsDomClient.Free;
			End;
		Except
		End;

	End;
End.
