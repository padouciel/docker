{
	Script permettant de sauvegarder une/plusieurs libraries sur un serveur FB supportant des Libraries...

	- Le serveur courant est identifié par la constante NAS_THIS_FBSERVER (Id de CE serveur dans la base domaine)
	- La destination de la sauvegarde est identifiée par la constante NAS_THIS_SAV_DEST

	- Ce script renvoie le path initial et le path de sauvegarde de chaque bib traitée, ie :
/path/orig/bib ==> path/sav/bib
	- Cette sortie peut-être exploitée par un outil tiers (rsync) pour effectuer une sauvegarde distante, par exemple

	Si un paramètre est passé, on ne prend en charge que cette librarie (ie un lib_id)
	Sinon on cherche toutes les libs hébergées sur le servuer Courant


TODO :
}

{$DEFINE DEBUG}

Program sav_bib;
// Functions/variables/constantes communes...
{$I func_sync.xnov}

Const
	DIRSAV_PERMS='775';
	SAV_PERMS='u=rw,g=rw,o=r';


var
	CALLER:String;

	oNasDomAdmin:TNasDomClient;

	oLib:TLibrary;
	Libs:TLibraries;
	Owners:TOwners;
	oOwner:TOwner;

	oFBServer:TFBServer;
	LogFile: string;

	i,j, NbBibSav:Integer;

	DestLocalSav:String;


// Équivalent à un "nbackup - f"
Function FixeUpFDB(filePath, msg: string):boolean;
var
	admin: TAdmin;
	errmsg: string;
Begin
	admin := TAdmin.create(false);

	Result:=admin.fixup(filePath,errmsg);
	msg:=errmsg;

	admin.free;    

End;



Function GetDestLocalSav(FBRootPath, dbpath: String):String;
Begin
	if trim(FBRootPath)='' then
		result:=NAS_THIS_SAV_DEST + dbpath // TODO : non fonctionnel sous Windows si lettre lecteur, etc...
	else
	Begin
		result:=ExtractRelativePath(IncludeTrailingPathDelimiter(FBRootPath),dbpath);
		result:=IncludeTrailingPathDelimiter(NAS_THIS_SAV_DEST) + result;
	End;
End;

// Sauvegarde *locale* d'une bibliothèque ; basée sur rsync
function SAVBib(oLib:TLibrary; savpath:String):Boolean;
var
	CALLER:String;
	i:Integer;

	oFDBFile:TFDBFile;
	cFDBFiles:TFDBFiles;

	VolLocked:boolean;

	Taskbackup: TNasTask;

	msg:String;

	savbasepath:string;

	LstF:TstringList;

	RestState:String;
	

Begin
	CALLER:='SAVBib';

	Result:=False;

	Try

		// Tests sur le volume principal...
		if Not FileExists(IncludeTrailingPathDelimiter(oLib.dbpath) + VOL_PRINC) then
			RaiseException(erCustomError,'Le volume principal "' + IncludeTrailingPathDelimiter(oLib.dbpath) + VOL_PRINC + '" n''existe pas ; abandon de la sauvegarde');

		// Vérification de présence d'une synchro en cours...
		if FileExists(IncludeTrailingPathDelimiter(oLib.dbpath) + FLAG_SYNC_CRIT) then
			RaiseException(erCustomError, 'Flag de synchronisaiton critique présent, impossible de sauvegarder cette bibliothèque maintenant');

		// Vérification de présence d'une sauvegarde déjà en cours (SIC)
		if FileExists(IncludeTrailingPathDelimiter(oLib.dbpath) + FLAG_SAV) then
			RaiseException(erCustomError, 'Flag de sauvegarde déjà présent, impossible de sauvegarder cette bibliothèque maintenant (une autre instance de sauvegarde a échoué ou est encore en activité ???)');

		// Vérification de mode Restore
		if not NASGetDomParamValues(TNasDomClient(oLib.NasDomClient), DOM_REST_STATE_S, DOM_REST_STATE_N, RestState, Nil) then
		Begin
			logger('Échec de récupération de l''état RESTORE (' + DOM_REST_STATE_S + '/' + DOM_REST_STATE_N + ') - On considère que ce n''est pas mis en place et on continue la sauvegarde...',CALLER ,LOG_WARNING, LogFile);
		End
		Else
		Begin
			if GetStateCompare(oLib.state,'~',StrToInt64(RestState)) then
				RaiseException(erCustomError, 'La lib ' + int64toStr(oLib.id) + ' "' + oLib.Title + '" est en mode restauration : les sauvegardes sont bloquées dans ce mode');
		End;

		if not oLib.FDBFiles.load(false, true) then
		Begin
			RaiseException(erCustomError,'Impossible de récupérer la liste des volumes de la bibliothèque ' +  IntToStr(oLib.Id) + ' - Erreur : ' + TNasDomClient(oLib.NasDomClient).Errcode + ':' + TNasDomClient(oLib.NasDomClient).Errmsg);
		End;

		if not DirectoryExists(savpath) then
		Begin
			logger('Le répertoire "' +  savpath + '" n''existe pas (première sauvegarde) ; tentative de création...',CALLER ,LOG_DEBUG, LogFile);
			if not ForceDirectories(savpath) then
			Begin
				RaiseException(erCustomError, 'Erreur lors de la création du répertoire destination de sauvegarde "' + savpath + '" pour la lib ' + int64toStr(oLib.id) + ' "' + oLib.Title + '"');
			End;

		End;

		// Ceci est fait pour que la procédure de restauration des volumes puissent lire les fichiers
		logger('Mise en place des propriétaires et droits pour le répertoire destination de sauvegarde : "' + +savpath + '"', CALLER, LOG_DEBUG, LogFile);

		savbasepath:=ExtractRelativePath(IncludeTrailingPathDelimiter(NAS_THIS_SAV_DEST),savpath);
		savbasepath:=IncludeTrailingPathDelimiter(NAS_THIS_SAV_DEST) + GetFirstDir(savbasepath);

		logger('BaseName pour les droits/owner ' + savbasepath, CALLER, LOG_DEBUG, LogFile);

		// On affecte les bon propriétaires et droits au fichiers
		// TODO portabilité Windows...
		Try
			// Travail sur les répertoires...
			lstF:=ChargeListeFichiers(savbasepath,'',faDirectory,true);
			For i:=0 to lstF.count-1 do
			Begin
// 				logger('Owner + Droits Dir "' + lstF[i] + '" - ' + DIRDB_USER + ' - ' + DIRDB_GROUP + ' - ' + DIRSAV_PERMS , CALLER, LOG_DEBUG, LogFile);
				SysRun('/bin/chown',DIRDB_USER + ':' + DIRDB_GROUP + ' ' + lstF[i]);
				SysRun('/bin/chmod',DIRSAV_PERMS + ' ' + lstF[i]);
			End;

			// Ensuite les fichiers...
			lstF:=ChargeListeFichiers(savbasepath,'*',0,true);
			For i:=0 to lstF.count-1 do
			Begin
// 				logger('Owner + Droits File "' + lstF[i] + '" - ' + DIRDB_USER + ' - ' + DIRDB_GROUP + ' - ' + SAV_PERMS , CALLER, LOG_DEBUG, LogFile);
				SysRun('/bin/chown',DIRDB_USER + ':' + DIRDB_GROUP + ' ' + lstF[i]);
				SysRun('/bin/chmod',SAV_PERMS + ' ' + lstF[i]);
			End;

		Except
			// On tente le coup de continuer sans erreur...
			logger('La modification des propriétaires et/ou droits du répertoire destination de sauvegarde "' + savpath + '" a échouée - Erreur : '  + ExceptionParam, CALLER, LOG_ERROR, LogFile); //+ SysRunErrorMessage.Text
		End;

		cFDBFiles:=oLib.FDBFiles;
		oFDBFile:=TFDBFile.create(TNasDomClient(oLib.NasDomClient));


		// Ici nous considérons que la tâche de sauvegarde commence...

		// Création du fichier témoin de SAV en cours (pas d'autre action sur les volumes)...
		logger('Création du flag de sauvegarde en cours "' + IncludeTrailingPathDelimiter(oLib.dbpath) + FLAG_SAV + '"', CALLER, LOG_DEBUG, LogFile);
		If not EcritFichier('',IncludeTrailingPathDelimiter(oLib.dbpath) + FLAG_SAV) then
		Begin
			RaiseException(erCustomError,'Erreur lors de la création du flag de sauvegarde : ' + ExceptionParam);
		End;
		Taskbackup:= TNasTask.create(TNasDomClient(oLib.NasDomClient));
		//Taskbackup.Owner_Id:=1;
		Taskbackup.Library_Id:=oLib.Id;
		Taskbackup.Task_name:='Backup'; // Normalisation ???
		Taskbackup.task_state:=1; // Démarrage
		TNasDomClient(oLib.NasDomClient).set_task_state(Taskbackup);           


		for i:=0 to cFDBFiles.count-1 do
		begin

			logger('Traitement du fichier "' + cFDBFiles[i].name + '"...',CALLER ,LOG_INFO, LogFile);

			// Test de fichier existant et correspondant en terme de taille/date à la destination
			if FileExists(IncludeTrailingPathDelimiter(savpath) + cFDBFiles[i].name) then
			Begin
// 				logger('Le fichier "' + IncludeTrailingPathDelimiter(savpath) + cFDBFiles[i].name + '" existe : Test de correspondance',CALLER ,LOG_DEBUG, LogFile);
// 				logger('Origine : Taille ' + Int64ToStr(GetFileSize(IncludeTrailingPathDelimiter(cFDBFiles[i].path) + cFDBFiles[i].name))
// 					+ ' - Date : ' + DateTimeToNas(GetFileDate(IncludeTrailingPathDelimiter(cFDBFiles[i].path) + cFDBFiles[i].name)),CALLER ,LOG_DEBUG, LogFile );
// 				logger('Destination : Taille ' + Int64ToStr(GetFileSize(IncludeTrailingPathDelimiter(savpath) + cFDBFiles[i].name))
// 					+ ' - Date : ' + DateTimeToNas(GetFileDate(IncludeTrailingPathDelimiter(savpath) + cFDBFiles[i].name)), CALLER ,LOG_DEBUG, LogFile);

				if (GetFileSize(IncludeTrailingPathDelimiter(cFDBFiles[i].path) + cFDBFiles[i].name) = GetFileSize(IncludeTrailingPathDelimiter(savpath) + cFDBFiles[i].name)) And
					(GetFileDate(IncludeTrailingPathDelimiter(cFDBFiles[i].path) + cFDBFiles[i].name) = GetFileDate(IncludeTrailingPathDelimiter(savpath) + cFDBFiles[i].name)) then
				Begin
					logger('Le fichier "' + cFDBFiles[i].name + '" existe et correspond (même date et même taille) à la source, on passe au suivant',CALLER ,LOG_INFO, LogFile);
					Continue;
				End;
			End;

			logger('Récupération des informations détaillées du volume "' + cFDBFiles[i].name + '"',CALLER ,LOG_DEBUG, LogFile);
			oFDBFile.LibraryId:=cFDBFiles[i].LibraryId;
			oFDBFile.name:=cFDBFiles[i].name;
			oFDBFile.load(true);

			// Seulement pour les volumes en RW...
			if not oFDBFile.readOnlyMode then
			begin
				logger('Verrouillage du fichier "' + oFDBFile.name + '"', CALLER, LOG_DEBUG, LogFile);
				if not TNasDomClient(oLib.NasDomClient).fbadmin(oLib.Id,oFDBFile.name,'lock') then
				begin
					RaiseException(erCustomError,'Impossible de verrouiller le volume "' + oFDBFile.name + '" ; Erreur : ' + TNasDomClient(oLib.NasDomClient).Errcode + ':' + TNasDomClient(oLib.NasDomClient).Errmsg);
				End;
				VolLocked:=true;
			End
			Else
				logger('Verrouillage du fichier "' + oFDBFile.name + '" inutile (Fichier RO)', CALLER, LOG_DEBUG, LogFile);

			// Copie différentielle effective de chaque volume localement
			logger('rsync du volume "'  + IncludeTrailingPathDelimiter(oFDBFile.path) + oFDBFile.name + '" vers "' +  savpath + '"',CALLER ,LOG_DEBUG, LogFile);
			// Option --times très importante car on garde le timestamp d'origine pour comparaison entre les 2 fichiers...
			if not SysRun(NAS_RSYNC_PATH,'--progress --stats --times --chmod=' + SAV_PERMS + ' --owner --group --xattrs' + ' ' + IncludeTrailingPathDelimiter(oFDBFile.path) + oFDBFile.name + ' ' + savpath) then
				RaiseException(erCustomError, 'Erreur lors de la copie du volume "' + IncludeTrailingPathDelimiter(oFDBFile.path) + oFDBFile.name + '" : ' + CRLF + SysRunErrorMessage.Text);

			//outputErr('Sortie de rsync : ' + CRLF + SysRunOutput.text);

			// seulement pour RW...
			if VolLocked then
			begin
				logger('Déverrouillage du fichier "' + oFDBFile.name +'" en origine', CALLER, LOG_DEBUG, LogFile);
				if not TNasDomClient(oLib.NasDomClient).fbadmin(oLib.Id,oFDBFile.name,'unlock') then
				begin
					RaiseException(erCustomError,'Impossible de déverrouiller le volume "' + oFDBFile.name + '" ; Erreur : ' + TNasDomClient(oLib.NasDomClient).Errcode + ':' + TNasDomClient(oLib.NasDomClient).Errmsg);
				End;
				VolLocked:=False;
				// TODO : unlock du volume copié...
				logger('Déverrouillage du fichier "' + IncludeTrailingPathDelimiter(savpath) + oFDBFile.name +'" en destination', CALLER, LOG_DEBUG, LogFile);
				if not FixeUpFDB(IncludeTrailingPathDelimiter(savpath) + oFDBFile.name,msg) then
				begin
					// On ne génère pas d'erreur ici...
					logger('Impossible de déverrouiller le volume "' + IncludeTrailingPathDelimiter(savpath) + oFDBFile.name + '" ; Erreur : ' + msg, CALLER, LOG_ERROR, LogFile);
				End;

			End;
		End;

		Result:=True;

	Except
		logger('L''erreur suivante s''est produite pendant la sauvegarde locale de la bibliothèque "' + oLib.Title + '" (' + Int64ToStr(oLib.Id) + ') : ' + ExceptionParam, CALLER, LOG_WARNING, LogFile);
		Result:=False;

	Finally

		// Si un volume est actuellement encore vérouillé (après erreur ou autre), on tente de le déverouillé
		if VolLocked then
		begin
			Try
				logger('Déverrouillage du fichier "' + oFDBFile.name +'"', CALLER, LOG_DEBUG, LogFile);
				if not TNasDomClient(oLib.NasDomClient).fbadmin(oLib.Id,oFDBFile.name,'unlock') then
				begin
					RaiseException(erCustomError,'Impossible de déverrouiller le volume "' + oFDBFile.name + '" ; Erreur : ' + TNasDomClient(oLib.NasDomClient).Errcode + ':' + TNasDomClient(oLib.NasDomClient).Errmsg);
				End;
			Except
			End;
		End;

		// Suppression du fichier témoin de SAV en cours
		logger('Suppression (inconditionnelle) du flag de sauvegarde en cours "' + IncludeTrailingPathDelimiter(oLib.dbpath) + FLAG_SAV + '"', CALLER, LOG_DEBUG, LogFile);
		If not DeleteFile(IncludeTrailingPathDelimiter(oLib.dbpath) + FLAG_SAV) then
		Begin
			// Pas d'erreur fatale, mais un gros warinig...
			//RaiseException(erCustomError,'Erreur lors de la suppression du flag de synchro : ' + ExceptionParam);
			logger('Erreur lors de la suppression du flag de sauvegarde', CALLER, LOG_WARNING, LogFile);
		End;

		if oFDBFile<> Nil then oFDBFile.Free();
		if Taskbackup <>Nil then
		Begin
			Taskbackup.task_state:=2; // stop
			TNasDomClient(oLib.NasDomClient).set_task_state(Taskbackup);           
			Taskbackup.free;
		End;
			
	End;
	
	
End;

{
	Connexion globale (ie login) au NAS avec les éléments donnése
	Attention, password doit être fourni en hashed string...
}
function SavNASConnect(NAS_HOST, Login, password,logfile:string):TNasDomClient;
var
	CALLER:String;
Begin

	CALLER:='SavNASConnect';
	Result:=TNasDomClient.Create();
	
	// Test de connexion serveur NAS
	if logfile <>'' then logger('Connexion au NAS "' + NAS_HOST + '"', CALLER, LOG_DEBUG, LogFile);
	if not NASConnect(Result, NAS_HOST) then
	begin
		if logfile <>'' then logger('Connexion serveur NAS "' + NAS_HOST +'" impossible  - Erreur : ' + Result.Errcode + ':' + Result.Errmsg, CALLER, LOG_ERROR, LogFile);
		RaiseException(erCustomError, 'Connexion NAS impossible sur "' + NAS_HOST + '"');
	end;
	if logfile <>'' then logger('Connexion OK', CALLER, LOG_DEBUG, LogFile);

	//Connexion sur le domain 
	if logfile <>'' then logger('Login sur NAS "' + NAS_HOST + '" en tant que "' + Login +'"', CALLER, LOG_DEBUG, LogFile);
	if not NASLogin(Result, Login, Password, true) then
	begin
		if logfile <>'' then logger('Login impossible sur le NAS - Erreur : ' + Result.Errcode + ':' + Result.Errmsg, CALLER, LOG_ERROR, LogFile);
		RaiseException(erCustomError, 'Authentification erronée sur NAS "' + NAS_HOST + '" en tant que "' + Login +'"');
	end;
	if logfile <>'' then logger('Login OK', CALLER, LOG_DEBUG, LogFile);
End;

Begin
	CALLER:='Main';

	Try

		// On initialise d'abord sur un fichier de log générique avant de basculer sur un fichier de log spécifique
		LogFile:=StrReplace(NAS_LOGSAV_PATH,'#id#','local');

		logger('', CALLER, LOG_INFO, LogFile);
		logger('==================================================================================================================================================', CALLER,LOG_INFO,LogFile);
		logger('                                         NOUVELLE DEMANDE DE SAUVEGARDE', CALLER,LOG_INFO,LogFile);
		logger('==================================================================================================================================================', CALLER,LOG_INFO,LogFile);
		logger('', CALLER, LOG_INFO, LogFile);

		// Vérification de la présence de cette constante (serveur Firebird local)
		logger('Vérification du paramétrage de l''I Du serveur FB Local : ' + Int64ToStr(NAS_THIS_FBSERVER), CALLER,LOG_DEBUG,LogFile);

		// RSYNC disponible ?
		if not FileExists(NAS_RSYNC_PATH) then
			RaiseException(erCustomError,'Programme rsync non trouvé/inaccessible : "' + NAS_RSYNC_PATH + '"');
		logger('Vérification accès rsync Ok : "' + NAS_RSYNC_PATH + '"', CALLER,LOG_DEBUG,LogFile);

		oNasDomAdmin:=TNasDomClient.Create();
		oNasDomAdmin:=SavNASConnect(GetNASHost(''), AdmNASLogin, AdmNASHashedPasswd,logfile);

		GetNasParam(oNasDomAdmin);

		oNasDomAdmin.FBServers.load(true);
		oFBServer:=oNasDomAdmin.FBServers.GetFromID(NAS_THIS_FBSERVER);

		// Si un argument a été passé à cette procédure, on considère qu'il s'agit d'une lib à sauvegarder directement
		if paramcount>1 then
		Begin
			try
				oLib:=NASGetLib(oNasDomAdmin,StrToInt64(trim(ParamStr(2))));
				if oLib=Nil then RaiseException(erCustomError, 'Erreur lors du traitement du paramètre ' + ParamStr(2) + ' (devrait être un identifiant de bibliothèque)');
			Except
				begin
					OutputErr('Le paramètre "' + ParamStr(2) + '" ne correspond pas à une bibliothèque, ou cette bibliothèque n''est pas accessible (inexistante ou inutilisable) : ' + ExceptionParam);
					SetExitCode(1);
					exit;
				End;
			End;

			if oLib.FbServer_Id<>NAS_THIS_FBSERVER then
			Begin
				OutputErr('La bibliothèque ' + Int64ToStr(oLib.id) + ' n''est pas hébergée sur ce serveur');
				SetExitCode(1);
				exit;
			End;

			Logger('Lib : "' + Int64ToStr(oLib.Id) + '" - "' + oLib.title + '"',CALLER, LOG_DEBUG, LogFile);

			Logger('Server FB : "' + Int64ToStr(oFBServer.Id) + '" - "' + oFBServer.Name + '"',CALLER, LOG_DEBUG, LogFile);
			Logger('Server path : "' + oFBServer.LibRootPath + '" - DBPath : "' + oLib.dbpath + '"',CALLER, LOG_DEBUG, LogFile);
			DestLocalSav:=GetDestLocalSav(oFBServer.LibRootPath,oLib.dbpath);
			Logger('Destination locale : "' + DestLocalSav + '"',CALLER, LOG_DEBUG, LogFile);

			if SAVBib(oLib, DestLocalSav) then
			begin
				// On renvoie les path de la bib sur STDOUT pour exploitation par outils tiers
				Output(Int64ToStr(oLib.id) + ' > ' + oLib.Title + ' > ' + oLib.dbpath + ' > ' + DestLocalSav);
			End;

			Exit;
		End;

		// On récupère d'abord la liste *complète* des owners...
		oNasDomAdmin.Owners.AllStates:='*';
		oNasDomAdmin.Owners.Load(true);
		OWners:=oNasDomAdmin.Owners;
		for j:=0 to OWners.count-1 do
		begin
			oOwner:=OWners[j];

			// Récupération de la liste complète des bibliothèques du owner en cours
			oOwner.Libraries.AllStates:='*';
			oOwner.libraries.load(True);
			Libs:=oOwner.libraries;

			Logger('Traitement du Owner : ' + Int64ToStr(oOwner.id) + ' "' + oOwner.name + '" : ' + inttostr(Libs.count) + ' libs trouvées pour ce Owner', CALLER, LOG_DEBUG, LogFile);
			
			for i:=0 to Libs.count-1 do
			begin
				oLib:=Libs[i];

				if oLib.FbServer_Id<>NAS_THIS_FBSERVER then
				Begin
					Logger('==> Lib : ' + int64toStr(oLib.Id) + ' - ' + oLib.title + ' (state : ' + Int64ToStr(oLib.State) + ', FBServer :  ' + Int64ToStr(oLib.FbServer_Id) + ') non hébergée sur ce serveur, on traite la suivante...',CALLER, LOG_DEBUG, LogFile);
					Continue;
				End;

				if oOwner.Deleted or oLib.Deleted then
				Begin
					Logger('==> TODO : Bib ou Owner supprimé, on devrait récupérer l''espace disque correspondant à "' + oLib.dbpath + '" (' + Int64ToStr(oLib.size_mb) + ' Mo)', CALLER, LOG_INFO, LogFile);
					Continue;
				End;

				Logger('==> Sauvegarde effective de "' + oLib.dbpath + '"', CALLER, LOG_INFO, LogFile);
				DestLocalSav:=GetDestLocalSav(oFBServer.LibRootPath,oLib.dbpath);

				if SAVBib(oLib, DestLocalSav) then
				begin
					NbBibSav:=NbBibSav+1;
					// On renvoie les path de la bib sur STDOUT pour exploitation par outils tiers
					Output(Int64ToStr(oLib.id) + ' > ' + oLib.Title + ' > ' + oLib.dbpath + ' > ' + DestLocalSav);
				End;

			End;
		End;

		Logger(IntToStr(NbBibSav) + ' Bibliothèques effectivement sauvegardées pour ce serveur...', CALLER, LOG_INFO, LogFile);


	Except
		SetExitCode(2);
		outputErr('Erreur fatale : ' + ExceptionParam);
		if LogFile<>'' then logger('Erreur fatale : ' + ExceptionParam, CALLER, LOG_ERROR, LogFile);

	Finally
		Try
			if oFBServer<>Nil then oFBServer.Free;
			if oLib<>Nil then oLib.Free;
			if Libs<>Nil then Libs.Free;
			if oOwner<>Nil then oOwner.Free;
			if Owners<>Nil then Owners.Free;

			if oNasDomAdmin<>Nil then
			Begin
				oNasDomAdmin.domainLogout
				oNasDomAdmin.Close;
				oNasDomAdmin.Free;
			End;
			FreeNASRes;
		Except
		End;

	End;


End.