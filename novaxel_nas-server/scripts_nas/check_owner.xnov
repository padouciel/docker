{$DEFINE DEBUG}

// pour tester l'existence d'un owner
program check_owner;
{$I func_cloud.xnov}

Const
	CALLER='check_owner';

var
	SCParams : TScriptParams;
	SCResults: TScriptResult;
	fileresult:String;
	ErrMsg:String;

	oNasDomClient:TNasDomClient;


Function check_OWNER(login:string):boolean;
var
	i : integer;
begin
     result := false;

	if not oNasDomClient.owners.load(False) then exit;

	if oNasDomClient.owners.find(login)<>nil then
	begin
		Result:=True; 
		exit; // il existe déjà
	end; 

    for i:=0 to oNasDomClient.owners.count-1 do
    begin
         if (lowercase(Login) = lowercase(oNasDomClient.owners[i].subdomain)) then
         begin
              result := true;
              break;
         end;
    end; 
end;

{
	Modification par rapport à la version originale
	- Renvoie True si le owner n'existe pas (donc login soumis est valide)
	- Sinon, renvoi un message d'erreur sous forme de chaine (encadrée par "" donc, qui sera utilisé par jQeury.validate....
}
Begin                       

	SCParams:=TScriptParams.Create();

	if SCParams.paramsFilename='' then
	Begin
		OutputErr('Script appelé hors contexte NAS exec_script');
		SetExitCode(1);
		exit;
	End;

	// La variable de test doit être "login"
	if SCParams.getValue('login')='' then exit;

	fileresult:=extractfilepath(SCParams.paramsFilename)+'result.json';
    deletefile(fileresult);

	SCResults:=TScriptResult.Create();
	// Normalement ça devrait être du json, mais en fait ça fonctionne très bien (ie mieux ???) avec du text/plain
	//SCResults.mimetype:='application/json';
	SCResults.mimetype:='text/plain';

	oNasDomClient:=TNasDomClient.Create();

	try  
		if not NASConnect(oNasDomClient, GetNASHost('')) then
		Begin
			ErrMsg:='"Le serveur NAS n''est pas joignable !"';
			exit;
		End;
		// À partir de la version 1.7.6, on peut se logguer directemnt  en Script...
		if not NASLogin(oNasDomClient, SCParams.OwnerLogin,SCParams.OwnerPasswd, False) then 
		Begin
			ErrMsg:='"Impossible de se connecter au serveur NAS !"';
			exit;
		End;

		logger_NAS(oNasDomClient,CALLER + ' appelé pour test sur "' + SCParams.getValue('login') + '"', CALLER, LOG_DEBUG);

		// Renvoie True si l'utilisateur existe, on inverse donc la réponse
		logger_NAS(oNasDomClient,'checkOwner : ' + booltoStr(check_OWNER(SCParams.getValue('login')),BOOLSTR), CALLER, LOG_DEBUG);

		if check_OWNER(SCParams.getValue('login')) then
		Begin
			ErrMsg:='"L''identifiant \"' + SCParams.getValue('login') + '\" est déjà utilisé..."';
			exit;
		End;

		if ExecRegExpr(RELoginOk, SCParams.getValue('login')) then
			ErrMsg:='true'
		else
			ErrMsg:='"L''identifiant ne correspond pas au format attendu (alphanumérique simple, point, tiret, soulignement, ... acceptés)"';

	finally
		logger_NAS(oNasDomClient,'Valeur renvoyée appelant : "' + ErrMsg + '"', CALLER, LOG_DEBUG);

		EcritFichier(ErrMsg,fileresult); 

		SCResults.ResponseFile:=fileresult;
		SCResults.savetofile;
		Try
			SCResults.Free();
			SCParams.Free();
			oNasDomClient.domainLogout;
			oNasDomClient.Close;
			oNasDomClient.free;
			FreecloudRes;
		Except
		End;

	end;

End.
