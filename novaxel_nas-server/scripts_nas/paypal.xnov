// script de gestion paypal
{
	On prend en charge TOUS les échanges avec paypal, donc, le formulaire appelant doit nous appelé avec les paramètres nécessaires à une exploitaiton complète Paypal :

}

{$DEFINE DEBUG}

program PayPal;
{$I func_cloud.xnov}


const
	// CUSTOMIZE THIS: This is the seller's Payment Data Transfer authorization token.
	// Replace this with the PDT token in "Website Payment Preferences" under your account.
	//authToken='QMdcmejtv-vXFZBZl1ZP6l2NlzQduAg6M9FWuBT02FHBQFiogiBaL6CxawO';
	authToken=	'yTLOSrgkYuDGoMsmPeYZZ1oeDUnfjkiC9_rdmlOQl0Fv0KTS5CXcV8Jku_u';
	authToken='AmRFYwa6qRHUjNTBStvAQAoUcLnsA.mY-kAdsRddmf1lFBVfNgyjjoiN';


	Paypal_URL='https://www.sandbox.paypal.com/cgi-bin/webscr';
	// TODO : à mettre en prod :
	// Paypal_URL='https://www.paypal.com/cgi-bin/webscr'; 

	// CALLER pour log :
	CALLER='Paypal';

var
	oNovHttpsClient:TNovHttpsClient;
	errmsg:string;

	txToken:string;
	strRequest:string;

	infilename, resfilename, htmlFilename, repscript, reply, htmlBuffer : string;
	paypalInfos: TStringList;
	sr : TScriptResult;
	params : TScriptParams;


// procedure ParseHtml;
// begin
//     htmlBuffer:=StrReplace(htmlBuffer,'@OWNER_NAME@',OWNER_NAME);
//     htmlBuffer:=StrReplace(htmlBuffer,'@ADRESS@',ADRESS);
//     htmlBuffer:=StrReplace(htmlBuffer,'@OWNER_LOG@',OWNER_LOG);
//     htmlBuffer:=StrReplace(htmlBuffer,'@OWNER_PASS@',OWNER_PASS);
// end;

// fonction de traitement des paramètres URL envoyés par paypal :
// GET /nasnovaxel/exec_script_url?script_name=paypal&tx=28J85169D2697822M&st=Completed&amt=2.00&cc=USD&cm=&item_number=test1
function readParams:boolean;
begin
  result := false;
  txToken := '';
  if (lowercase(params.getvalue('st')) <> 'completed') then
    exit;
  txToken:=params.getvalue('tx');
  if (txToken <> '') then
     result := true; 
end;

// Main
Begin
	params := TScriptParams.create;

	if params.paramsFilename='' then
	Begin
		OutputErr('Script appelé hors contexte NAS exec_script');
		SetExitCode(1);
		exit;
	End;

	logger('Lancement du script Paypal', CALLER, LOG_INFO, LogFile);

	setExitCode(1);


	// s'il n'y a pas de fichier de paramètres passé par le nas, on sort
	if (paramcount <= 1) then
	Begin
		logger('script "' + paramstr(1) + '" appelé sans paramètres (anormal)', CALLER, LOG_WARNING, LogFile);
		exit;
	End;

	// on va charger le fichier modèle html depuis le sous-rep qui porte le nom du script
	repscript := changeFileExt(paramstr(1),'');
	htmlFilename := IncludeTrailingPathDelimiter(repscript) + 'template_reponse.html';

	// lecture des paramètres URL envoyés par paypal et transmis par le script  
	if (not readParams) then
	Begin
		logger('Impossible de lire les paramètres renvoyés par PayPal (anormal)', CALLER, LOG_WARNING, LogFile);
		exit;
	End;

	// on envoie à paypal la requete de récupération des informations
	strRequest:= 'cmd=_notify-synch&tx=' +txToken+'&at='+ authToken


	oNovHttpsClient:=TNovHttpsClient.create;
	// TODO : à voir, il faudrait que ce soit Yes en prod....
	oNovHttpsClient.RequiresCertificateValidation:=False;

	logger('Envoi de la requête à Paypal...', CALLER, LOG_DEBUG, LogFile);

	// Attente du retour et traitement de la réponse....
	if oNovHttpsClient.Post(Paypal_URL,strRequest) then // le post a par défaut ContentType := 'application/x-www-form-urlencoded';
	begin
		logger('Retour Paypal OK, traitement de la réponse...', CALLER, LOG_DEBUG, LogFile);
		paypalInfos := TStringList.create;
		// Nettoyage des informations renvoyées par poaypal ("+" = " ")
		paypalInfos.text := strReplace(oNovHttpsClient.Response.text, '+', ' ');  // contient les réponse de la forme clée=valeur
		//    paypalInfos.savetofile('c:\temp\paypal.txt');
		logger('Retour Paypal avec les informations suivantes :' + CRLF + trim(paypalInfos.text), CALLER, LOG_DEBUG, LogFile);

		if (paypalInfos.indexof('success') > -1) then
		begin
			logger('Lancement de la procédure Create_cloud...', CALLER, LOG_DEBUG, LogFile);
//			if (create_cloud(params, paypalInfos)) then
// 			if (create_cloud()) then
// 				reply := 'OK'
// 			else
// 			begin
// 				reply := 'KO (erreur create_cloud : '+errmsg+')';
// 			end;
		end
		else
		Begin
			reply := 'KO (erreur paypal)';
			//    reply := reply + ' - email du client : '+paypalInfos.values['payer_email'];
			//    reply := reply + ' - nom du client : '+paypalInfos.values['last_name'];
			//    reply := reply + ' - rue : '+paypalInfos.values['address_street'];
		end;
	End
	else
	Begin
		logger('Retour Paypal KO avec l''erreur suivante :', CALLER, LOG_WARNING, LogFile);
		logger(oNovHttpsClient.Errmsg+Chr(13)+oNovHttpsClient.ServerReasonPhrase+' ['+intTostr(oNovHttpsClient.ServerStatusCode)+']', CALLER, LOG_WARNING, LogFile);

		reply := oNovHttpsClient.Errmsg+Chr(13)+oNovHttpsClient.ServerReasonPhrase+' ['+intTostr(oNovHttpsClient.ServerStatusCode)+']';
	End;

	oNovHttpsClient.free;

	// on génère à partir du modèle un fichier html de confirmation de paiement qui sera affiché au client 
	resfilename := extractfilepath(params.paramsFilename)+'paypal.html';
	DeleteFile(resfilename);
	htmlBuffer:= LitFichier(htmlFilename);
//	Parsehtml;
//	EcritFichier(htmlBuffer,resfilename)

	// on génère le fichier de résultat pour la NAS
	sr := TScriptResult.create; 
	sr.responseFile := resfilename; 
	//     sr.mimetype := 'text/html';
	sr.savetofile;

	sr.free; 
	params.free;
	paypalInfos.free;

	setExitCode(0);

End.
