{$I func_nas.xnov}

const

	// email admin "par dépit"
	ADMIN_EMAIL='root@localhost';

	// Fichier Log
	LogFileBase='/srv/novaappserver/log/create_cloud_#id#.log';

	{
		Template HTML de base à utiliser à peupler pour les réponses
		il DOIT contenir un identifiant correspond à TAGRESULT (voir plus loin)
		qui joue le rôle d'un placeholder
	}
	template_result='/srv/novaappserver/htdocs/templates/scripts.html';

	// L'indentifiant de placeholder
	PH_html_result='RESULTSCRIPT';


	// Texte html à utiliser en cas de réponse positive (create_cloud Ok)
	// TODO : mettre ça dans un paramètre domaine dès que possible...
	HTML_Ok='<div >' +
	'<p>@@OWNER_NAME@@, Merci d''avoir commandé Novaxel Cloud Family</p>' +
	'</div>' +
	CRLF +
// 	'<div > ' +
// 	'<p>Vous devez télécharger et installer la dernière version&nbsp;: <a href="@@CLOUD_CLIENT_PACKAGE_URL@@"><b>Setup Family Cloud</b></a></p>' + // htpp://www.novaxel2.com/DEMOCS/NOVAXELPRIVE.exe 
// 	'</div>' +
// 	CRLF +
	'<div > ' +
	'<p>Une fois installé, exécutez Novaxel cloud et utilisez vos identifiants pour définir votre compte.</p> ' +
	'<p>Vos identifiants&nbsp;:</p>' + 
	'<ul>' +
	 '<li>Domaine&nbsp;: <b>@@OWNER_DOMAIN@@</b></li>' +
	 '<li>Login&nbsp;: <b>@@OWNER_LOGIN@@</b></li>' +
	 '<li>Mot de passe&nbsp;: <b>@@OWNER_PASS@@</b></li>' +
	'</ul></div>';

	HTML_Ko='<div >' +
	'<p>L''erreur suivante s''est produite lors de la création de votre compte&nbsp;:</p>' +
	CRLF +
	'<p>@@ERROR@@</p>' +
	'</div>' +
	CRLF +
	'<div > ' +
	'<p>Si vous ne comprenez pas la teneur du message précédent, nous vous remercions de prendre contact avec l''administrateur du site</p>' +
	'<p>Ajouter coordonnées, etc...</p>' + 
	'</div>';


	{
		Expression régulière correspondante à un motif de login acceptable
		On accepte :
		- caractère alpha non diacritique (\w)
		- digit (\d)
		- tiret, _ et point en séparateur
		100 car max
	}
	RELoginOk='^(\w|\d|\-|\.){1,100}$';

	//CALLER='create_cloud';

var
//	oNasDomClient:TNasDomClient;

	G_idfbserver:integer;

	//  FileLog:string;
	//variables de connection Admin

	//G_TitreBib:string;
	LogFile:String;

	// Message d'erreur renvoyé au client HTTP (attention au contenu)
	RespErrMsg:String;

  
Function SendMailCreateCloud(oOWner:TOwner;bodyhtml:string):boolean;
var
	lDestinataires,ltrace:Tstringlist;
	LstVar:Tstringlist;
	Expediteur,Objet:string;
	CALLER:String;
	Sign:String;
	ValBlb:TStringStream;
	ParserDelim:String;
	Body: String;


begin
	CALLER :='SendMailCreateCloud';

	Result:=False;

	logger('Appel de  "' + CALLER + '"' ,CALLER,LOG_DEBUG,LogFile);

	if not NASGetDomParamValues(TNasDomClient(oOWner.NasDomClient), 'DOMAIN','MACRO_DELIM',ParserDelim,Nil) then
	begin
		logger('Impossible de récupérer la valeur du délimiteur de Macro en TDOMPARAM : ' + TNasDomClient(oOWner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOWner.NasDomClient).Errmsg, CALLER, LOG_WARNING, LogFile);
		exit;
	end
	Else
	Begin
		ParserDelim:=trim(ParserDelim);
		logger('Delim MAcro : "' + ParserDelim + '"', CALLER, LOG_DEBUG, LogFile);
	End;

	LstVar:=TStringList.Create();
	LstVar.add('domain_name' + '=' + trim(TNasDomClient(oOwner.NasDomClient).DomainName));
	LstVar.add('domain_ServerType' + '=' + trim(TNasDomClient(oOwner.NasDomClient).ServerType));
	LstVar.add('domain_ServerVersion' + '=' + trim(TNasDomClient(oOwner.NasDomClient).ServerVersion));
	LstVar.add('domain_DomainVersion' + '=' + trim(TNasDomClient(oOwner.NasDomClient).DomainVersion));
	LstVar.add('domain_DomainVersion' + '=' + trim(TNasDomClient(oOwner.NasDomClient).DomainVersion));
	LstVar.add('domain_Encrypted' + '=' + BoolToStr(TNasDomClient(oOwner.NasDomClient).Encrypted,BOOLSTR));


	Expediteur:=TNasDomClient(oOWner.NasDomClient).loggedOwner.contact.email; // le mail de l'administrateur du domain (PAD : peut-être ;-) )
	if Expediteur='' then Expediteur:= TNasDomClient(oOWner.NasDomClient).DomainAdminEmail; //  (PAD : encore peut-être ;-) )
	if Expediteur='' then Expediteur:= ADMIN_EMAIL;  // (PAD : faut bien que quelqu'un reçoive quelque chose ;-)
    
	LstVar.add('admin_email' + '=' + Expediteur);

	// Signature à créer en dernier car elle peut contenir des variables elle-même
	ValBlb:=TStringStream.Create('');
	if NASGetDomParamValues(TNasDomClient(oOWner.NasDomClient), 'DOMAIN','ADMIN_EMAIL_SIG',Sign,ValBlb) then
	begin
		Sign:=ParseText(trim(ValBlb.Datastring),ParserDelim,LstVar,False);
		Sign:=ReplaceRegExpr('\n',Sign,'<br />\n',true);
		logger('Signature Admin: ' + Sign, CALLER, LOG_DEBUG, LogFile);

	End
	Else
		logger('Impossible de récupérer la valeur du paramètre Signature Admin: ' + TNasDomClient(oOWner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOWner.NasDomClient).Errmsg, CALLER, LOG_WARNING, LogFile);


	lDestinataires:=TStringList.create;
	lDestinataires.add(oOWner.Contact.email)
	lDestinataires.add(Expediteur);

	Body:=ReplaceRegExpr('(</body.*>)',bodyhtml,Sign + '${1}',true);
	logger('Body parsé : ' + CRLF + body,CALLER,LOG_DEBUG,LogFile);
	ltrace:=TStringList.create;

	Objet:=ParseText('Confirmation de création de compte sur le domaine Novaxel Cloud "@@domain_name@@"','@@',LstVar,False);
	logger('Préparation du message mail avec l''objet "' + Objet + '"',CALLER,LOG_DEBUG,LogFile);

	Result:= SendMail(
		Objet, // Obj
		lDestinataires, // dest
		Body, // body
		nil, // fichiers
		Expediteur, // From
		ltrace
		);

	if Not Result then
		logger('Envoi de mail administrateur avorté : ' + CRLF + trim(ltrace.Text), CALLER, LOG_WARNING, LogFile)
	Else
		logger('Message envoyé', CALLER, LOG_DEBUG, LogFile);

	lDestinataires.free;
	lTrace.free;
	LstVar.free();

end;  

function GetParams(oNasDomClient:TNasDomClient;params, OwnerInfos:TStringList):boolean;
Var
	CALLER:String;
	i:Integer;
	//ParamsTmp:TStringList;
	ParamVal:String;


	hashedPwd: boolean;

	//variable du owner

	OWNER_DOMAIN,OWNER_NAME,OWNER_LOG,OWNER_PASS:string;

	//variable du geduser
	GEDUSER_LOGIN,GEDUSER_PASS,LOGIN_NOVAXEL:string;

	//variable pour le contact
	PREFIX,NAME,FIRSTNAME,EMAIL,TEL,ADRESS,ZIP_CODE,REGION,CITY,COUNTRY:string;

begin
	CALLER:='GetParams';
	logger('Appel de  "' + CALLER + '"' ,CALLER,LOG_DEBUG,LogFile);

	Result:=False;

	if not (oNasDomClient.loggedOwner.logged) then
	Begin
		logger('Objet NasDomClient non initialisé, impossible de continuer' ,CALLER,LOG_ERROR,LogFile);
		exit;
	End;

	Try

		//ParamsTmp:=TStringList.Create();

		logger('Nettoyage des paramètres',CALLER,LOG_DEBUG,LogFile);
		try
			// Nettoyage des entrées
			for i := 0 to params.count-1 do
				params[i] := trim(params.names[i]) + '=' + trim(params.values[params.names[i]]);

		Except
			logger('Erreur lors du nettoyage des paramètres : '  + ExceptionParam,CALLER,LOG_ERROR,LogFile);
		Finally
		End;

		// Vérifications des éléments d'environnement pour pouvoir créer tout notre owner + lib, etc... (préalables)
		logger('Chargement de la liste des OWNERS',CALLER,LOG_DEBUG,LogFile);
		if not oNasDomClient.owners.load(False) then
		Begin
			logger('Impossible de charger la liste des Propriétaires de domaine : ' + oNasDomClient.Errcode + ' : ' + oNasDomClient.Errmsg,CALLER,LOG_ERROR,LogFile);
			exit;
		End;

		if (params.Values['login'] = '') or (params.Values['lastname'] = '') or (params.Values['email'] = '') then
		Begin
			RespErrMsg:='Identifiant, Nom ou adresse mail vide, impossible de continuer';
			logger(RespErrMsg ,CALLER,LOG_ERROR,LogFile);
			exit;
		End;

		if not ExecRegExpr(RELoginOk, params.Values['login']) then
		Begin
			RespErrMsg:='"L''identifiant ne correspond pas au format attendu (alphanumérique simple (pas d''accents, de cédille, etc.), point, tiret, soulignement, ...)"';
			logger(RespErrMsg ,CALLER,LOG_ERROR,LogFile);
			exit;
		End;


		logger('Recherche d''un Propriétaire (login OU subdomain) déjà existant pour "' + params.Values['login'] + '"',CALLER,LOG_DEBUG,LogFile);
		if oNasDomClient.owners.find(params.Values['login'])<>nil then
		begin
			RespErrMsg:='Un Propriétaire existe déjà avec cet identifiant (login) "' + params.Values['login'] + '" impossible de continuer';
			logger(RespErrMsg,CALLER,LOG_ERROR,LogFile);
			exit;
		end;

		for i:=0 to oNasDomClient.owners.count-1 do
		begin
			if (lowercase(params.Values['login']) = lowercase(oNasDomClient.owners[i].subdomain)) then
			begin
				RespErrMsg:='Ce nom de domaine "' + params.Values['login'] + '" est déjà utilisé, impossible de continuer';
				logger(RespErrMsg,CALLER,LOG_ERROR,LogFile);
				break;
			end;
		end; 
		
		// FBServer par défaut Ok
		logger('Recherche du serveur FB par défaut en DOMPARAM',CALLER,LOG_DEBUG,LogFile);
		ParamVal:='';
		NASGetDomParamValues(oNasDomClient, 'DOMAIN','ACTIVE_FBSERVER_ID',ParamVal,Nil);
		if trim(ParamVal)='' then
		Begin
			logger('Impossible de trouver le serveur FireBird par défaut à utiliser pour la nouvelle bibliothèque impossible de continuer',CALLER,LOG_ERROR,LogFile);
			exit;
		End;

		logger('Validité du serveur FB (id ' + ParamVal + ') par défaut en DOMPARAM',CALLER,LOG_DEBUG,LogFile);
		if not oNasDomClient.fbservers.load(False) then
		Begin
			logger('Impossible de charger la liste des serveurs Firebird : ' + oNasDomClient.Errcode + ' : ' + oNasDomClient.Errmsg,CALLER,LOG_ERROR,LogFile);
			exit;
		End;
		G_idfbserver:=StrToInt(ParamVal);
		if oNasDomClient.fbservers.GetFromId(G_idfbserver)=nil then
		begin
			logger('Le serveur FireBird par défaut à utiliser pour la nouvelle bibliothèque n''existe pas dans la table TFBSERVER impossible de continuer',CALLER,LOG_ERROR,LogFile);
			exit;
		end;

		// Récupération de l'URL de téléchargement du package novaxecloud (plus obligatoire, donc erreur non fatale)
		ParamVal:='';
		NASGetDomParamValues(oNasDomClient, 'CLOUD_CLIENT','PACKAGE',ParamVal,Nil);
		if trim(ParamVal)='' then
		Begin
			logger('Impossible de trouver l''URL de téléchargement du package Novaxelcloud familly...',CALLER,LOG_WARNING,LogFile);
		End
		Else
			OwnerInfos.add('urlpackage=' + trim(ParamVal));
		
		if params.count>0 then
		begin

			logger('Récupération des informations OWNER passées en paramètres du script' ,CALLER,LOG_DEBUG,LogFile);
			
			//OWNER
			OwnerInfos.add('subdomain=' + params.Values['login']);

			if (params.Values['lastname'] = '') and (params.Values['firstname'] = '') then 
			Begin
				logger('lastname et firstname vides (TOWNER.NAME vide)' ,CALLER,LOG_WARNING,LogFile);
			End;
			OwnerInfos.add('name=' + params.Values['lastname'] + iif(params.Values['firstname']<>'', ' ' + params.Values['firstname'],''));

			OwnerInfos.add('login=' + params.Values['login']);
			
			OwnerInfos.add('passwd=' + params.Values['login'] + StrReplace(DateToStr(Now),'/',''));
			OwnerInfos.values['passwd']:=StrReplace(OwnerInfos.values['passwd'],'-','');

			OwnerInfos.add('comment=' + 'créé par la procédure create_cloud');

			//GedUSER
		{
			// Fait en dur dans la procédure principale
			logger('Init geduser login bib' ,CALLER,LOG_DEBUG,LogFile);
			// TODO : est-ce bien toujours le cas ?
			OwnerInfos.add('geduserloginbib=' + 'NOVAXEL');
		}
			
			logger('Récupération des informations CONTACT passées en paramètres du script' ,CALLER,LOG_DEBUG,LogFile);
			//Contact
			OwnerInfos.add('contactpreffix=' + params.Values['preffix']);
			OwnerInfos.add('contactname=' + params.Values['lastname']);
			OwnerInfos.add('contactfirstname=' + params.Values['firstname']);
			if trim(params.Values['email']) = '' then
				logger('adresse email contact vide, impossible d''envoyer des email !' ,CALLER,LOG_WARNING,LogFile);
			OwnerInfos.add('contactemail=' + params.Values['email']);
			OwnerInfos.add('contacttel=' + params.Values['tel']);
			OwnerInfos.add('contactaddress=' + params.Values['address']);
			OwnerInfos.add('contactzipcode=' + params.Values['zipcode']);
			OwnerInfos.add('contactregion='); // + trim(params.Values['region']));
			OwnerInfos.add('contactcity=' + params.Values['city']);
			OwnerInfos.add('contactcountry=');// + trim(params.Values['email']));

		end
		else // TODO je suppose que c'est pour Paypal ???
		begin
			hashedPwd := false;
			
			//OWNER
			OWNER_DOMAIN:='MARTIN';
			OWNER_NAME:='Martin SARL';  
			OWNER_LOG:='martin';
			OWNER_PASS:='';
			
			//GedUSER
			GEDUSER_LOGIN:=OWNER_LOG;
			GEDUSER_PASS:=OWNER_PASS;
			LOGIN_NOVAXEL:='NOVAXEL';
			
			//Contact
			PREFIX:='';
			NAME:=OWNER_NAME;
			FIRSTNAME:='';
			EMAIL:='';
			TEL:='';
			ADRESS:='';
			ZIP_CODE:='';
			REGION:='';
			CITY:='';
			COUNTRY:=''; 
		end;

		Result:=True;

	Except
		logger('Erreur dans "' + CALLER + '" : ' + ExceptionParam ,CALLER,LOG_DEBUG,LogFile);

	Finally

	End;
end;

{
	Ajout d'un paramètre GED à un OWNER...
}
Function SET_OWNER_PARAMVALUE(Owner:TOwner;SECTION,NAME,VALUE,COMMENT:string;PARAMTYPE:integer):TGedParamValue;
var
	oParam:TGedParamValue;
	ajout:Boolean;
	CALLER:String;

begin
	CALLER:='SET_OWNER_PARAMVALUE';

	logger('Appel de  "' + CALLER + '"' ,CALLER,LOG_INFO,LogFile);

    result := nil;

	ajout:=False;

	if not Owner.gedparamvalues.load(False) then
	begin
		logger('Impossible de charger la liste des Paramètres pour le Propriétaire "' + Owner.login + '" : ' + TNasDomClient(Owner.NasDomClient).Errcode + ' : ' + TNasDomClient(Owner.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;

	oParam:=Owner.gedparamvalues.find(SECTION,NAME);

	if oParam=nil then //    // CREATION d'un paramètre
	begin 
		logger('Création de "' + SECTION + ' - ' + NAME + '" pour le Propriétaire "' + Owner.login + '"' ,CALLER,LOG_DEBUG,LogFile);
		oParam := TGedParamValue.Create(TNasDomClient(Owner.NasDomClient));
		ajout:=True;
	end
	Else
		logger('Mise à jour de "' + SECTION + ' - ' + NAME + '" pour le Propriétaire "' + Owner.login + '"' ,CALLER,LOG_DEBUG,LogFile);

	oParam.Section:=SECTION;
	oParam.name:=NAME;
	oParam.Value:=VALUE;
	oParam.comment:=COMMENT;
	oParam.ParamType:=PARAMTYPE;

	if Ajout then
		Ajout:= Owner.gedparamvalues.add(oParam)
	else
		Ajout:=oParam.update;

	if not ajout then
	begin
		logger('Impossible d''ajouter ou mettre à jour le paramètre "' + SECTION + ' - ' + NAME + '" pour le Propriétaire "' + Owner.login + '"" : ' + TNasDomClient(Owner.NasDomClient).Errcode+ ' : ' + TNasDomClient(Owner.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;
end;



{
	Création d'un Owner
	Renvoi l'objet TOwner correspondant
}
Function Add_OWNER(ONasDomAdmin:TNasDomClient;OwnerInfos:TStringList):TOwner;
Var
	CALLER:String;
	NewOwner:TOwner;
begin

	CALLER:='Add_OWNER';
	logger('Appel de  "' + CALLER + '"' ,CALLER,LOG_INFO,LogFile);

    result := Nil;

	if not (ONasDomAdmin.loggedOwner.logged) then
	Begin
		logger('Objet NasDomClient non initialisé, impossible de continuer' ,CALLER,LOG_ERROR,LogFile);
		exit;
	End;

	if not (ONasDomAdmin.loggedOwner.isAdmin) then
	Begin
		logger('Objet NasDomClient non initialisé sur un administrateur du domaine (nécessaire pour la création d''un OWNER), impossible de continuer' ,CALLER,LOG_ERROR,LogFile);
		exit;
	End;

	logger('Création du Propriétaire',CALLER,LOG_DEBUG,LogFile);
    NewOwner:=TOwner.Create(ONasDomAdmin);
    NewOwner.subdomain:=OwnerInfos.Values['subdomain'];
    NewOwner.name:=OwnerInfos.Values['name'];
    NewOwner.login:=OwnerInfos.Values['login'];
    NewOwner.comment:=OwnerInfos.Values['comment'];
    
    if not ONasDomAdmin.owners.Add(NewOwner,OwnerInfos.Values['passwd']) then
    begin
		logger('Erreur lors de l''ajout du Propriétaire "' + OwnerInfos.Values['login'] + '" : ' + ONasDomAdmin.Errcode + ' : ' + ONasDomAdmin.Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
    end;    

	logger('Création du Contact principal du Propriétaire',CALLER,LOG_DEBUG,LogFile);
    // Définition du contact   
    NewOwner.Contact.Prefix:=OwnerInfos.Values['contactpreffix'];
    NewOwner.Contact.Name := OwnerInfos.Values['contactname'];
    NewOwner.Contact.FirstName:=OwnerInfos.Values['contactfirstname'];
    NewOwner.Contact.Email:=OwnerInfos.Values['contactemail'];
    NewOwner.Contact.Tel:=OwnerInfos.Values['contacttel']
    NewOwner.Contact.Address:=OwnerInfos.Values['contactaddress'];
    NewOwner.Contact.Zip_Code:=OwnerInfos.Values['contactzipcode'];
    NewOwner.Contact.Region:=OwnerInfos.Values['contactregion'];
    NewOwner.Contact.City:=OwnerInfos.Values['contactcity'];
    NewOwner.Contact.Country:=OwnerInfos.Values['contactcountry'];
    if not newOwner.contact.update then
    begin
		logger('Erreur lors de l''ajout du Contact principal du Propriétaire "' + OwnerInfos.Values['login'] + '" : ' + ONasDomAdmin.Errcode + ' : ' + ONasDomAdmin.Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
    end
	Else
		logger('Contact principal du Propriétaire créé avec ID N°' + IntToStr(NewOwner.Contact.Id),CALLER,LOG_DEBUG,LogFile);

    SET_OWNER_PARAMVALUE(newOwner,'LICENCE','PANIERES_WEB_DOSSIER','1','',clParam_Boolean );
    SET_OWNER_PARAMVALUE(newOwner,'LICENCE','TYPE','FAMILY','',clParam_choice);
    
    Result:=NewOwner;
end;


Function ADD_LIB(oOwner:TOwner):TLibrary;
var
	oLibrary:TLibrary;
	OGconttype,Oconttype:TContType;
	oContact:TContact;
	CALLER:String;
begin

	CALLER:='ADD_LIB';
	logger('Appel de  "' + CALLER + '"' ,CALLER,LOG_INFO,LogFile);

    result := Nil;

	if not oOwner.Libraries.load(False) then 
	begin
		logger('Impossible de charger la liste des bibliothèques du Propriétaire "' + oOwner.login + '" : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;
        
	logger('Initialisation de la Bibliothèque' ,CALLER,LOG_DEBUG,LogFile);
	oLibrary:=TLibrary.Create(TNasDomClient(oOwner.NasDomClient));
	oLibrary.Title:='';                                         //<------- à Renseigner par la suite
	oLibrary.comment:='créé par la procédure create_cloud';
	oLibrary.guid:='';                                           //<------- à Renseigner par la suite
	oLibrary.Chargeable:=True;
	oLibrary.Subscribe_Start:=Date();
	oLibrary.Subscribe_End:=Date()+365;
	oLibrary.FbServer_Id:= G_idfbserver;
	oLibrary.dbpath:='tmp';										//<------- à Renseigner par la suite
//	oLibrary.Access_Mode:=1;										// Mode dépose de document par défaut (TODO après réflexion ;-) 
 
	if not oOwner.libraries.add(oLibrary) then
	begin
		logger('Impossible d''associer la bibliothèque au Propriétaire "' + oOwner.login + '" : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end
	Else
		logger('Bibliothèque créée avec ID N°' + IntToStr(oLibrary.Id),CALLER,LOG_DEBUG,LogFile);


	// Mise à jour des informations après création...
	logger('Mise à jour des informations de la bibliothèque N° ' + IntTostr(oLibrary.id) ,CALLER,LOG_DEBUG,LogFile);
	oLibrary.Title:='BIB'+padleft(intTostr(oLibrary.id),10,'0');
	oLibrary.dbpath:=padleft(intTostr(oLibrary.id),10,'0'); // Si le dbpath n'est pas absolu, le NAS rajoute automatiquement fbserver.librootpath et owner.id (paddé sur 10)
	if not oLibrary.update then
	begin
		logger('Impossible de mettre à jour les  informations de la bibliothèque"' + IntToStr(oLibrary.id) + '" : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;
	
	// La suite n'est pas "vitale"
	result:=oLibrary;

	logger('Initialisation de l''association Bibliothèque/contact' ,CALLER,LOG_DEBUG,LogFile);
	//paramètres de suivi
	if not TNasDomClient(oOwner.NasDomClient).ContTypes.load(True) then
	Begin
		logger('Impossible de charger la liste des types de contact : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_WARNING,LogFile);
		exit;
	End;
   
	//on ajoute le contact du owner à la bibliothèque avec un type Technique
	if not oLibrary.contacts.load(True) then
	Begin
		logger('Impossible de charger la liste des contacts de la bibliothèque "' + oLibrary.Title + '" : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_WARNING,LogFile);
		exit;
	End;

	logger('Recherche du type de contact "Technique"' ,CALLER,LOG_DEBUG,LogFile);
	OGconttype:=TNasDomClient(oOwner.NasDomClient).ContTypes.Find('Technique');
	if OGconttype<>nil then
	begin
		logger('Ajout du contact à la Bibliothèque' ,CALLER,LOG_DEBUG,LogFile);
		if oLibrary.Contacts.Add(oOwner.Contact) then
		begin
			logger('Ajout du Type de contact "Technique" (ID N°' + IntToStr(OGconttype.id) + '), avec le contact N°' + IntToStr(oOwner.Contact.id) + ' à la bibliothèque' ,CALLER,LOG_DEBUG,LogFile);

			// Création d'un type de contact pour l'associer à la lib (pas évident, mais compréhensible ;-) )
			Oconttype := TConttype.Create(TNasDomClient(oOwner.NasDomClient));
			Oconttype.id := OGconttype.id;
			Oconttype.Name := OGconttype.Name;
			Oconttype.SyncSendmail:=clSync_sendmail_always;

			logger('Récupération du contact Bibliothèque pour lui affecter le type "' + Oconttype.Name + '"' ,CALLER,LOG_DEBUG,LogFile);

			oContact:=oLibrary.Contacts.GetFromId(oOwner.Contact.id);

			logger('Affectation finale du contact N° ' + IntToStr(oContact.id) + ' avec le type "' + Oconttype.Name + '" à la bibliothèque "' + oLibrary.Title + '"' ,CALLER,LOG_DEBUG,LogFile);
			if not oContact.ContTypes.Add(Oconttype) then
			begin
				logger('Impossible d''ajouter le Type de contact au contact de la bibliothèque : ' + oLibrary.Title + ' : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_WARNING,LogFile);
			end
			Else
				logger('Contact N°' + IntToStr(oContact.id) + ' avec le type N°' + IntToStr(Oconttype.id) + ' (et l''envoi de mail ' + IntToStr(Oconttype.SyncSendmail) + ') associé à Bibliothèque ID N°' + IntToStr(oLibrary.Id),CALLER,LOG_DEBUG,LogFile);
		end
		Else
			logger('Impossible d''ajouter le contact à la bibliothèque : ' + oLibrary.Title + ' : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_WARNING,LogFile);
	end
	else
		logger('Impossible de trouver le type de contact "Technique"' ,CALLER,LOG_WARNING,LogFile);
		
end;

Function Add_PROFILE_OWNER(oOwner:TOwner; Name,comment:string):TProfile;
var
    oProfile: TProfile;
	CALLER:String;
begin

	CALLER:='Add_PROFILE_OWNER';
	logger('Appel de  "' + CALLER + '"' ,CALLER,LOG_INFO,LogFile);

    result := Nil;

	if not oOwner.Libraries.load(False) then 
	begin
		logger('Impossible de charger la liste des bibliothèques du Propriétaire "' + oOwner.login + '" : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;

	if not oOwner.Profiles.load(False) then 
	begin
		logger('Impossible de charger la liste des profiles du Propriétaire "' + oOwner.login + '" : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;

	if oOwner.Profiles.find(name)<>nil then
	begin
		logger('Le profil "' + name + '" existe déjà pour ce Propriétaire "' + oOwner.login + '" : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;

	logger('Création effective du profil "' + name + '"' ,CALLER,LOG_DEBUG,LogFile);

	oProfile := TProfile.Create(TNasDomClient(oOwner.NasDomClient));
	oProfile.Name := Name;
	oProfile.comment:=Comment;
        
	if not oOwner.Profiles.Add(oProfile) then
	Begin
		logger('Impossible d''associer Le profil "' + name + '" au Propriétaire "' + oOwner.login + '" : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	End;

	Result:=oProfile;
end;

Function SET_PROFIL_PARAMVALUE(oProfile:TProfile;SECTION,NAME,VALUE,COMMENT:string;PARAMTYPE:integer):TGedParamValue;
var
	oParam:TGedParamValue;
	ajout:boolean;
	CALLER:String;

begin

	CALLER:='SET_PROFIL_PARAMVALUE';
	logger('Appel de  "' + CALLER + '"' ,CALLER,LOG_INFO,LogFile);

	result:=Nil;

	ajout:=False;

	if not oProfile.gedparamvalues.load(False) then
	begin
		logger('Impossible de charger la liste des paramètre du Profil "' + oProfile.name + '" : ' + TNasDomClient(oProfile.NasDomClient).Errcode + ' : ' + TNasDomClient(oProfile.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;

	oParam:=oPRofile.gedparamvalues.find(SECTION,NAME);

	if oParam=nil then //    // CREATION d'un paramètre
	begin 
		logger('Création de "' + SECTION + ' - ' + NAME + '" dans le Profil "' + oProfile.name + '"' ,CALLER,LOG_DEBUG,LogFile);
		oParam := TGedParamValue.Create(TNasDomClient(oProfile.NasDomClient));
		ajout:=True;
	end
	else
		logger('mise à jour de "' + SECTION + ' - ' + NAME + '" dans le Profil "' + oProfile.name + '"' ,CALLER,LOG_DEBUG,LogFile);

	logger('Initialisation du paramètre "' + SECTION + ' - ' + NAME + '"' ,CALLER,LOG_DEBUG,LogFile);
	oParam.Section:=SECTION;
	oParam.name:=NAME;
	oParam.Value:=VALUE;
	oParam.comment:=COMMENT;
	oParam.ParamType:=PARAMTYPE;
	
	if Ajout then
		Ajout:= oPRofile.gedparamvalues.add(oParam)
	else
		Ajout:=oParam.update;

	if not ajout then
	begin
		logger('Impossible d''ajouter ou mettre à jour le paramètre "' + SECTION + ' - ' + NAME + '" dans le Profil "' + oProfile.name + '" : ' + TNasDomClient(oProfile.NasDomClient).Errcode + ' : ' + TNasDomClient(oProfile.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;

	Result:=oParam;
  
end;

Function Add_USER(oOwner:TOwner;oProfile:TProfile;login,password,comment:string):TGedUser;
var
    oUser:TGedUser;
	CALLER:String;

begin

	CALLER:='Add_USER';
	logger('Appel de  "' + CALLER + '"' ,CALLER,LOG_INFO,LogFile);

    result := nil;

	if not oOwner.GedUsers.load(False) then
	begin
		logger('Impossible de charger la liste des Utilisateurs GED pour le Propriétaire"' + oOwner.name + '" : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;

	if oOwner.GedUsers.find(login)<>nil then
	begin
		logger('L''tilisateurs GED "' + login + '" existe déjà pour le Propriétaire"' + oOwner.name + '"',CALLER,LOG_ERROR,LogFile);
		exit;
	End;
        
	// Le profil n'est pas obligatoire  pour la création d'un User
	if oprofile<>nil then
	begin
		logger('Un Profile est passé, on vérifie l''appartenance au Propriétaire' ,CALLER,LOG_DEBUG,LogFile);

		if not oOwner.Profiles.load(False) then 
		begin
			logger('Impossible de charger la liste des profiles pour le Propriétaire"' + oOwner.name + '" (pour vérification d''appartenance) : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
			exit;
		end;
		if oOwner.Profiles.GetFromId(oProfile.Id) =nil then
		begin
			logger('Le Profil "' + oProfile.name + '" semble ne pas appartenir au Propriétaire "' + oOwner.login + '"',CALLER,LOG_ERROR,LogFile);
			exit;
		end
		Else
			logger('Le Profil "' + oProfile.name + '" appartient bien au Propriétaire "' + oOwner.login + '"',CALLER,LOG_DEBUG,LogFile);
	end;  
    
        
	logger('Création effective de l''utilisateur "' + login + '"',CALLER,LOG_DEBUG,LogFile);
	oUser := TGedUser.Create(TNasDomClient(oOwner.NasDomClient));
	oUser.login:=login;
	oUser.comment:=Comment;
	oUSer.Profile_Id:=iif(oProfile<>Nil, oProfile.id,0);
	
	if not oOwner.GedUsers.Add(oUser,password) then
	begin
		logger('Impossible de créer et d''associer l''utililsateur GED "' + login + '" au Propriétaire "' + oOwner.login + '" : ' + TNasDomClient(oOwner.NasDomClient).Errcode + ' : ' + TNasDomClient(oOwner.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;

	Result:=oUser;

end;

// Ajout d'un paramètre GED direct pour une utilisateur (ie. hors Profile)
Function SET_USER_PARAMVALUE(oUser:TGedUser;SECTION,NAME,VALUE,COMMENT:string;PARAMTYPE:integer):TGedParamValue;
var
	oParam:TGedParamValue;
	ajout:boolean;
	CALLER:String;

begin

	CALLER:='SET_USER_PARAMVALUE';
	logger('Appel de  "' + CALLER + '"' ,CALLER,LOG_INFO,LogFile);

    result := nil;

	ajout:=False;

	if not oUser.gedparamvalues.load(False) then
	begin
		logger('Impossible de charger la liste des Paramètres pour l''Utilisateurs GED "' + oUser.login + '" : ' + TNasDomClient(oUser.NasDomClient).Errcode + ' : ' + TNasDomClient(oUser.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;

	oParam:=oUser.gedparamvalues.find(SECTION,NAME);

	if oParam=nil then //    // CREATION d'un paramètre
	begin 
		logger('Création de "' + SECTION + ' - ' + NAME + '" pour l''Utilisateurs GED "' + oUser.login + '"' ,CALLER,LOG_DEBUG,LogFile);
		oParam := TGedParamValue.Create(TNasDomClient(oUser.NasDomClient));
		ajout:=True;
	end
	Else
		logger('Mise à jour de "' + SECTION + ' - ' + NAME + '" pour l''Utilisateurs GED "' + oUser.login+ '"' ,CALLER,LOG_DEBUG,LogFile);
	
	oParam.Section:=SECTION;
	oParam.name:=NAME;
	oParam.Value:=VALUE;
	oParam.comment:=COMMENT;
	oParam.ParamType:=PARAMTYPE;
	
	if Ajout then
		Ajout:= oUser.gedparamvalues.add(oParam)
	else
		Ajout:=oParam.update;

	if not ajout then
	begin
		logger('Impossible d''ajouter ou mettre à jour le paramètre "' + SECTION + ' - ' + NAME + '" pour l''Utilisateurs GED "' + oUser.login + '" : ' + TNasDomClient(oUser.NasDomClient).Errcode+ ' : ' + TNasDomClient(oUser.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;

	Result:=oParam;
  
end;

Function SET_BIB_USER(oUser:TGedUser;oLibrary:TLibrary):boolean;
var
	CALLER:String;

begin

	CALLER:='SET_BIB_USER';
	logger('Appel de  "' + CALLER + '"' ,CALLER,LOG_INFO,LogFile);

    Result:=False;

	if not oUser.Id=0 then
	begin
		logger('Paramètre oUser passé incorrect',CALLER,LOG_ERROR,LogFile);
		exit;
	end;

	if not oLibrary.Id=0 then
	begin
		logger('Paramètre oLibrary passé incorrect',CALLER,LOG_ERROR,LogFile);
		exit;
	end;

	logger('Association de la Bibliothèque "' + oLibrary.Title + '" à l''utilisateur "' +  + oUser.login+ '"' ,CALLER,LOG_DEBUG,LogFile);
    // Ajout sans Profil library    
	Result:=oUser.AddLib(oLibrary.id,0);

	if not Result then
	begin
		logger('Impossible d''associer la Bibliothèque "' + oLibrary.Title + '" à l''utilisateur "' +  + oUser.login+ '" : ' + TNasDomClient(oUser.NasDomClient).Errcode + ' : ' + TNasDomClient(oUser.NasDomClient).Errmsg,CALLER,LOG_ERROR,LogFile);
		exit;
	end;

end;

{
	Permet de libérer les ressources globales de ce script ET des scripts include par ailleurs
	Doit être appelé volontairement par les scripts utilisant ce script (mode collaboratir)
}
Procedure FreecloudRes;
Begin
	FreeNASRes;
End;


function create_cloud():Boolean; //; PaypalInfos:TStringList
Var
	oNasDomClient:TNasDomClient;

	NAS_URL:String;
	CALLER:String;

	ScriptParams : TScriptParams;
	ScriptResults: TScriptResult;
	OwnerInfos, LstVar:TStringList;

	oOwner:TOwner;
	oLib:Tlibrary;
	oProfile:TProfile;
	oParam:TgedParamValue;
	oUser:TGedUser;

	fileresult, htmlBuffer, htmlfilename:String;
	creationOk: boolean;

Begin

	CALLER:='create_cloud';
	Result:=False;


	Scriptresults:= TScriptResult.Create();
	ScriptParams := TScriptParams.Create();

	logger('ScriptParams Ok :  "' + BoolToStr(ScriptParams<>Nil,BOOLSTR) + '"' ,CALLER,LOG_DEBUG,LogFile);
	logger('Scriptresults Ok :  "' + BoolToStr(Scriptresults<>Nil,BOOLSTR) + '"' ,CALLER,LOG_DEBUG,LogFile);

	creationok := false;                       

	OwnerInfos:=Nil;LstVar:=Nil;

	oOwner:=Nil;
	oLib:=Nil;
	oProfile:=Nil;
	oParam:=Nil;
	oUser:=Nil;

	oNasDomClient:=TNasDomClient.Create();
	
	try  

		// Cette procédure est sensée être appelé depuis un script exécuté en exec_script_url...
		if ScriptParams.paramsFilename='' then
		Begin
			logger('Appel hors contexte Script NAS' ,CALLER,LOG_DEBUG,LogFile);
			SetExitCode(1);
			exit;
		End;

		// Vérification du template présent
		if not FileExists(template_result) then
		Begin
			RespErrMsg:='Le modèle de réponse "' + template_result + '" est introuvable ! On ne pourra pas renvoyer de fichier de réponse';
			logger(RespErrMsg,CALLER,LOG_ERROR,LogFile);
			exit;
		End
		Else
		Begin
			htmlFilename:=template_result;
			// Recherche du placeholder où placer notre retour
			if not ExecRegExpr(QuoteRegExprMetaChars(PH_html_result), LitFichier(htmlFilename)) then
			Begin
				RespErrMsg:='Le modèle de réponse "' + template_result + '" est présent mais inutilisable car il ne contient pas le placeholder "' + PH_html_result + '"';
				logger(RespErrMsg,CALLER,LOG_ERROR,LogFile);
				exit;
			End;
		End;

		logger('Fichier HTML de réponse :  "' + htmlFilename + '"' ,CALLER,LOG_DEBUG,LogFile);

		OwnerInfos:=TStringList.create();

		NAS_URL:=GetNASHost('');
		logger('Connexion au NAS :  "' + NAS_URL + '"' ,CALLER,LOG_DEBUG,LogFile);
		if not NASConnect(oNasDomClient, NAS_URL) then
		Begin
			logger('Impossible de se connecter sur le serveur "' + NAS_URL + '"' ,CALLER,LOG_ERROR,LogFile);
			Exit;
		End;

		logger('Authentification NAS :  "' + ScriptParams.OwnerLogin + '"' ,CALLER,LOG_DEBUG,LogFile);
		if not NASLogin(oNasDomClient,ScriptParams.OwnerLogin,ScriptParams.OwnerPasswd, False) then
		Begin
			logger('Impossible de s''authentifier sur le serveur NAS "' + NAS_URL + '" en tant que "' + ScriptParams.OwnerLogin + '"' ,CALLER,LOG_ERROR,LogFile);
			Exit;
		End;

		if not GetParams(oNasDomClient, ScriptParams.paramsList, OwnerInfos) then exit;

		logger('Ajout OWNER' ,CALLER,LOG_DEBUG,LogFile);
		oOwner:=Add_OWNER(oNasDomClient, OwnerInfos);
		if oOwner=Nil then
		Begin
			logger('Impossible d''ajouter le Propriétaire : "' + ScriptParams.paramsList.Values['login'] + '"' ,CALLER,LOG_ERROR,LogFile);
			Exit;
		End;

		logger('Ajout LIBRARY' ,CALLER,LOG_DEBUG,LogFile);
		oLib:=ADD_LIB(oOwner);
		if oOwner=Nil then
		Begin
			logger('Impossible d''ajouter la Bibliothèque pour le Propriétaire : "' + ScriptParams.paramsList.Values['login'] + '"' ,CALLER,LOG_ERROR,LogFile);
			Exit;
		End;

		logger('Ajout PROFILE Consultation' ,CALLER,LOG_DEBUG,LogFile);
		oProfile:=Add_PROFILE_OWNER(oOwner,'Consultation','Profil de consultation');
		if oProfile=Nil then
		Begin
			logger('Impossible d''ajouter le Profil "Consultation" pour le Propriétaire : "' + ScriptParams.paramsList.Values['login'] + '"' ,CALLER,LOG_ERROR,LogFile);
			Exit;
		End;
		
		logger('Ajout PARAMGEDS dans PROFILE "' + oProfile.name + '"' ,CALLER,LOG_DEBUG,LogFile);
		Try
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','ADMINISTRER','0','',clParam_Boolean);
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - ADMINISTRER');
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','AJOUTER','0','',clParam_Boolean);
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - AJOUTER');
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','MODIFIER','0','',clParam_Boolean);    
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - MODIFIER');
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','PURGER','0','',clParam_Boolean);    
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - PURGER');
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','SUPPRIMER','0','',clParam_Boolean);
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - SUPPRIMER');
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','CONSULTER','1','',clParam_Boolean);
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - CONSULTER');
		Except
			logger('Erreur lors de l''ajout du paramètre "' + ExceptionParam + '" dans le Profil "' + oProfile.Name + '"'   ,CALLER,LOG_ERROR,LogFile);
			Exit;
		End;

		logger('Ajout PROFILE Edition' ,CALLER,LOG_DEBUG,LogFile);
		oProfile:=Add_PROFILE_OWNER(oOwner,'Edition','Profil d''édition');
		if oProfile=Nil then
		Begin
			logger('Impossible d''ajouter le Profil "Edition" pour le Propriétaire : "' + ScriptParams.paramsList.Values['login'] + '"' ,CALLER,LOG_ERROR,LogFile);
			Exit;
		End;
  
		logger('Ajout PARAMGEDS dans PROFILE "' + oProfile.name + '"' ,CALLER,LOG_DEBUG,LogFile);
		Try
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','ADMINISTRER','0','',clParam_Boolean);
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - ADMINISTRER');
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','AJOUTER','1','',clParam_Boolean);
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - AJOUTER');
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','MODIFIER','1','',clParam_Boolean);
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - MODIFIER');
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','PURGER','1','',clParam_Boolean);
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - PURGER');
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','SUPPRIMER','1','',clParam_Boolean);
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - SUPPRIMER');
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','CONSULTER','1','',clParam_Boolean);
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - CONSULTER');
			oParam:=SET_PROFIL_PARAMVALUE(oProfile,'DROITS','PANIERES_WEB_DOSSIER','1','',clParam_Boolean);
			if oParam=Nil then RaiseException(erCustomError, 'DROITS - PANIERES_WEB_DOSSIER');

		Except
			logger('Erreur lors de l''ajout du paramètre "' + ExceptionParam + '" dans le Profil "' + oProfile.Name + '"'   ,CALLER,LOG_ERROR,LogFile);
			Exit;
		End;
			
		//On ajoute un utilisateur (login + password idem Owner) et ses paramètres
		logger('Ajout GEDUSER' ,CALLER,LOG_DEBUG,LogFile);
		oUser:=Add_USER(oOwner, oProfile,OwnerInfos.values['login'],OwnerInfos.values['passwd'],'');
		if oUser=Nil then
		Begin
			logger('Impossible d''ajouter l''utilisateur pour le Propriétaire : "' + ScriptParams.paramsList.Values['login'] + '"' ,CALLER,LOG_ERROR,LogFile);
			Exit;
		End;

		logger('Ajout PARAMGEDS direct pour GEDUSER' ,CALLER,LOG_DEBUG,LogFile);
		oParam:=SET_USER_PARAMVALUE(oUser,'CONNEXION','UTILISATEUR_BIB','NOVAXEL','Utilisateur de la bib Novaxel',clParam_Alpha);
		oParam:=SET_USER_PARAMVALUE(oUser,'INTERFACE','FOND','','Image de fond',clParam_Image);
		
		//on associe la bib à cet utilisateur
		logger('Ajout GEDUSER A LIBRARY' ,CALLER,LOG_DEBUG,LogFile);
		if not SET_BIB_USER(oUser,oLib) then 
		Begin
			logger('Impossible d''associer l''utilisateur "' + oUser.login + '" à la Bibliothèque "' + oLib.Title + '"' ,CALLER,LOG_ERROR,LogFile);
			Exit;
		End;

		creationok := true;
	finally

		fileresult := extractfilepath(ScriptParams.paramsFilename)+'response.html';
		// Si déjà existant
		deleteFile(fileresult);

		Try
			LstVar:=TStringList.Create();
			Scriptresults.mimetype:='text/html';

			if (creationOk) then
			begin
				logger('Création Ok : Renvoi des fichier HTML et Mail' ,CALLER,LOG_DEBUG,LogFile);
				// on génère à partir du modèle un fichier html de confirmation de paiement qui sera affiché au client 
				LstVar.Add('OWNER_NAME=' + OwnerInfos.Values['name']);
				LstVar.Add('OWNER_LOGIN=' + OwnerInfos.Values['login']);
				LstVar.Add('OWNER_PASS=' + OwnerInfos.Values['passwd']);
				LstVar.Add('OWNER_DOMAIN=' + OwnerInfos.Values['subdomain']);
				LstVar.Add('CLOUD_CLIENT_PACKAGE_URL=' + OwnerInfos.Values['urlpackage']);

				htmlBuffer:=ParseText(HTML_Ok,'@@',LstVar,False);
				//logger('Parse de : ' + CRLF + HTML_Ok +CRLF + 'Donne : ' + CRLF + htmlBuffer ,CALLER,LOG_DEBUG,LogFile);

				//htmlBuffer:= LitFichier(htmlFilename);

				//logger('Parse HTML final : ' + CRLF + htmlBuffer ,CALLER,LOG_DEBUG,LogFile);
				
				LstVar.Clear; 
				LstVar.Add(PH_html_result + '=' + htmlBuffer);
				htmlBuffer:=ParseText(trim(LitFichier(htmlFilename)),'%%',LstVar,True);

				EcritFichier(htmlBuffer,fileresult);
				Scriptresults.ResponseFile:=fileresult;

				SendMailCreateCloud(oOwner, htmlBuffer);
				//Scriptresults.errmsg:='<p>Erreur de création de compte Cloud</p>';
			end    
			else
			begin
				logger('Création KO : ' + RespErrMsg,CALLER,LOG_DEBUG,LogFile);
				
				//fileresult:=extractfilepath(ScriptParams.paramsFilename)+'result.json';
				//EcritFichierUTF8('{"creation_ok":false, "errmsg":"' + DateTimeTostr(now) + '"}' ,fileresult);
				//Scriptresults.mimetype:='application/json';
				//LstVar.Add('ERROR=' + iif(RespErrMsg<>'',RespErrMsg,'Erreur technique durant la création du compte'));

				//htmlBuffer:=ParseText(HTML_Ko,'@@',LstVar,False);
				Scriptresults.Errmsg:=RespErrMsg;
			end;

			Scriptresults.savetofile;
		Except
			logger('Erreur : ' + exceptionparam,CALLER,LOG_ERROR,LogFile);
			
		End;


		Scriptresults.Free();
		ScriptParams.Free();

		if OwnerInfos <> Nil Then OwnerInfos.Free();
		if LstVar <> Nil then LstVar.Free();


		Try
			// TODO : à voir car il reste un "access violation" sur la libération d'un de ces objets...
			if oProfile<>Nil then oProfile.Free();
			if oLib <> Nil then oLib.Free();
			if oParam <> Nil then oParam.Free();
			if oUser <> Nil then oUser.Free();
			if oOwner <> Nil then oOwner.Free();
			if oNasDomClient<> Nil then
			Begin
				oNasDomClient.domainLogout;
				oNasDomClient.Close;
				oNasDomClient.free;
			End;
		Except
			logger('Erreur lors de la libération des ressources: ' + ExceptionParam ,CALLER,LOG_ERROR,LogFile);
		End;


	end;

	Result:=CreationOk;
	logger('Fin de "' + CALLER + '"' ,CALLER,LOG_INFO,LogFile);
End;

