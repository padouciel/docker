// {$DEFINE DEBUG}


{
Version 1.0.0.0 : initiale

Version 1.0.1.0 : 
	- On ne test un serveur SMTP local que si nous sommes sur un de nos serveurs Cloud (ie pas en on premise ou autre)
	- On ne Réinitialise le password que si le mail est bien parti (choix discutable, mais option prise)

Version 1.0.1.1
	- Moteur script 1.3.5 (14.2) : Gedparamvalues.AsString => Gedparamvalues.AsBLOB
}

// Réinitialisaiton d'un mot de passe utilisateur GED
program reinit_password;


Const

     Version='1.0.1.1';
                     
	// Identification de la procédure en cours dans les logs, etc...
	CALLER='reinit_password_geduser';

	{
	Le client WEB nous renvoie une URL du NAS (cf. nas_url en procédure principale), mais il possible que cette URL soit inaccessible depuis la machine faisant tourner ce script :
	- Nom d'hôte différent
	- Port différent entre accès externe (client WEB) et interne (machine faisant tourner ce script)
	- etc...

	Dans ce cas, la connexion au NAS (cf. Proc NASConnect plus loin) échouera

	on paramètre donc ici une URL d'accès "de secours" au NAS qui sera évalué sur l'URL fournie par le script échoue
	Par défaut localhost sur le port 80...
	}
	NAS_URL_SEC='http://localhost:80';

	// Chemin pointant vers un répertoire contenant les CA Racines
	// attention, nécessaire sous Linux si la validation des certificats SSL est actives
	NAS_SSL_CAPATH = '/etc/ssl/certs';

	// liste des hôtes Novaxel Cloud (séparés par espace) tel que résolu *localement* par l'hôte exécutant ce script...
	NAS_NOVAXEL='nas.novaxelcloud.local www.cloudnovaxel.fr';

	// Param SMTP par défaut si hôte serveur Novaxel Cloud
	NAS_SMTP_HOST='localhost';
	NAS_SMTP_PORT = '25';
	NAS_SMTP_USER = '';
	NAS_SMTP_PASSWD = '';
	NAS_SMTP_SSLTYPE = 0;

	// Comportement SSL par défaut
	NAS_HOST_SSL_SELF_SIGNED_Ok=True;
	NAS_HOST_SSL_VALID_CERTIF=true;


	
	// Email par défaut (si non trouvé en TDOMPARAM)
	EMAIL_SUBJECT='[%%domain_name%%] - Réinitialisation de votre mode de passe';
	EMAIL_TXT='Bonjour %%cont_prefix%% %%cont_firstname%% %%cont_name%%,' + CRLF + CRLF + CRLF +
	'Une demande de réinitialisation de mot de passe concernant votre compte "%%geduser_login%%" vient d''être effectuée...' + CRLF + CRLF +
	'- Votre nouveau mot de passe est : %%geduser_password%%' + CRLF + CRLF +
	'Si vous n''êtes pas à l''origine de cette demande, connectez-vous immédiatement sur le site %%domain_url%% et modifiez à nouveau votre mot de passe.' + CRLF +
	'Vous devriez aussi avertir l''administrateur %%admin_email%%.' + CRLF + CRLF + 
	'--' + CRLF + 
	'Cordialement,' + CRLF +
	'L''administrateur du domaine Novaxel "%%domain_name%%"' + CRLF +
	'%%admin_email%%';

	// Délimiteur de macro par défaut
	LOC_PARSER_DELIM='%%';

	// Gedparam contenant le serveur SMTP Owner
	SMTP_GP_SECTION='REGLAGE';
	SMTP_GP_NAME='SMTP';

	// Niveaux de logs
	LOG_INFO=0;
	LOG_ERROR=1;
	LOG_DEBUG=2;
	LOG_WARNING=3;

	// Type de retour pour BoolToStr :
	BOOLNUM=0;
	BOOLSTR=1;



var
    SCParams : TScriptParams;
	SCResults: TScriptResult;
//    i:Integer;
    fileresult:String;
	oNasDomClient:TNasDomClient;
	login, email, subdomain, passwd, nas_url:String;
	oGedUser:TGedUser;

	oNovSendSMTP:TNovSendSMTP;

	oOwner:TOwner;

	// GetHostname...
	hostname:String;

	LogFile:String;

function Iif(expr:boolean;IfTrue:Variant ; IfFalse: Variant):Variant;
Begin
	if expr then result := IfTrue Else result := IfFalse;
End;


{
	Renvoie une chaine exprimant une valeur  booléenne
	Si Type = BoolNum (0) : 0/1
	Si Type = BoolStr (1) : True/False
}
Function BoolToStr(Val:Boolean;RetType:Integer):String;
Begin
	case RetType of
		0: Result:=iif(Val,'1','0');
		1: Result:=iif(Val,'True','False');
		Else
			RaiseException(ErTypeMismatch,'Le paramètre RetType ne peut-être que BOOLNUM (' + intToStr(BOOLNUM) + ') ou BOOLSTR ' + intToStr(BOOLSTR) + ')');
	End;
End;

Procedure outputErr(chaine:string);
begin
	try 
		{$IFDEF CONSOLE}
			writelnErr(chaine);
		{$ELSE}
			memo.lines.add(chaine);
		{$ENDIF}
	Except
	Finally
	End;
End;

Procedure output(chaine:string);
begin
	try 
		{$IFDEF CONSOLE}
			writeln(chaine);
		{$ELSE}
			memo.lines.add(chaine);
		{$ENDIF}
	Except
	Finally
	End;
End;


function GetHostname(): string;
begin
     if (hostname='') then
     Begin
          {$IFDEF MSWINDOWS}
          result:=GetEnvironmentVariable('COMPUTERNAME');
          {$ELSE}
          result:=GetEnvironmentVariable('HOSTNAME');
          {$ENDIF}
               if (result='') then
                  // Par défaut
                  result:='localhost';
     End
     Else
     begin
		      result:=hostname;
     End;
End;


procedure logger(msg:string; caller:String; LogLevel:integer; FileLog:String);
var
	level:string;
begin

	// PAs la peine d'aller plus loin ;-)
	If (trim(FileLog)='') then exit;
	
	// Pas de debug, on sort incondtionnelement si le niveau du message est DEBUG...
	{$IFNDEF DEBUG}
	if LogLevel=LOG_DEBUG then exit;
	{$ENDIF}

	case Loglevel of
		LOG_INFO: level:='[INFO] : ';
		LOG_ERROR: level:='[ERREUR] : '; // Erreur fatale
		LOG_WARNING: level:='[WARNING] : '; // Erreur non fatale
		LOG_DEBUG: level:='[DEBUG] : ';
	Else
		RaiseException(ErTypeMismatch,'Le paramètre level ne peut-être que LOG_INFO (' + intToStr(LOG_INFO) + '), LOG_ERROR (' + intToStr(LOG_ERROR) + '), LOG_WARNING (' + intToStr(LOG_ERROR) + ') ou LOG_DEBUG ' + intToStr(LOG_DEBUG) + ')');
	End;

	// Renvoi une erreur 
	if not AppendFichier(
		FormatDateTime('yyyy-mm-dd hh:nn:ss', now)
		+ ' ' + GetHostname + ': ' + JustName(FichierScript) + ' - ' + caller + ' : '
		+ level
		+ msg
		+ CRLF,
		FileLog
		) then
	Begin
		RaiseException(erCustomError, 'Impossible d''ajouter un message dans le fichier "' + FileLog + '"');
	End;

End;

{
	Parser de texte (à la sprintf) qui attend, un texte (body de message par exemple) contenant des variables encadrées par des Delim
	Chaque variable est associé à un Item en TStringList
	LstVar DOIT être un Tstringlist de la forme : key=valeur
	Renvoie le Text parsé en cas de réussite ou '' en cas d'erreur...
	Si WithError est true, on lève une erreur si toutes les variables présentens dans Text ne sont pas trouvées dans LstVar
}
Function ParseText(Text,Delim:String;LstVar:TstringList;WithError:boolean):String;
var
	i:Integer;
	TempVals:TStringList;

Begin
	Result:=Text;
	Try
		For i:=0 to LstVar.count-1 do
			Result:=
				StrReplace(
					Result,
					Delim + LstVar.names[i] + Delim, 
					LstVar.Values[LstVar.names[i]]
				);

		TempVals:=TstringList.create();
		SplitRegExpr(Delim, Result, TempVals);

		if WithError Then
		Begin
			//outputErr('Valeur de tempVals : ' + TempVals.Text);
			if TempVals.count > 1 then
				RaiseException(erOutOfGlobalVarsRange, 'La variable "' + TempVals[1] +'" n''a pas été trouvée dans LstVal');
			TempVals.Free();
		End;
{ // À revoir (supprime tout...)
		Else // On efface toutes les valeurs qui n'ont pas été trouvées (nettoyage)
			Result:=ReplaceRegExpr(delim + '.*' + delim ,Result,'',true);
} 
	Except
		Result:='';
		//outputErr(ExceptionParam);
		RaiseLastException;

	End;
End;

{
	Fonction de connexion au NAS :
	Attend :
	- oNasDomClient une instance de TNasDomClient
	- URL : URL de connexion au serveur
}
function NASConnect(oNasDomClient:TNasDomClient; URL:string):boolean;
begin

	oNasDomClient.AcceptSelfSignedCertificate := NAS_HOST_SSL_SELF_SIGNED_Ok;
	oNasDomClient.RequiresCertificateValidation := NAS_HOST_SSL_VALID_CERTIF;

    if (oNasDomClient.RequiresCertificateValidation) then
    begin
      oNasDomClient.ClientHttp.CAcertsPath := NAS_SSL_CAPATH;
      oNasDomClient.ClientHttp.loadCAcertificates;
	end;

	// DEBUG
	logger('Tentative de connexion sur : "' + URL + '"',caller,LOG_INFO,LogFile);

	
	result:=oNasDomClient.Connect(URL);

	// Tentative de connexion sur l'URL de secours
	if not result then
	Begin
		logger('Échoué sur "' + URL + '" : ' + oNasDomClient.Errcode + ' - ' + ONasDOmClient.Errmsg,caller,LOG_INFO,LogFile);
		logger('on tente sur "' + NAS_URL_SEC + '"',Caller,LOG_INFO,LogFile);
		result:=oNasDomClient.Connect(NAS_URL_SEC);
		if not result then
			logger('Échoué sur "' + NAS_URL_SEC + '" : ' + oNasDomClient.Errcode + ' - ' + ONasDOmClient.Errmsg,caller,LOG_INFO,LogFile);
	End;
end;

{
	Fonction de login au NAS :
	Attend :
	- oNasDomClient une instance de TNasDomClient
	- Login : un login NAS
	- isPasswdHashed : bolean True si le mot de passe utilisé est déjà hashé (ie. passé directement sous forme d'empreinte SHA 256)
}
function NASLogin(oNasDomClient:TNasDomClient; login:string; password:string; isPasswdHashed:boolean):boolean;
begin
	oNasDomClient.IsPasswdHashed:=isPasswdHashed;
	result:=oNasDomClient.domainLogin(Login,Password);
end;

{
	Récupération de la valeur d'un paramètre domaine :
	Attend :
	- oNasDomClient une instance de TNasDomClient
	- SECTION/NAME : élément de récupération du paramètre
	- ValueParam : PlaceHolder de la valeur du paramètre
	- ValBlb : PlaceHolder de la valeur du blob du pramètre
}
function NASGetDomParamValues(oNasDomClient:TNasDomClient; Section, Name:String;var ValueParam:String;ValBlb:TStringStream):boolean;
var
	oDomParam:TDomParam;
begin
	Result:=False;

	// Chargemement de la liste des paramètres
	Result:=oNasDomClient.domParams.Load(False);


	if not Result then exit;

	oDomParam:=oNasDomClient.DomParams.get(Section,Name);

	if oDomParam = Nil then
	Begin
		Result:=False;
		exit;
	End;

	if oDomParam.ValueBlobFilled then
		oDomParam.GetBlobValue(ValBlb);

	ValueParam:=trim(oDomParam.Value);

	Result:=True;

end;

{
	Enregistrement d'un message de log dans le fichier de log client NAS (ie : fichier novaappserver_client.log)
}
Procedure logger_NAS(oNasDomClient:TNasDomClient; msg:string; caller:String; LogLevel:integer);
var
	level:string;
begin

	// Pas la peine de continuer, on continue silencieusement
	if (oNasDomClient=Nil) then exit;
	if (oNasDomClient.loggedOwner=Nil) then exit;


	// Pas de debug, on sort incondtionnelement si le niveau du message est DEBUG...

	case Loglevel of
		LOG_INFO: level:='[INFO] : ';
		LOG_ERROR: level:='[ERREUR] : '; // Erreur fatale
		LOG_WARNING: level:='[WARNING] : '; // Erreur non fatale
		LOG_DEBUG: level:='[DEBUG] : ';
	Else
		RaiseException(ErTypeMismatch,'Le paramètre level ne peut-être que LOG_INFO (' + intToStr(LOG_INFO) + '), LOG_ERROR (' + intToStr(LOG_ERROR) + '), LOG_WARNING (' + intToStr(LOG_ERROR) + ') ou LOG_DEBUG ' + intToStr(LOG_DEBUG) + ')');
	End;

	// Il faut-être logué pour écrire...
	if (oNasDomClient.loggedOwner.logged) then
	Begin
		if not oNasDomClient.log(
			GetHostname + ': ' + JustName(FichierScript) + ' - ' + caller + ' : '
			+ level
			+ msg
			) then
			RaiseException(erCustomError, 'Impossible d''ajouter un message dans le log NAS client : Erreur NAS : ' + oNasDomClient.Errcode + '-' + oNasDomClient.Errmsg + 'et/ou erreur runtime : ' + ExceptionParam);

// 	End
// 	Else
// 	Begin
// 		RaiseException(erCustomError, 'L''objet "oNasDomClient" passé n''est pas correctement instancié');
	End;


end;


{
	Recherche d'un serveur SMTP
}
Function GetSMTP(OOWner:TOwner):TNovSendSMTP;
var
	ParamsSMTP: TStringList;
	
Begin

	try

		Result:=Nil;
	

		logger_NAS(oNasDomClient,'Recherche d''un serveur SMTP avec les paramètres "' + SMTP_GP_SECTION + '/' + SMTP_GP_NAME + '"',CALLER, LOG_INFO);

		oOwner.Load(true);

		logger_NAS(oNasDomClient,'owner en cours : ' + OOWner.login,CALLER, LOG_DEBUG);

// 		logger_NAS(oNasDomClient,'Test de recherche de paramètre Licence/Abonnement Owner en cours : ' + oOwner.Gedparamvalues.AsString['LICENCE','ABONNEMENT'],CALLER, LOG_DEBUG);


		// En premier temps, on essaie d'utiliser un serveur SMTP OWNER défini
		ParamsSMTP:=Tstringlist.create;

		ParamsSMTP.text:=OOwner.Gedparamvalues. AsBLOB[SMTP_GP_SECTION,SMTP_GP_NAME];

		logger_NAS(oNasDomClient,'ParamSMTP : ' + CRLF + ParamsSMTP.text,CALLER, LOG_DEBUG);

		if ParamsSMTP.count>0 then
		begin
			logger_NAS(oNasDomClient,'Récupération d''un serveur SMTP en paramètre OK, on essaie de l''utiliser',CALLER, LOG_INFO);

			Result:=TNovSendSMTP.create;

			// Chargement des paramètres SMTP à partir du GEDPRAM dans l'objet TNovSendSMTP
			Result.LoadServerFromList(ParamsSMTP);

			{$IFNDEF MSWINDOWS}
			if (Result.SSLCheckCertificate) then
			begin
				Result.CAcertsPath := NAS_SSL_CAPATH;
			end;
			{$ENDIF}


			if not Result.connect then
			begin
				logger_NAS(oNasDomClient,'Erreur de connexion sur le serveur SMTP récupéré en GEDPARAM :' + CRLF + Result.Trace.text,CALLER, LOG_WARNING);
				Result.Free();
				Result:=Nil;
			end
			else
			Begin
				logger_NAS(oNasDomClient,'Connexion sur le serveur SMTP récupéré en GEDPARAM OK, on l''utilisera pour envoyer des mails...',CALLER, LOG_INFO);
			End;
		End
		else
			logger_NAS(oNasDomClient,'Aucun serveur SMTP disponible en GEDPARAM...',CALLER, LOG_INFO);


		// Pas de SMTP trouvé...
		if Result = Nil then
		Begin
			logger_NAS(oNasDomClient,'Pas de SMTP exploitable en GEDPARAM, tentative d''initialisation avec un SMTP local',CALLER, LOG_INFO);

			// Onregarde si on est sur un hôte NAS Novaxel Cloud...
			if (Pos(GetHostname,NAS_NOVAXEL)>0) then
			Begin
				logger_NAS(oNasDomClient,'Nous sommes sur un hôte identifié Cloud Novaxel, on recherche un SMTP local...',CALLER, LOG_INFO);
				Result:=TNovSendSMTP.create;

				with Result do
				Begin
					Host:=NAS_SMTP_HOST;
					Port:=StrToInt64(NAS_SMTP_PORT);
					username:=NAS_SMTP_USER;
					password:=NAS_SMTP_PASSWD;
				End;

					// Impossible de se connecter localement, on sort...
				if not Result.connect then
				begin
					logger_NAS(oNasDomClient,'Erreur de connexion sur le serveur SMTP local, impossible de continuer...',CALLER, LOG_ERROR);
					Result.Free();
					Result:=Nil;
					Exit;
				End
				Else
					logger_NAS(oNasDomClient,'Connexion sur un serveur SMTP local OK, on l''utilisera pour envoyer des mails',CALLER, LOG_INFO);
			End
			Else
				logger_NAS(oNasDomClient,'Nous ne sommes pas sur un hôte identifié Cloud Novaxel, pas de recherche de SMTP local...',CALLER, LOG_WARNING);
		End;


	Finally
		ParamsSMTP.Free();
		if result<>Nil then 
		Begin
			Result.Close();
			logger_NAS(oNasDomClient,'Un serveur SMTP a été trouvé et sera utilisé...',CALLER, LOG_DEBUG);
		End
		else
			logger_NAS(oNasDomClient,'Aucun serveur SMTP n''a pu être trouvé, on renverra une erreur...',CALLER, LOG_DEBUG);

	End;

End;

Function sendmailNewPasswd(oNasDomClient:TNasDomClient; oNovSendSMTP:TNovSendSMTP; NewPassword:String; geduser:TGedUser; OOWner:TOwner):boolean;
Var
	//CALLER:String;
	LstVar:TStringList;
// 	LstDest:TStringList;

	ParserDelim:String;
	ValParam:String;

	AdminAddress:String;

	MailBody, MailSubject:String;
	ValBlb:TStringStream;

Begin

	Result:=False;

	Try

		NASGetDomParamValues(oNasDomClient, 'DOMAIN','MACRO_DELIM',ParserDelim,Nil);
		ParserDelim:=trim(ParserDelim);

		if ParserDelim='' then
		begin
			logger_NAS(oNasDomClient,'Impossible de récupérer la valeur du délimiteur de Macro en TDOMPARAM : ' + oNasDomClient.Errcode + ' : ' + oNasDomClient.Errmsg,CALLER, LOG_WARNING);
			ParserDelim:=LOC_PARSER_DELIM;
		end;

		// Adresse email Admin, recherchée dans le contact principal
		AdminAddress:=oNasDomClient.loggedOwner.contact.email;
		// Si non trouvée, on essaie de récupérer l'adresse générale
		if AdminAddress='' then 
		Begin
			logger_NAS(oNasDomClient,'Adresse contact admin vide, on essaie avec le paramètre général: "' + oNasDomClient.DomainAdminEmail + '"',CALLER, LOG_DEBUG);
			AdminAddress:=oNasDomClient.DomainAdminEmail;
		End;
		
		logger_NAS(oNasDomClient,'Adresse admin finale : "' + AdminAddress + '"',CALLER, LOG_DEBUG);

		// On récupère les variables identifiées
		logger_NAS(oNasDomClient,'Récupération des variables nécessaires au traitement des mails',CALLER, LOG_DEBUG);

		LstVar:=TStringList.Create();

		LstVar.add('admin_email' + '=' + AdminAddress);

		LstVar.add('domain_name' + '=' + trim(oNasDomClient.DomainName));

    if (NASGetDomParamValues(oNasDomClient, 'DOMAIN','WEB_URL',ValParam,Nil)) then
				LstVar.add('domain_url' + '=' + trim(ValParam) + '/' + ONasDomclient.UriSubdomain + '/' + OOwner.subdomain)
    Else
    Begin
				logger_NAS(oNasDomClient,'DOMAIN/WEB_URL non présent en Paramètre domaine, on essaie avec l''url interne du domaine',CALLER, LOG_WARNING);
        LstVar.add('domain_url' + '=' + ONasDomclient.url + '/' + ONasDomclient.UriSubdomain + '/' + OOwner.subdomain);
    End;        


		LstVar.add('domain_ServerType' + '=' + trim(oNasDomClient.ServerType));
		LstVar.add('domain_ServerVersion' + '=' + trim(oNasDomClient.ServerVersion));
		LstVar.add('domain_DomainVersion' + '=' + trim(oNasDomClient.DomainVersion));
		LstVar.add('domain_DomainVersion' + '=' + trim(oNasDomClient.DomainVersion));
		LstVar.add('domain_Encrypted' + '=' + BoolToStr(oNasDomClient.Encrypted,BOOLSTR));
		// V32 : login + preffix + name + firstname...
		LstVar.add('password' + '=' + trim(NewPassword));
		LstVar.add('login' + '=' + trim(geduser.login));
		LstVar.add('prefix' + '=' + trim(geduser.contact.prefix));
		LstVar.add('firstname' + '=' + trim(geduser.contact.firstname));
		LstVar.add('name' + '=' + trim(geduser.contact.name));


		// Signature à créer en dernier car elle peut contenir des variables elle-même
		ValBlb:=TStringStream.Create('');
		if NASGetDomParamValues(oNasDomClient, 'DOMAIN','ADMIN_EMAIL_SIG',ValParam,ValBlb) then
		begin
			logger_NAS(oNasDomClient,'Signature Admin: ' + ValBlb.Datastring,CALLER, LOG_DEBUG);
			LstVar.add('signature' + '=' + ParseText(trim(ValBlb.Datastring),ParserDelim,LstVar,False));
		End
		Else
		Begin
			logger_NAS(oNasDomClient,'Impossible de récupérer la valeur du paramètre Signature Admin: ' + oNasDomClient.Errcode + ' : ' + oNasDomClient.Errmsg,CALLER, LOG_WARNING);
		End;

{
		LstDest:=TStringList.Create();

		LstDest.add(AdminAddress);
		LstDest.add(geduser.contact.email);
}

// 		ValBlb.Clear();
		ValBlb.Free();
		ValBlb:=TStringStream.Create('');
		

		if Not NASGetDomParamValues(oNasDomClient, 'DOMAIN','EMAIL_REINIT_GEDUSER_PASSWORD',ValParam,ValBlb) then
		Begin
			logger_NAS(oNasDomClient,'Impossible de récupérer la valeur du paramètre de message email: ' + oNasDomClient.Errcode + ' : ' + oNasDomClient.Errmsg,CALLER, LOG_WARNING);
			MailSubject:=EMAIL_SUBJECT;
			MailBody:=EMAIL_TXT;
		End
		Else
		Begin
			logger_NAS(oNasDomClient,'Sujet et texte email récupérés en TDOMPARAM...',CALLER, LOG_DEBUG);
			MailSubject:=ValParam;
			MailBody:=trim(ValBlb.Datastring);
		End;

// 		ErrSendMail:=TStringList.Create();

		MailSubject:=ParseText(MailSubject,ParserDelim,LstVar,False);
		MailBody:=ParseText(MailBody,ParserDelim,LstVar,False);

{
// Ancienne méthode...
		
		if not SendMail(
			subject, // Obj
			LstDest, // dest
			Body, // body
			Nil, // fichiers
			AdminAddress, // From
			ErrSendMail
			) then
		Begin
			logger_NAS(oNasDomClient,'Envoi de mail administrateur avorté : ' + ErrSendMail.Text,CALLER, LOG_ERROR);
		End;
}

		With oNovSendSMTP do
		Begin
			BCCAddr.add(AdminAddress);
			ToAddr.add(geduser.contact.email)
			FromAddr.add(AdminAddress);
			SenderAddr.add(AdminAddress);
			Subject:= MailSubject;
//			priority:= 4;
//			RequestDeliveryReceipt:= true;
//			RequestReadReceipt:= true;
//			XMailer:= 'Serveur d''application Novaxel';
	// infos contenu
			body:= MailBody;
		End;

		Result:=oNovSendSMTP.ConnectAndSend;
		
		if not result then logger_NAS(oNasDomClient,'Échec de l''envoi de mail :' + CRLF + oNovSendSMTP.trace.Text,CALLER, LOG_DEBUG);

	Finally
		if LstVar<>nil then LstVar.Free();
// 		if LstDest<>nil then LstDest.Free();
		if ValBlb <> nil then ValBlb.Free();
// 		if ErrSendMail <> nil then ErrSendMail.Free();

	End;
End;


{
	Recherche d'un OWNER par son subdomain
}
function GetOwnerBySubDomain(ONasDOmClient:TNasDomClient; subdomain:String):TOwner;
Var
	i:Integer;
	OOWners:TOwners;
Begin

	logger_NAS(oNasDomClient,'Recherche owner subdomain : "' + subdomain + '"', CALLER, LOG_DEBUG);

	Result:=Nil;

	if not oNasDomClient.owners.load(False) then exit;
	OOWners:=oNasDomClient.owners;

	// Parcours de la liste des Owners
	For i:=0 to OOWners.Count-1 do
	Begin
		//logger_NAS(oNasDomClient,'Comparaison de "' + OOWners[i].subdomain + '" par rapport aud domaine demandé "' + subdomain + '"' , CALLER, LOG_DEBUG);
		if (CompareText(OOWners[i].subdomain,subdomain)=0) then
		Begin
			logger_NAS(oNasDomClient,'OWNER ID trouvé pour "' + subdomain + '" : ' + Int64toStr(OOWners[i].id) , CALLER, LOG_DEBUG);
			Result:=OOWners[i];
			exit;	
		End;
	End;
	logger_NAS(oNasDomClient,'Aucun OWNER trouvé pour "' + subdomain + '"', CALLER, LOG_DEBUG);
End;


{
	Recherche d'un geduser par l'intermédiaire d'un sous-domaine
	Renvoi l'objet geduser si trouvé
}
Function GetGeduser(ONasDOmClient:TNasDomClient; oOwner:TOwner;login:string):TGedUser;
Begin

	logger_NAS(oNasDomClient,'Recherche geduser subdomain : "' + subdomain + '" - login : "' + login + '"', CALLER, LOG_DEBUG);
	Result:=Nil;

	if not OOWner.gedusers.load(True) then
	Begin
		logger_NAS(oNasDomClient,'Erreur lors du chargement des utilisateurs du Propriétaire : ' + oNAsDomClient.Errcode + ':' + oNAsDomClient.Errmsg, CALLER, LOG_DEBUG);
		exit;
	End;

	Result:=OOWner.gedusers.find(login);

	if (Result=Nil) then
		logger_NAS(oNasDomClient,'GEDUSER non trouvé dans "' + subdomain + '"', CALLER, LOG_DEBUG)
	Else
		logger_NAS(oNasDomClient,'GEDUSER trouvé dans "' + subdomain + '" ' + Int64toStr(Result.id), CALLER, LOG_DEBUG);


End;

Begin
	SCParams:=TScriptParams.Create();

    fileresult:=IncludeTrailingPathDelimiter(GetTempDir)+'result.html';
    Deletefile(fileresult);

  SCResults:=TScriptResult.Create();
    SCResults.mimetype:='text/html';
 
 {$IFDEF DEBUG}
      LogFile:=IncludeTrailingPathDelimiter(GetTempDir) +  caller +'.log';
      Deletefile(LogFile);
 {$ELSE}
      LogFile:='';
 {$ENDIF}

	Try
 
     logger('C''est parti !!!',caller,LOG_INFO,LogFile);

		if SCParams.paramsFilename='' then
		Begin
    	logger('Script appelé hors contexte NAS exec_script',caller,LOG_ERROR,LogFile);
			OutputErr('Script appelé hors contexte NAS exec_script');
			SetExitCode(1);
			exit;
		End;

		{
		Ici on attend :
			- subdomain : sous-domaine du user
			- login : login geduser
			- email : email du geduser
			- url : client WEB (pour rediriger l'utilisateur)
			- nas_url ; NAS pour connexion directe...
		}
		// Rappel : les sorties en error provoque une erreur HTTP 202 (à traiter par l'appelant)
		subdomain:=Trim(SCParams.getValue('subdomain'));
		login:=Trim(SCParams.getValue('login'));
		email:=Trim(SCParams.getValue('email'));

		logger('Paramètres reçus : ' + CRLF +
			   'subdomain : ' + subdomain + CRLF +
			   'login : ' + login + CRLF +
			   'email : ' + email
			   ,caller,LOG_INFO,LogFile);

		if ((SCParams.paramsList.count=0) Or (login='') Or (email='') Or (subdomain='')) then
		Begin
			SCResults.errmsg:='Erreur de passage de paramètres au script de réinitialisation de mot de passe, veuillez contacter votre administrateur...';
			Exit;
		End;

		// Connexion au NAS...
		oNasDomClient:=TNasDomClient.Create();

    nas_url:=Trim(SCParams.NasURL);
    
 		if not NASConnect(oNasDomClient, nas_url) then
		Begin
			SCResults.errmsg:='Erreur : Impossible de joindre le serveur en mode domaine sur l''URL "' + nas_url + ' (cf. Paramètre domaine : DOMAIN/NAS_URL)", veuillez contacter votre administrateur...';
			Exit;
		End;

 		if not NASConnect(oNasDomClient, nas_url) then
		Begin
			logger('Err NAS : ' + oNasDomClient.Errcode + '-' + oNasDomClient.Errmsg,caller,LOG_INFO,LogFile);
			SCResults.errmsg:='Erreur : Impossible de joindre le serveur, veuillez contacter votre administrateur...';
			Exit;
		End;

		if not NASLogin(oNasDomClient, SCParams.OwnerLogin,SCParams.OwnerPasswd, False) then 
		Begin
			SCResults.errmsg:='Erreur : Impossible de se connecter sur le serveur, veuillez contacter votre administrateur...';
			exit;
		End;
		
		logger_NAS(oNasDomClient,StringOfChar('=',60), CALLER, LOG_DEBUG);
		
		logger_NAS(oNasDomClient,CALLER + ' V ' + Version + ' appelé pour subdomain : "' + subdomain + '" - login : "' + login + '" - email : "' + email + '" - NAS "' + nas_url + '"', CALLER, LOG_DEBUG);

		OOWner:=GetOwnerBySubDomain(ONasDOmClient, subdomain);
		if (OOWner=Nil) then
		Begin
			SCResults.errmsg:='Erreur : L''identifiant utilisateur saisi (login) ne peut pas être trouvé ou ne correspond pas à un compte du domaine fourni; vérifiez votre saisie...';
			exit;
		End;

		oGedUser:=GetGeduser(oNasDomClient, OOWner,login);

		if (oGedUser=Nil) then
		Begin
			SCResults.errmsg:='Erreur : L''identifiant utilisateur saisi (login) ne peut pas être trouvé ou ne correspond pas à un compte du domaine fourni; vérifiez votre saisie...';
			exit;
		End;
	
		logger_NAS(oNasDomClient,'GEDUSER trouvé : ' + Int64toStr(oGedUser.id), CALLER, LOG_DEBUG);

		// Vérification de l'adresse email
		if (Trim(oGedUser.contact.email) = '') then
		Begin
			SCResults.errmsg:='Erreur : Aucune adresse de messagerie n''a été fournie pour ce compte utilisateur ; demandez à votre administrateur d''en saisir une...';
			exit;
		End;

		// Vérification de l'adresse email
		if (Trim(oGedUser.contact.email) <> email) then
		Begin
			SCResults.errmsg:='Erreur : L''adresse email saisie ne correspond pas à celle enregistrée pour ce compte utilisateur ; Vérifiez votre saisie...';
			exit;
		End;


		// Si nous sommes ici, tout est Ok ;-) Y'a plus qu'à envoyer le mail ;-)

		// Recherche d'un serveur SMTP
		oNovSendSMTP:=GetSMTP(OOWner);
		if (oNovSendSMTP=Nil) then
		Begin
			SCResults.errmsg:='Erreur : Aucun service d''envoi d''email (serveur SMTP), en état de fonctionnement, n''a pu être trouvé sur le serveur, contactez votre administrateur pour effectuer ce paramétrage...';
			exit;
		End;

		// Génération d'un nouveau mot de passe "aléatoire"
		passwd:=StrReplace(DateTimeToStr(Now),'/','');
		passwd:=StrReplace(passwd,'-','');
		passwd:=StrReplace(passwd,':','');
		passwd:=StrReplace(passwd,' ','');

		if (not sendmailNewPasswd(oNasDomClient, oNovSendSMTP, passwd, oGedUser, oOwner)) then
		Begin
			logger('Envoi de mail impossible',caller,LOG_ERROR,LogFile);
			logger_NAS(oNasDomClient,'Erreur lors de l''envoi du message', CALLER, LOG_DEBUG);
			SCResults.errmsg:='Erreur : Erreur technique lors de l''envoi du message, veuillez contacter votre administrateur...';
			exit;
		End
		Else
		Begin
			logger('Email envoyé',caller,LOG_ERROR,LogFile);
			logger_NAS(oNasDomClient,'Le email a bien été envoyé à "' + ogeduser.contact.email + '" on Réinitialise le mot de passe', CALLER, LOG_INFO);

			if not (oGedUser.SetPassword('', passwd)) then
			Begin
				SCResults.errmsg:='Erreur : Impossible de générer un nouveau mot de passe (erreur technqiue), veuillez contacter votre administrateur...';
				logger_NAS(oNasDomClient,'Erreur lors de la création du nouveau mot de passe : ' + oNAsDomClient.Errcode + ':' + oNAsDomClient.Errmsg, CALLER, LOG_DEBUG);
				exit;
			End;
		End;
		
		SetExitCode(0);

  Except
    	logger('runtime Error : ' + ExceptionParam,caller,LOG_ERROR,LogFile);
     
	Finally

		if (SCResults.errmsg = '') Then // Pas d'erreur, on rempli le fichier de résultat...
		Begin
    	logger('Tout est OK, on sort avec ResponseFile...',caller,LOG_ERROR,LogFile);
			logger_NAS(oNasDomClient,'Tout s''est bien passé, sortie su script OK', CALLER, LOG_INFO);
			AppendFichier('Un message de modification de mot de passe à bien été envoyé à l''adresse de messagerie : "' + email + '"',fileresult);
			// TODO : debug 
			AppendFichier('nouveau mot de passe : "' + passwd + '"',fileresult);
			SCResults.ResponseFile:=fileresult;
		End
		Else
		Begin
			logger('Erreur retournée par ce script : "' + SCResults.errmsg + '"',caller,LOG_ERROR,LogFile);
			logger_NAS(oNasDomClient,'Erreur retournée par ce script : "' + SCResults.errmsg + '"', CALLER, LOG_DEBUG);
		End;
		

		// Le NAS attend ce fichier pour pouvoir renvoyer une réponse
		logger('Avant SaveToFile',caller,LOG_ERROR,LogFile);
		SCResults.savetofile;
		logger('Après SaveToFile',caller,LOG_ERROR,LogFile);

		Try
			logger('Avant Free',caller,LOG_ERROR,LogFile);

			if oGedUser <> Nil then oGedUser.Free();			
			if OOWner <> Nil then OOWner.Free();
			if oNasDomClient <> Nil then
			Begin
				oNasDomClient.DomainLogout();
				oNasDomClient.Free();
			End;     
			SCResults.Free();
			SCParams.Free();
			if oNovSendSMTP <> Nil then oNovSendSMTP.Free();
			//FreeNasRes;
			logger('Après Free',caller,LOG_ERROR,LogFile);
			
		Except
			logger('Error Free',caller,LOG_ERROR,LogFile);
		End;

	End;

End.
