{
Paramètres prévus :
url : adresse du serveur NAS
login : login du owner
password : mot de passe du propiétaire
TitleBib : Titre de la bibliothèque si vide toute les bibs 

Date : depuis quelle date on cherche les documents modifiés
En standard le script de synchro (executé chez le client) passera la date de l'avant dernière synchro réussie
  

Chargemnt client WEB trop lourd...
1) connect /chaque bib
2) Paramètres abonnement
3) get_search_result
4) Disconnect



}

Program Abonnement;

var
  cURL,cLogin,cPassword,cTitleLib:string;
  
  oNasDomClient:TNasDomClient;
  oNasLibClient: TNasLibClient;
  
  i,x,yy:integer;
  
  owner:Towner;
  Gusers:TGedusers;   // liste mémoir globale des utilisateurs a qui on doit envoyer un mail
  
  oparamSmtp:Tgedparam;

  StringStream:TStringstream;

  NovSendSMTP:TNovSendSMTP;

//   SCParams : TScriptParams;
//   SCResults: TScriptResult;
//   fileresult:String;
//   ErrMsg:String;



Function ConnectDOM:boolean;
var
	i:integer;
	
begin
  Result:=False;
  oNasDomClient:=TNasDomClient.create;
  oNasDomClient.domainLogout;
  // si on accepte les certificats self-signed
  oNasDomClient.AcceptSelfSignedCertificate := True;
  // si on veut bypasser la validation du certificat
  oNasDomClient.RequiresCertificateValidation := False;
  if not oNasDomClient.Connect(cURL) then
  begin
      output('Connexion NAS impossible sur ' + cURL);
      output('error:' + oNasDomClient.Errcode + ',' + oNasDomClient.Errmsg);
      oNasDomClient.Close;
      exit;
  end;
  if not oNasDomClient.domainLogin(cLogin,cPassword) then
  begin
      output('error:' + oNasDomClient.Errcode + ',' + oNasDomClient.Errmsg);
     exit;
  end;

  // PAD : TODO Vérifier LICENCE\ABONNEMENT  
//   Abonnement:=oNasDomClient.ParamValues.AsBooelan['LICENCE','ABONNEMENT'];

  owner:=oNasDomClient.loggedowner;
  if not owner.libraries.load(False) then 
  begin
     output('error:' + oNasLibClient.Errcode + ',' + oNasLibClient.Errmsg);  
     exit;
  end;

  Result:=True;
end;  

Function ConnectGED:boolean;
begin
  Result:=False;
  oNasLibClient:= TNasLibClient.Create;
  oNasLibClient.AcceptSelfSignedCertificate := True
  oNasLibClient.RequiresCertificateValidation := False;
  if not oNasLibClient.Connect(cURL) then
  begin
       output('Connexion NAS impossible sur ' + cURL);
       output('error:' + oNasLibClient.Errcode + ',' + oNasLibClient.Errmsg);
       oNasLibClient.Close;
       exit;
  end;
  Result:=True;
end;


Function Connect(URL,login,password,TitreBib:string):boolean;
begin
  Result:=False;
  cURL:=URL;
  cLogin:=login;
  cPassword:=password;
  cTitleLib:=Titrebib;
  if not ConnectDOM then exit;
  if not ConnectGED then exit;

  Gusers:=TGedusers.create(nil,nil);
  
  Result:=True;  
end;


Function TraiteUser(oUser:TgedUser):boolean;
var
   libs:TLibraries;
   oLib:Tlibrary;
   x,xx:integer;
   search:TNasSearch;
   startDate,endDate: TDateTime; 
   MinLevel,MaxLevel,MaxItemsCount,itemsCount: integer;
   endreached:boolean;
   libItems: TLibItemsList;
   TypeAbonnement:integer;
begin
    Result:=False;
	if oUser.contact.email='' then
	Begin
		output(oUser.login +' : pas de mail...');
		exit;
	End;
	
 
    if not oNasLibClient.Login_as_owner(cLogin,'', cPassword, oUser.login, Libs) then
    begin
		output(oUser.login + ' : error:' + oNasLibClient.Errcode + ',' + oNasLibClient.Errmsg);
       exit;
    end;

 
    For x:=0 to libs.count-1 do // on parcour toutes les bib de l'utilisateur
    begin
        if cTitleLib<>'' then
           if cTitleLib<>libs[x].Title then // si on ne veut traiter qu'un seul bib en particulier
			   Continue;
		
		oNasLibClient.LibConnect(libs[x].id);
		
        // on test les droits
        if not oNasLibClient.Load_gedparamvalues_for_session then
        begin
           output('error:' + oNasLibClient.Errcode + ',' + oNasLibClient.Errmsg)
           exit;
		end;
		
		TypeAbonnement:=oNasLibClient.ParamValues.AsInteger['ABONNEMENT','TYPE'];
															
        if TypeAbonnement=0 then 
           continue;

        if not oNasLibClient.ParamValues.AsBoolean['DROITS','RECHERCHER'] then
			continue;
		
        output(oUser.login+' - '+oUser.contact.email);        
        output(chr(09)+'lib : ' + libs[x].title);        
        
        // On fait la recherche
        search := TNasSearch.Create(oNasLibClient); // PAD : Objet recherche GED...
        search.withSubscription := (TypeAbonnement=2);  // Avec Matrice Abonnement  PAD : mettre à False

        search.countOnly:=True; 
         
        startDate:=Now-2;  // PAD : Paramètre à passer au script à terme...
        EndDate:=Now;      // sur les 2 derniers jours
        search.SetDateSearch(startDate,EndDate, True, true);
        MinLevel:= 12; // -1=tous sauf chemises et documents, 0=tous, autre= niveau mini recherché 1..4, 10..12
        MaxLevel:= 12; // niveau maxi recherché 1..4, 10..12
        search.SetTitleSearch(MinLevel,MaxLevel,-1,clTitre,oCommencePar,'');
    
        libItems := TLibItemsList.Create(oNasLibClient, nil);
		MaxItemsCount := 1;
		
        if (libItems.loadFromSearch(search, itemsCount, endreached, MaxItemsCount, true)) then
        begin
          output(chr(09)+ 'Nb Items trouvé : ' + intToStr(itemsCount));
          // Si au moins 1 resultat on ajoute à la liste d'envoi
          if (itemsCount> 0) then
              Gusers.add(oUser,'');
        end
        else
			output('error:' + oNasLibClient.Errcode + ',' + oNasLibClient.Errmsg);
		
        libItems.free;  
        search.free;
	end;
	
    oNasLibClient.Logout;    
end;


Begin
	// PAD : Pour l'instant en dur...
  if not Connect('localhost','DEMO','DEMO','DEMO-FULL-ACCESS') then exit;
 
//  if not Connect('https://cloudnovaxel.fr','MOLLON','011066','MAISON') then exit;  
  // date de dernière synchro réussie
 { AfficheLogs;
  exit;
  }
  
  oNasDomClient.loggedOwner.GedUsers.load(True);
  output('Utilisateur:'+intTostr(oNasDomClient.loggedOwner.GedUsers.count-1));

  for i:=0 to oNasDomClient.loggedOwner.GedUsers.count-1 do
  begin
       // Si on veut se servir des paramaètres d'abonnement directement liés à l'utilisateur
       // if (oNasDomClient.loggedOwner.GedUsers[i].Subscribe_End>= Date) then //oNasDomClient.loggedOwner.GedUsers[i].Subscribe_Start<= Date) and 
       TraiteUser(oNasDomClient.loggedOwner.GedUsers[i]);
  end;
  
  output('************ Liste d''utilisateurs à qui on doit envoyer un mail ***********************');
    //Owner.gedparams.load(False);
    //oParamSmtp:=Owner.gedParams.Find('SERVEUR SMTP','MAILDEV');
  try
      if Gusers.count=0 then exit; 
	  // on charge les paramètres  du serveur smtp du sous domaine
      oParamSmtp := TGedparam.Create(oNasDomClient);
      oParamSmtp.owner_id := owner.id;
      oParamSmtp.section := 'SERVEUR SMTP';
//	  oParamSmtp.name := 'MAILDEV';  //<--- le nom du serveur viendra d'un gedparam
	  oParamSmtp.name := 'LOCAL';  //<--- le nom du serveur viendra d'un gedparam
	  
      if not oParamSmtp.loadforName(true) then
      begin
          output(oNasDomClient.errmsg);
          exit;
	  end;
	  
      StringStream:=TStringstream.create('');
      oParamSmtp.GetDefaultBlob(StringStream);
 
      NovSendSMTP:=TNovSendSMTP.create;
      NovSendSMTP.loadServerFromStream(StringStream);
	  StringStream.free;
	  
      if not NovSendSMTP.connect then
      begin
        output('echec de connect SMTP !')
        exit;
	  end
	  Else
		  output('Connect SMTP Ok !');

      NovSendSMTP.FromAddr.add('norelay@noreplay.fr');
      NovSendSMTP.ReplyToAddr.add('norelay@noreplay.fr');
      NovSendSMTP.Subject:= 'Vous avez des nouveaux documents';
      NovSendSMTP.body:= 'Vous avez des nouveaux documents';
         
      for i:=0 to Gusers.count-1 do                       
        NovSendSMTP.BCcAddr.add(Gusers[i].contact.email);
      
      NovSendSMTP.SendMsg;
      NovSendSMTP.free;

  finally
    Gusers.free;
    oNasDomClient.domainLogout;
    oNasDomClient.Close;
    oNasDomClient.free;
  end;

  
End.