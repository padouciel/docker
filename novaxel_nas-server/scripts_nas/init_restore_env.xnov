{
	Mise en place de l'environnement permettant à un client de récupérer les volumes d'une de ces bases

	Appelé par exec_script (donc avec l'authentification du owner en cours)
	==> Voir si suffisant pour faire tout ce que l'on doit faire ici ?
	==> Non (pas oLib.nosync + state + autres)
	On revient à exec_script_url en mode admin
	TODO : Trouver un moyen d'identifier que ce sccript est bien lancé par un OWNER actuellement loggué dans une session WEB (cf. script sessions_nas.xnov)
		==> renvoyer l'id de session WEB et le traiter ici ???
		==> Done : recherche de session domain en cours lors de l'appel 

	On doit nous passer l'id de la bib à traiter (get_libraries_for_owner par exemple)

	Prérequis :
	- Il doit y avoir un répertoire de base présent dans l'arbo HTTP avec tous les droits pour l'utilisateur système NAS (création de liens)
	- Cette procédure doit connaitre l'emplacement des sauvegardes locales (mais de tous les serveurs FB utilisés) des lib et pouvoir y accéder en RO
	- On va créer un lien symbolique dans le répertoire de restauration vers le répertoire de sauvegardes

	Questions ;
	- Doit-on interdire les sauvegardes/synchro durant la phase de récupération (éviter d'écraser des volumes déjà en sauvegarde avec des nouveaux volumes) ? 
	Si oui, travail en 2 temps :
		* Mode on => Tout ce qui est dit au-dessus + Sync/sav interdite
		* Mode Off => Suppression du lien + réactivation sync/sav
	
}

// 	state: integer [Lecture seul];

{$DEFINE DEBUG}

program init_restore_env;

// Inclus local_inc.xnov...
{$I func_nas.xnov}

Const
	CALLER='init_restore_env';
	// Commentaire ajouté/retiré à la bib
	LIB_COMMENT='!!! ATTENTION : Bibliothèque en mode restauration (synchro et backup suspendus) !!!' + CRLF;

	// id domain du serveur FB de l'infra novaxelcloud.fr
	FBSERVER_INFRA_NCF=1;
	// PATH local où trouver le point de montage vers les libs hébergées sur ce serveur (montage via sshfs)
	FBSERVER_INFRA_NCF_PATH='/srv/novaappserver/fb01';

Var
	dummy:String;
	ResultStr:String;
	RestState:String;
	mode: String;
    SCParams : TScriptParams;
	SCResults: TScriptResult;
    i:Integer;
    fileresult:String;
	oNasDomClient:TNasDomClient;
	lib_id:Integer;
	OLib:TLibrary;
	oOwner:TOwner;
	PathRestoreDest:String;

	// Liste des volumes
	cFDBFiles:TFDBFiles;


{
	Génère une chaine d'erreur json propre à ce script
}
Function GenErrJSON(msg:String):String;
Begin
	Result:='{"error":"' + msg + '"}';
End;

Function LoadFDBFiles(oLib:TLibrary):Boolean;
Begin
	Result:=False;
	if cFDBFiles=Nil then
	Begin
		logger_NAS(oNasDomClient,'Chargement de la liste des volumes', CALLER, LOG_INFO)
		cFDBFiles:=oLib.FDBFiles;
		cFDBFiles.load(false, True);
		if not cFDBFiles.Loaded then 
		Begin
			SCResults.errmsg:='{"error":"Erreur technique lors de la mise en place de l''environnement de restauration ; merci de contacter votre service technique"}';
			logger_NAS(oNasDomClient,'Volumes non chargés : ' + oNasDomClient.Errmsg, CALLER, LOG_ERROR);
			Exit;
		End;
	End;
	Result:=true;
	
End;


{
	Function chargée de mettre en place l'environnement local de restauration en fonction du serveur FB
	On renvoi le PathRestoreSrc (correspondant au répertoire local pointant sur les volumes)
}
Function InitRestInfosPath(olib:TLibrary):boolean;
	Var PathElem:TStringList;
	PathRestoreSrc:String;
	PathRestoreDest:String;

Begin
	Result:=False;

	logger_NAS(oNasDomClient,'Mise en place de l''environnement local de restauration en fonction du serveur FB source "' + Int64ToStr(oLib.FBServer_id) + '"', CALLER, LOG_INFO);

	case oLib.fbServer_id of // Seulement les serveurs connus, en dur :-(...
		NAS_THIS_FBSERVER: // Serveur FB local
			// Les lib sav sont dans NAS_THIS_SAV_DEST/pad(owner_id,10)/pad(lib_id,10)/
		Begin
			PathRestoreSrc:=IncludeTrailingPathDelimiter(NAS_THIS_SAV_DEST) + format('%.10u',[Olib.Owner_id]);
			PathRestoreSrc:=IncludeTrailingPathDelimiter(PathRestoreSrc) + format('%.10u',[Olib.id]);
			logger_NAS(oNasDomClient,'Serveur FB Local : path source : "' + PathRestoreSrc + '"', CALLER, LOG_DEBUG);
		End;


		FBSERVER_INFRA_NCF: // Serveur FB Infra novaxelcloud.fr (ie. ancienne infra...)
			// Les libs sont dans FBSERVER_INFRA_NCF_PATH/firebird[02]/NomBase
			// Donc il faut récupérer les 2 derniers éléments par rapport à la source : ie. firebird/NomBase et les ajouter au path de montage
		Begin 
			PathElem:=SplitStr(oLib.DBPAth,CLPathDelim);

			PathRestoreSrc:=IncludeTrailingPathDelimiter(FBSERVER_INFRA_NCF_PATH) + PathElem[PathElem.count-2] + CLPathDelim + PathElem[PathElem.count-1] + CLPathDelim;
			logger_NAS(oNasDomClient,'Serveur FB distant : path source : "' + PathRestoreSrc + '"', CALLER, LOG_DEBUG);
		End;
		Else
		Begin
			SCResults.errmsg:=GenErrJSON('Erreur technique lors de la mise en place de l''environnement de restauration ; merci de contacter votre service technique');
			logger_NAS(oNasDomClient,'Le serveur Firebird ID "' + Int64ToStr(oLib.FBServer_id) + '" n''est pas pas en charge par cette procédure (pas de path local paramétré)', CALLER, LOG_ERROR);
		Exit;
		End;
	End;

	// Si tout est Ok ici, nous devrions trouver (au moins) un fichier NOVaXEL.FDB dans le répertoire du lien symbolique
	if not FileExists(IncludeTrailingPathDelimiter(PathRestoreSrc)+ONasDomClient.GEDFileName) then
	Begin
		SCResults.errmsg:=GenErrJSON('Erreur technique lors de la mise en place de l''environnement de restauration ; merci de contacter votre service technique');
		logger_NAS(oNasDomClient,'Impossible de trouver le fichier "' + IncludeTrailingPathDelimiter(PathRestoreSrc)+ONasDomClient.GEDFileName + '" (Vérification de la source du lien)', CALLER, LOG_ERROR);
		Exit;
	End;

	// Création des lien symb du rép source vers le rép dest dans restore
	PathRestoreDest:=IncludeTrailingPathDelimiter(NAS_RESTORE_DIR)+format('%.10u',[Olib.id]);
	if not ForceDirectories(PathRestoreDest) then
	Begin
		SCResults.errmsg:=GenErrJSON('Erreur technique lors de la mise en place de l''environnement de restauration ; merci de contacter votre service technique');
		logger_NAS(oNasDomClient,'Erreur lors de la création du répertoire d''accueil des liens symboliques "' + PathRestoreDest + '"', CALLER, LOG_ERROR);
	End;

	PathRestoreDest:=IncludeTrailingPathDelimiter(PathRestoreDest);
	logger_NAS(oNasDomClient,'Création des liens symboliques pour chaque fichier FDB "' + PathRestoreSrc + '" vers "' + PathRestoreDest + '"', CALLER, LOG_DEBUG);

	if not LoadFDBFiles(oLib) then exit;

	for i:=0 to cFDBFiles.count-1 do
	begin
		if not SysRun('ln','-fs ' + IncludeTrailingPathDelimiter(PathRestoreSrc) + cFDBFiles[i].name + ' ' + PathRestoreDest) then
		Begin
			SCResults.errmsg:=GenErrJSON('Erreur technique lors de la mise en place de l''environnement de restauration ; merci de contacter votre service technique');
			logger_NAS(oNasDomClient,'Erreur technique lors de la création des liens symboliques de "' + PathRestoreSrc + '" vers "' + PathRestoreDest + '" : ' + CRLF + SysRunErrorMessage.Text, CALLER, LOG_ERROR);
			Exit;
		End;
	End;

	// Si tout est Ok ici, nous devrions trouver (au moins) un fichier NOVaXEL.FDB dans le répertoire de destination du lien symbolique
	if not FileExists(PathRestoreDest +ONasDomClient.GEDFileName) then
	Begin
		SCResults.errmsg:=GenErrJSON('Erreur technique lors de la mise en place de l''environnement de restauration ; merci de contacter votre service technique');
		logger_NAS(oNasDomClient,'Impossible de trouver le fichier "' + IncludeTrailingPathDelimiter(NAS_RESTORE_DIR) + IncludeTrailingPathDelimiter(format('%.10u',[Olib.id])) +ONasDomClient.GEDFileName + '" (Vérification de la destination du lien)', CALLER, LOG_ERROR);
		Exit;
	End;

	Result:=True;
		

End;

{
	Cherche si une session domain est actuellement engagée (non expirée) pour un owner_id donné
	Idéalement, il faudrait pouvoir rapprocher l'appel de la procédure en cours d'une des sessions trouvées
	mais je ne vois pas comment faire ???
	On part donc du principe que si une session domain existe pour le owner de la lib en cours de traitement
	ça nous suffi pour continuer (Best Effort)
}
// TODO : porter en lib partagée ???
function IsSessionDomain(ONasDomClient:TNasDomClient; owner_id:Integer):boolean;

var
	NasSessions:TNasSessions; 
	i:Integer;

Begin
	Result:=False;

	Try
		NasSessions:=TNasSessions.create(oNasDomClient);
		// Récupération des sessions domain
		NasSessions.load(0,2,owner_id,0,true);
		for i:=0 to NasSessions.count-1 do
		begin
			if NasSessions[i].Is_Expired=false then
			begin
				Result:=True;
				exit;
			End;
		End;
	Except
	Finally
		if NasSessions<>nil then NasSessions.Free();
	End;
End;


Begin


	SCParams:=TScriptParams.Create();
	SCResults:=TScriptResult.Create();

	fileresult:=extractfilepath(SCParams.paramsFilename)+'result.json';
	SCResults.mimetype:='application/json';
// 	SCResults.mimetype:='text/html';

	if SCParams.paramsFilename='' then
	Begin
		OutputErr('Script appelé hors contexte NAS exec_script');
		SetExitCode(1);
		exit;
	End;

	Try

		oNasDomClient:=TNasDomClient.Create();

		if not NASConnect(oNasDomClient, GetNASHost('')) then
		Begin
			SCResults.errmsg:=GenErrJSON('Impossible de joindre le serveur NAS  ; merci de contacter votre service technique');
			Exit;
		End;

//		if not NASLogin(oNasDomClient, SCParams.OwnerLogin,SCParams.OwnerPasswd, true) then 
		if not NASLogin(oNasDomClient, SCParams.OwnerLogin,SCParams.OwnerPasswd, False) then 
		Begin
			SCResults.errmsg:=GenErrJSON('Impossible de se connecter au serveur NAS ; merci de contacter votre service technique');
			exit;
		End;

		logger_NAS(oNasDomClient,'===============================================================================', CALLER, LOG_INFO);
		logger_NAS(oNasDomClient,'Lancement de "' + CALLER + '"', CALLER, LOG_INFO);

		{
		Ici on attend :
		- bib : id de la bib à restaurer
		- mode : on/off/state
		}
		// Rappel : les sorties en error provoque une erreur HTTP 202 (à traiter par l'appelant)
		dummy:=Trim(SCParams.getValue('lib_id'));
		mode:=Trim(SCParams.getValue('mode'));

		if ((SCParams.paramsList.count=0) Or (dummy='') Or ((CompareText(mode,'on')<>0) and (CompareText(mode,'off')<>0) and (CompareText(mode,'state')<>0))) then
		Begin
			SCResults.errmsg:=GenErrJSON('Paramètres incorrects pour la mise en place d''environnement de restauration ; merci de contacter votre service technique');
			logger_NAS(oNasDomClient,'Paramètres passés incorrect : ' + CRLF + trim(SCParams.paramsList.Text), CALLER, LOG_ERROR);
			Exit;
		End;

		lib_id:=StrToInt64(dummy);

		logger_NAS(oNasDomClient,'lib_id : "' + Int64ToStr(lib_id) + '" - mode = "' + mode + '"', CALLER, LOG_INFO);

		// Récupération du State Restore
		if not NASGetDomParamValues(oNasDomClient, DOM_REST_STATE_S,DOM_REST_STATE_N,RestState,Nil) then
		Begin
			SCResults.errmsg:=GenErrJSON('Erreur technique lors de la mise en place de l''environnement de restauration ; merci de contacter votre service technique');
			logger_NAS(oNasDomClient,'Impossible de récupérer la valeur du paramètre TDOMPARAM : "' + DOM_REST_STATE_S + '/' + DOM_REST_STATE_N + '" : ' + oNasDomClient.Errmsg, CALLER, LOG_ERROR);
			Exit;
		End;

		// Infos lib
		OLib:=NASGetLib(ONasDomClient,lib_id);
		if oLib=Nil then
		Begin
			SCResults.errmsg:=GenErrJSON('Impossible de récupérer les informations de la bibliothèque ; merci de contacter votre service technique');
			logger_NAS(oNasDomClient,'Chargement de la lib impossible : ' + oNasDomClient.Errmsg, CALLER, LOG_ERROR);
			Exit;
		End;

		// Infos Owner : ce script est censé être appelé via exec_script_url (ie sans authentification sur le principe) mais par un owner déjà authentifié en domain (WEB)
		OOwner:=NasGetOwner(oNasDomClient, oLib.owner_id);
		if not IsSessionDomain(oNasDomClient, oOwner.Id) then
		Begin
			SCResults.errmsg:=GenErrJSON('Erreur technique lors de la mise en place de l''environnement de restauration ; merci de contacter votre service technique');
			logger_NAS(oNasDomClient,'Attention ! Appel incorrect de la procédure car aucune session n''est en cours pour le propriétaire ' + Int64ToStr(oOwner.Id) + ' au moment de l''appel (utilisation illégale ???)', CALLER, LOG_ERROR);
			Exit;
		End;

		if CompareText(mode,'state')=0 then
		Begin
			logger_NAS(oNasDomClient,'Demande d''état de l''environnement de restauration', CALLER, LOG_INFO);
			if GetStateCompare(oLib.state,'~',StrToInt64(RestState)) then
			Begin
				AppendFichier('{"lib_id":' + Int64ToStr(lib_id) + ',"restore":1}',fileresult);
				logger_NAS(oNasDomClient,'Demande d''état de l''environnement de restauration : Mode On', CALLER, LOG_INFO);
			End
			Else
			Begin
				AppendFichier('{"lib_id":' + Int64ToStr(lib_id) + ',"restore":0}',fileresult);
				logger_NAS(oNasDomClient,'Demande d''état de l''environnement de restauration : Mode Off', CALLER, LOG_INFO);
			End;
			Exit;
		End;

		if CompareText(mode,'on')=0 then
		Begin
			{
				TODO :
					vérifier si déjà en place ? Bof, implications nulles pour le moment...
					Trouver un moyen de bloquer les backup (synchro Ok avc tlib.nosync)
					Trouver un moyen pérenne d'identifier le contexte de restauration (STATE/task/autres...)
			}
			logger_NAS(oNasDomClient,'Demande de mise en place de l''environnement de restauration', CALLER, LOG_INFO);

			
			logger_NAS(oNasDomClient,'Test du STATE de la lib en cours (déjà en mode RESTORE ?)', CALLER, LOG_DEBUG);
			if GetStateCompare(oLib.state,'~',StrToInt64(RestState)) then
			begin
				// Pas une erreur fatale...
				//SCResults.errmsg:='Cette bibliothèque est déjà en mode de restauration...';
				logger_NAS(oNasDomClient,'Bibliothèque déjà en mode restauration...', CALLER, LOG_WARNING);
			End;

			// Mise en place locale de l'env. de restauration... La function journalise et init SCResults.errmsg le cas échéant
			if not InitRestInfosPath(oLib) then Exit;

			if not LoadFDBFiles(oLib) then exit;

			logger_NAS(oNasDomClient,'Nb volume : ' + Int64ToStr(cFDBFiles.count), CALLER, LOG_DEBUG);
			ResultStr:='{"lib_id":' + Int64ToStr(lib_id) + ',"count_vol":' + Int64ToStr(cFDBFiles.count) + ',' + CRLF + '"vols":[';
			for i:=0 to cFDBFiles.count-1 do
			begin
				// L'objet HttpServer n'est PAS accessible pour une session OWNER, il faut que l'on se débrouille autrement pour trouver le PATH relatif au serveur...
				ResultStr:=ResultStr + '{"name":"' + cFDBFiles[i].name + '","href_path":"' + NAS_RESTORE_HTTP_PATH + '/' + format('%.10u',[Olib.id]) + '/' + cFDBFiles[i].name +'"}';
				if i<cFDBFiles.count-1 then ResultStr:=ResultStr + ',' + CRLF;
			End;
			ResultStr:=ResultStr + CRLF + ']}' + CRLF;

			//oLib.nosync:=true;
			oLib.Comment:=LIB_COMMENT + oLib.Comment;
			// doamin V39, on ne met PAS à jour la MODIF_DATE de la lib dans ce contexte...
			oLib.NotUpdateModifDate:=true;
			oLib.Update;

			// On place le mode restauration en state
			ONasDomClient.Libraries.SetState(oLib.id,'+' + RestState);

			//AppendFichier('<p>Environnement de restauration mis en place...</p>',fileresult);
			AppendFichier(ResultStr,fileresult);

			logger_NAS(oNasDomClient,'Mise en place de l''environnement de restauration OK', CALLER, LOG_INFO);


	End // Fin mode On
	Else
	Begin
			logger_NAS(oNasDomClient,'Demande de suppression de l''environnement de restauration', CALLER, LOG_INFO);

			logger_NAS(oNasDomClient,'Test du STATE de la lib en cours (déjà en mode RESTORE ?)', CALLER, LOG_DEBUG);
			if GetStateCompare(oLib.state,'&',StrToInt64(RestState)) then
			begin
				SCResults.errmsg:=GenErrJSON('Bibliothèque non actuellement en mode restauration');
				logger_NAS(oNasDomClient,'Bibliothèque non actuellement en mode restauration...', CALLER, LOG_WARNING);
				Exit;
			End;


			PathRestoreDest:=IncludeTrailingPathDelimiter(NAS_RESTORE_DIR)+format('%.10u',[lib_id]) + CLPathDelim;

			if not LoadFDBFiles(oLib) then exit;

			for i:=0 to cFDBFiles.count-1 do
			begin
				if not DeleteFile(PathRestoreDest + cFDBFiles[i].name) then
				logger_NAS(oNasDomClient,'Échec de suppression de "' + PathRestoreDest + cFDBFiles[i].name + '"', CALLER, LOG_WARNING);

			End;
			// Suppression du Rép créé
			if not RemoveDir(PathRestoreDest) then
				logger_NAS(oNasDomClient,'Échec de suppression du répertoire "' + PathRestoreDest + '"', CALLER, LOG_WARNING);

			//oLib.nosync:=false;
			oLib.Comment:=StrReplace(oLib.Comment,LIB_COMMENT,'');
			// doamin V39, on ne met PAS à jour la MODIF_DATE de la lib dans ce contexte...
			oLib.NotUpdateModifDate:=true;
			oLib.Update;

			// On retire le mode restauration en state
			ONasDomClient.Libraries.SetState(oLib.id,'-' + RestState);

			AppendFichier('{"lib_id":' + Int64ToStr(lib_id) + ',"restore":0}',fileresult);

			logger_NAS(oNasDomClient,'Suppression de l''environnement de restauration OK', CALLER, LOG_INFO);

	End; // Fin Mode Off

	Except

	Finally
		if (SCResults.errmsg = '') Then // Pas d'erreur, on rempli le fichier de résultat...
		Begin
			SCResults.ResponseFile:=fileresult;
		End
		Else
		Begin
			logger_NAS(oNasDomClient,'Erreur retournée par ce script : "' + SCResults.errmsg + '"', CALLER, LOG_ERROR);
		End;
		

		// Le NAS attend ce fichier pour pouvoir renvoyer une réponse
		SCResults.savetofile;

		Try
			if oNasDomClient<>nil then oNasDomClient.Free();
			if SCResults<>Nil then SCResults.Free();
			if SCParams<>Nil then SCParams.Free();
			FreeNasRes;
		Except
		End;

	End;


End.
