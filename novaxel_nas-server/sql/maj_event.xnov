{
	Mise à jour de la base event
	On part de la version 1 (existante localement)
	Pour migrer jusqu'à la version donnée en contante EVENT_FINALVER
	
	Ce qui doit être traité ici (dans l'ordre de priorité) :
		- Generators
		- Domain
		- Tables (attention au éventuelles priorités de dépendances FOREIGN KEY !)
		- Datas (insert/update/delete)
		- Index
		- Constraints (check, unique)
		- Exceptions

	Pour tous les autres objets (dans l'ordre de priorité) :
		- Stored Procedure
		- Triggers
		- views
		- comments [réinitialisés à chaque MAJ]
	Il faut préparer un fichier "proc_event.sql" et l'appeler par l'option "-f" de ce script (par défaut, recherché dans le répertoire courant du script)
	==> L'absence de ce fichier n'entrainenra pas une erreur fatale (seulement un warning et un code de sortie 65536)


V1 :
	- Initiale...
}

// {$DEFINE DEBUG}


program maj_event;

{$I maj_bdcloud_inc.xnov}

const

	// Version event cible (TODO : Mettre à jour à chaque évolution)
	EVENT_FINALVER=8;

	// Version mini à partir de laquelle cette procédure peut prendre en charge
	EVENT_INITIALVER=1;

	// Chemin par défaut du Fichier SQL contenant les procédures stockés
	PROC_SQL_DEFPATH='proc_event.sql';

var 
	cTable:string;
	initChamp:boolean;
	ctxtsql:string;
	cDataBase:String;
	CurVer:Integer;
	msg: string;

function GetEventVersion():Integer;

var
	Caller:String;

Begin
	Caller:='GetEventVersion';
    Query.SQL.clear;    
    Query.SQL.Text:='SELECT TRIM(CAST(RDB$DESCRIPTION AS VARCHAR(255))) FROM RDB$DATABASE;'
	try
		Query.open(true);
		Result:=StrToInt64(Query.Fields.AsString[0]);
	Except
		RaiseException(erCustomError,'Erreur lors de la récupération de la version en cours de la base de données, est-ce bien la base de données attendue ?');
	Finally
		Query.Close(etmCommit);
	End;
End;

// Toutes les modifications à apporter à la table Event depuis la version 1
Procedure MAJ_TACTION();
//Structure en  fin de version 3
{
/* Table: TACTION, Owner: SYSDBA */
CREATE TABLE TACTION (ID INTEGER NOT NULL,
        WEB_SERVICE VARCHAR(100) CHARACTER SET UTF8 NOT NULL COLLATE UNICODE_CI,
        TYPE VARCHAR(10) CHARACTER SET UTF8 NOT NULL COLLATE UNICODE_CI,
        NAME VARCHAR(255) NOT NULL,
        LOG_LEVEL INTEGER NOT NULL,
CONSTRAINT PK_TACTION PRIMARY KEY (ID),
CONSTRAINT IDX_TACTION_UNI_WEB_SERVICE UNIQUE (WEB_SERVICE));	

CREATE INDEX IDX_TACTION_LOG_LEVEL ON TACTION (LOG_LEVEL);
CREATE INDEX IDX_TACTION_TYPE ON TACTION (TYPE);

ALTER TABLE TACTION ADD 
        CONSTRAINT CHK_TACTION_LOG_LEVEL CHECK (LOG_LEVEL>0);
}
Var
	caller: string;
	SQL:TStringList;
Begin
	Caller:='MAJ_TACTION';
	cTable:= 'TACTION';
	MetaTdf:=MetaDB.FindTableName(cTable);

	if MetaTdf=nil then // exit;  ==> On arrête tout sans rien faire d'autre ???
	Begin
		LogAction ('Impossible de trouver la table "' + MetaTdf.Name + '"',Caller,LOG_ERROR);
		Exit;
	End;

	LogAction ('Mise à jour de la table "' + MetaTdf.Name + '"',Caller,LOG_INFO);

	// MAJ Structure...

	// En version 8, on réinit toute la table pour travailler avec des action_id figés... Donc, quelque soit la version à partir de laquelle on part, on repart dur des bonnes bases...
	if CurVer<8 then
	Begin
		SQL:=TStringList.Create();
		
		MAJMeta('ALTER TABLE TEVENT ADD TACTION_WEBSERVICE VARCHAR(100), DROP CONSTRAINT FK_TACTION_TEVENT;');
		MAJMeta('ALTER INDEX IDX_TACTION_LOG_LEVEL INACTIVE;');
		MAJMeta('ALTER INDEX IDX_TACTION_TYPE INACTIVE;');
		MAJMeta('ALTER TABLE TACTION DROP CONSTRAINT PK_TACTION;');
		MAJMeta('ALTER TABLE TACTION DROP CONSTRAINT IDX_TACTION_UNI_WEB_SERVICE;');
		MAJMeta('DROP TRIGGER AINC_TACTION;');
		MAJMeta('DROP GENERATOR SEQ_ACTION;');

		SQL.text:=
			'UPDATE TEVENT SET TACTION_WEBSERVICE=(SELECT WEB_SERVICE FROM TACTION WHERE TEVENT.TACTION_ID=TACTION.ID);' +
			'DELETE FROM TACTION;' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(1,''login'',''GED'',''Ouverture session utilisateur (Login)'',1);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(2,''login_as_owner'',''GED'',''Connexion NAS en tant que Propriétaire'',1);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(3,''connect'',''GED'',''Connexion sur une bibliothèque'',1);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(4,''set_geduser_passwd'',''GED'',''Modification du mot de passe du geduser'',2);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(5,''get_folder_for_idi'',''GED'',''Consultation dossier (sur idi)'',4);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(6,''get_folder_for_criteria'',''GED'',''Consultation dossier (sur critères)'',4);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(7,''get_document_content_for_idi'',''GED'',''Téléchargement du document'',8);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(8,''get_document_preview_for_idi'',''GED'',''Téléchargement de l’aperçu'',16);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(9,''clone_session'',''GED'',''Duplication de la session'',32);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(10,''upload_documents_for_folder_idi'',''GED'',''Ajout de document'',2);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(11,''add_item'',''GED'',''Ajout d’un item'',2);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(12,''update_item'',''GED'',''Mise à jour d’un item'',2);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(13,''delete_item'',''GED'',''Suppression d’un item'',2);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(14,''undelete_item'',''GED'',''Restauration d’un item'',2);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(15,''ts_upload_files_for_folder_idi'',''GED'',''Ajout de document dans la panière dossier'',2);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(16,''ts_get_files_list_for_folder_idi'',''GED'',''Consultation de la panière dossier'',4);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(17,''ts_get_file_content'',''GED'',''Téléchargement d’un fichier de la panière'',8);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(18,''ts_delete_file'',''GED'',''Suppression d’un fichier de la panière'',2);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(19,''exec_script_url'',''SERVICE'',''Exécution d''''un script en mode non-connecté'',32);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(20,''update_meta_item'',''GED'',''Mise à jour d''''une information metadata'',128);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(21,''delete_meta_item'',''GED'',''Suppression d''''une information metadata'',128);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(22,''get_accessparamvalues_for_domain'',''GED'',''Consultation de la valeur d''''un paramètre GED avant la connexion'',512);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(23,''get_accessparamblob'',''GED'',''Consultation de la valeur BLOB d''''un paramètre GED avant la connexion'',512);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(24,''log'',''GED'',''Journalisation d''''évènement par le client'',32);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(25,''get_domparam'',''GED'',''Consultation de la valeur d''''un paramètre DOMAIN'',512);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(26,''get_domparamvalueblob'',''GED'',''Consultation de la valeur BLOB d''''un paramètre DOMAIN'',512);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(27,''get_domparams'',''GED'',''Consultation de la liste des paramètres DOMAIN'',512);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(28,''get_libraries'',''GED'',''Consultation de la liste des bibliothèques'',256);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(29,''get_gedparamvalues_for_session'',''GED'',''Consultation de la valeur d''''un paramètre GED lors de la connexion'',512);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(30,''get_gedparamvalueblob'',''GED'',''Consultation de la valeur BLOB d''''un paramètre GED lors de la connexion'',512);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(31,''get_items'',''GED'',''Consultation de la liste filtrée des items à partir d''''un item donné'',256);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(32,''get_item_for_idi'',''GED'',''Consultation de la liste détaillée des items à partir d''''un item donné'',256);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(33,''get_item_for_criteria'',''GED'',''Consultation de la liste détaillée des items par rapport à des critères de recherche'',256);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(34,''get_item_idi_for_lib'',''GED'',''Conultation de la liste des items pour une bibliothèque'',256);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(35,''get_item_url_for_idi'',''GED'',''Génération d''''un lien WEB sur une arborescence GED'',32);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(36,''xcreate_session_to_item'',''GED'',''Consultation d''''une arborescence par un lien de partage'',64);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(37,''xget_document_content_for_idi'',''GED'',''Téléchargement document par un un lien de partage '',8);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(38,''get_session_ok'',''GED'',''Vérification d''''une session engagée (reprise de session)'',32);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(39,''get_bib_infos'',''GED'',''Consultation des informations détaillées d''''une bibliothèque'',256);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(40,''get_search_results'',''GED'',''Consultation des résultats d''''une recherche GED'',256);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(41,''ts_get_directories_for_folders'',''GED'',''Consultation de la liste des panières'',256);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(42,''get_document_url_for_idi'',''GED'',''Génération d''''un lien WEB sur un document GED'',32);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(43,''set_contact_infos'',''GED'',''Mise à jour des informations'',32);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(44,''get_geduser_infos'',''GED'',''Consultation des informaitons utilisateur GED'',256);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(45,''retrieve_session'',''GED'',''Récupération des éléments d''''une session par token'',32);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(46,''create_branch'',''GED'',''Création d''''une arborescence'',2);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(47,''get_gedusers_for_share_groupid'',''GED'',''Liste des utilisateurs membre d''''un groupe'',256);' +
			'INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(48,''ts_get_file_preview'',''GED'',''Téléchargement d’un aperçu de fichier de la panière'',16);' +
			'UPDATE TEVENT SET TACTION_ID=(SELECT TACTION.ID FROM TACTION WHERE TEVENT.TACTION_WEBSERVICE=TACTION.WEB_SERVICE);';

		if not RunSQLScript(SQL) then
			RaiseException(erCustomError,'Erreur lors de l''application de la MAJ sur ' + MetaTdf.Name + ' ; merci de contacter votre service technique');
		MAJMeta('ALTER TABLE TACTION ADD CONSTRAINT PK_TACTION PRIMARY KEY (ID);');
		MAJMeta('ALTER TABLE TACTION ADD CONSTRAINT IDX_TACTION_UNI_WEB_SERVICE UNIQUE (WEB_SERVICE);');
		MAJMeta('ALTER INDEX IDX_TACTION_LOG_LEVEL ACTIVE;');
		MAJMeta('ALTER INDEX IDX_TACTION_TYPE ACTIVE;');
		MAJMeta('ALTER TABLE TEVENT DROP TACTION_WEBSERVICE,  ADD CONSTRAINT FK_TACTION_TEVENT FOREIGN KEY (TACTION_ID) REFERENCES TACTION (ID);');

		SQL.Free();
	End;

	// MAJ Data...

	// Seulement après version 8 (ATTENTION : il faut préciser les action_id de manière formelle depuis la version 8)


End;

// Toutes les modifications à apporter à la table Event depuis la version 1
Procedure MAJ_TEVENT();
//Structure en  fin de version EVENT_FINALVER
{
/* Table: TEVENT, Owner: SYSDBA */
CREATE TABLE TEVENT (ID INTEGER NOT NULL,
        PARENT_ID INTEGER,
        EVENT_PORT INTEGER NOT NULL,
        EVENT_ORIGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL COLLATE UNICODE_CI,
        EVENT_IP VARCHAR(255) CHARACTER SET UTF8 NOT NULL COLLATE UNICODE_CI,
        TOWNER_ID INTEGER,
        TOWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        TLIBRARY_ID INTEGER,
        TLIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        TGEDUSER_ID INTEGER,
        TGEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_LOGIN_BIB VARCHAR(50) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        EVENT_DATE TIMESTAMP NOT NULL,
        EVENT_END TIMESTAMP,
        GED_IDI INTEGER,
        GED_LIB VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_LEVEL INTEGER,
        GED_N1 VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_N2 VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_N3 VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_N4 VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_N5 VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_N6 VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        TACTION_ID INTEGER NOT NULL,
        EVENT_STATUS INTEGER NOT NULL,
        EVENT_ERROR VARCHAR(255),
        EVENT_INFOS VARCHAR(1024),
CONSTRAINT PK_TEVENT PRIMARY KEY (ID));

CREATE INDEX IDX_TEVENT_DATE ON TEVENT (EVENT_DATE);
CREATE INDEX IDX_TEVENT_END ON TEVENT (EVENT_END);
CREATE INDEX IDX_TEVENT_GED_ID ON TEVENT (TGEDUSER_ID);
CREATE INDEX IDX_TEVENT_GED_IDI ON TEVENT (GED_IDI);
CREATE INDEX IDX_TEVENT_IP ON TEVENT (EVENT_IP);
CREATE INDEX IDX_TEVENT_LIB_ID ON TEVENT (TLIBRARY_ID);
CREATE INDEX IDX_TEVENT_ORIGIN ON TEVENT (EVENT_ORIGIN);
CREATE INDEX IDX_TEVENT_OWNER_ID ON TEVENT (TOWNER_ID);
CREATE INDEX IDX_TEVENT_PORT ON TEVENT (EVENT_PORT);
CREATE INDEX IDX_TEVENT_STATUS ON TEVENT (EVENT_STATUS);

ALTER TABLE TEVENT ADD CONSTRAINT FK_TACTION_TEVENT FOREIGN KEY (TACTION_ID) REFERENCES TACTION (ID);

ALTER TABLE TEVENT ADD CONSTRAINT FK_TEVENT_PARENT FOREIGN KEY (PARENT_ID) REFERENCES TEVENT (ID) ON DELETE CASCADE;

ALTER TABLE TEVENT ADD 
        CONSTRAINT CHK_TEVENT_PORT CHECK (EVENT_PORT BETWEEN 0 AND 65536);
	
}
Var
   caller: string;
Begin
	Caller:='MAJ_TEVENT';
	cTable:= 'TEVENT';
	MetaTdf:=MetaDB.FindTableName(cTable);

	if MetaTdf=nil then // exit;  ==> On arrête tout sans rien faire d'autre ???
	Begin
		LogAction ('Impossible de trouver la table "' + MetaTdf.Name + '"',Caller,LOG_ERROR);
		Exit;
	End;

	LogAction ('Mise à jour de la table "' + MetaTdf.Name + '"',Caller,LOG_INFO);

	// MAJ Structure...

	if not FieldExists(MetaTdf,'EVENT_INFOS') then
	// V3 : Ajout
	begin
		MAJMeta(
			'ALTER TABLE TEVENT '+
				'ADD EVENT_INFOS VARCHAR(1024);'
		);
		ExecuteSQL(
				'COMMENT ON COLUMN TEVENT.EVENT_INFOS IS ''Informations complémentaires sur l''''évènement'';'
		);
	End;

	// Limite de l'exerice, pas très beau...
	if ForeignExists(MetaTdf,'FK_TEVENT_PARENT') then
	Begin
		// V3 : Modifications
		MAJMeta(
			'ALTER TABLE TEVENT '+
				'DROP CONSTRAINT FK_TEVENT_PARENT;'
		);
		MAJMeta(
			'ALTER TABLE TEVENT ' +
				'ADD CONSTRAINT FK_TEVENT_PARENT ' + 
				'FOREIGN KEY (PARENT_ID) REFERENCES TEVENT (ID) ON DELETE CASCADE;'
		);
	End
	Else
		MAJMeta(
			'ALTER TABLE TEVENT ' +
				'ADD CONSTRAINT FK_TEVENT_PARENT ' + 
				'FOREIGN KEY (PARENT_ID) REFERENCES TEVENT (ID) ON DELETE CASCADE;'
		);

	// V8 : entre 2 versions 8 on a créé un index DESC puis remis un index ASC, on remet tout en place ici inconditionnellement...
	if IndexExists(MetaTdf, 'IDX_TEVENT_DATE') then
	Begin
		MAJMeta(
			'DROP INDEX IDX_TEVENT_DATE;'
			);
		MAJMeta(
			'CREATE INDEX IDX_TEVENT_DATE ON TEVENT (EVENT_DATE);'
			);

	End;
	If not IndexExists(MetaTdf, 'IDX_TEVENT_ID') then
		MAJMeta(
		'CREATE DESC INDEX IDX_TEVENT_ID ON TEVENT (ID);'
	);

	
	// MAJ Data + dépendances

End;


Var
   caller: string;
begin
	Caller:='maj_event';

	// Récupération et remplacement des paramètres passés en ligne de commande
	// chemin par défaut de la base domain
	//DataBasePath:=getURLDatabase('DOMAIN');
	// Chemin par défaut du Fichier SQL contenant les procédures stockés
	proc_DBDef:=PROC_SQL_DEFPATH;

	SetExitCode(0);

	Try

		// Récupération des paramètres, Init Variables globales, Vérif accès DB, etc...
		If Not GetParamsMAJ('EVENT') then exit;

		CurVer:=GetEventVersion();

		LogAction('Vérification de la version en cours de la base event : ' + Int64ToStr(CurVer),Caller,LOG_INFO);

		if (CurVer<EVENT_INITIALVER) or (CurVer>EVENT_FINALVER) then
			RaiseException(erCustomError,'La version actuelle de la base de données (' + Int64ToStr(CurVer) + ') n''est pas supportée par cette procédure (version minimale prise en charge : ' + Int64ToStr(EVENT_INITIALVER) + ' ; version finale/maximale prise en charge : ' + Int64ToStr(EVENT_FINALVER) + ') ; merci de contacter votre service technique');

		if BackupDB then
			DBBackup(db, EVENT_FINALVER)
		Else
			LogAction('Option nobackup passée, on continue sans effectuer de sauvegarde de la version en cours',Caller,LOG_WARNING);

		//1°) Purge des procédures stockées
		PurgeProcStock;
		
		//3°) Générators
		if not GeneratorExists('SEQ_ACTION') then
			MAJMeta(
				'CREATE GENERATOR SEQ_ACTION;'
			);
		if not GeneratorExists('SEQ_EVENT') then
			MAJMeta(
				'CREATE GENERATOR SEQ_EVENT;'
			);

		// 4°) Exceptions
		if not ExceptionExists('EX_ERRGEN') then
			MAJMeta(
				'CREATE EXCEPTION EX_ERRGEN ''50999:'';'
			);

		// Lancement des mises à jours à apporter sur TACTION depuis la version 1...
		MAJ_TACTION;

		// Lancement des mises à jours à apporter sur TEVENT depuis la version 1...
		MAJ_TEVENT;

		// Housekepping Index
		RecreateIndex;

		// On ne purge pas les triggers avant, en cas d'insertion de datas...
		PurgeTriggers;

		//3°) Mise à jour des prockstock (atomique) - l'existance du fichier est testé en getparams...
		if not RunSQLFile(proc_DBFile) then
		Begin
			SetExitCode(1);
			RaiseException(erCustomError,
				'Erreur lors de l''application du script de recréation des procédures + Triggers + vues "' + proc_DBFile + '"'
			);
		End;
		
		//4°) MAJ Version BD domain (last version)
		LogAction('Mise à jour du N° de version de la base : ' + Int64ToStr(EVENT_FINALVER),Caller,LOG_INFO);
		ExecuteSQL(
			'UPDATE RDB$DATABASE SET RDB$DESCRIPTION =' + Int64ToStr(EVENT_FINALVER) + ';'
		);

		msg := 'La base de données "' + db.databasename +'" a bien été mise à jour en version "' + Int64ToStr(EVENT_FINALVER) + '"';


	Except
		// Si aucun code de sortie défini, on n'est crée un...
		if ExitCode=0 then SetExitCode(1);
		msg := 'L''erreur fatale suivante s''est produite :' + CRLF + '	' + ExceptionParam;

	Finally
		LogAction(msg,Caller,iif(ExitCode=0, LOG_INFO, LOG_ERROR));
		FinMAJ(msg);
		FreeRes;

	End;
end.