/* VERSION 8 */

SET SQL DIALECT 3; 

/* CREATE DATABASE '/var/lib/firebird/event.fdb' PAGE_SIZE 16384 DEFAULT CHARACTER SET UTF8 */


/*  Generators or sequences */
CREATE GENERATOR SEQ_EVENT;


/* Table: TACTION, Owner: SYSDBA */
CREATE TABLE TACTION (ID INTEGER NOT NULL,
        WEB_SERVICE VARCHAR(100) CHARACTER SET UTF8 NOT NULL COLLATE UNICODE_CI,
        TYPE VARCHAR(10) CHARACTER SET UTF8 NOT NULL COLLATE UNICODE_CI,
        NAME VARCHAR(255) NOT NULL,
        LOG_LEVEL INTEGER NOT NULL,
CONSTRAINT PK_TACTION PRIMARY KEY (ID),
CONSTRAINT IDX_TACTION_UNI_WEB_SERVICE UNIQUE (WEB_SERVICE));

/* Table: TEVENT, Owner: SYSDBA */
CREATE TABLE TEVENT (ID INTEGER NOT NULL,
        PARENT_ID INTEGER,
        EVENT_PORT INTEGER NOT NULL,
        EVENT_ORIGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL COLLATE UNICODE_CI,
        EVENT_IP VARCHAR(255) CHARACTER SET UTF8 NOT NULL COLLATE UNICODE_CI,
        TOWNER_ID INTEGER,
        TOWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        TLIBRARY_ID INTEGER,
        TLIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        TGEDUSER_ID INTEGER,
        TGEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_LOGIN_BIB VARCHAR(50) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        EVENT_DATE TIMESTAMP NOT NULL,
        EVENT_END TIMESTAMP,
        GED_IDI INTEGER,
        GED_LIB VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_LEVEL INTEGER,
        GED_N1 VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_N2 VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_N3 VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_N4 VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_N5 VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        GED_N6 VARCHAR(80) CHARACTER SET UTF8 COLLATE UNICODE_CI,
        TACTION_ID INTEGER NOT NULL,
        EVENT_STATUS INTEGER NOT NULL,
        EVENT_ERROR VARCHAR(255),
        EVENT_INFOS VARCHAR(1024),
CONSTRAINT PK_TEVENT PRIMARY KEY (ID));

/*  Index definitions for all user tables */
CREATE INDEX IDX_TACTION_LOG_LEVEL ON TACTION (LOG_LEVEL);
CREATE INDEX IDX_TACTION_TYPE ON TACTION (TYPE);
CREATE INDEX IDX_TEVENT_DATE ON TEVENT (EVENT_DATE);
CREATE INDEX IDX_TEVENT_END ON TEVENT (EVENT_END);
CREATE INDEX IDX_TEVENT_GED_ID ON TEVENT (TGEDUSER_ID);
CREATE INDEX IDX_TEVENT_GED_IDI ON TEVENT (GED_IDI);
CREATE DESCENDING INDEX IDX_TEVENT_ID ON TEVENT (ID);
CREATE INDEX IDX_TEVENT_IP ON TEVENT (EVENT_IP);
CREATE INDEX IDX_TEVENT_LIB_ID ON TEVENT (TLIBRARY_ID);
CREATE INDEX IDX_TEVENT_ORIGIN ON TEVENT (EVENT_ORIGIN);
CREATE INDEX IDX_TEVENT_OWNER_ID ON TEVENT (TOWNER_ID);
CREATE INDEX IDX_TEVENT_PORT ON TEVENT (EVENT_PORT);
CREATE INDEX IDX_TEVENT_STATUS ON TEVENT (EVENT_STATUS);

ALTER TABLE TEVENT ADD CONSTRAINT FK_TACTION_TEVENT FOREIGN KEY (TACTION_ID) REFERENCES TACTION (ID);

ALTER TABLE TEVENT ADD CONSTRAINT FK_TEVENT_PARENT FOREIGN KEY (PARENT_ID) REFERENCES TEVENT (ID) ON DELETE CASCADE;

ALTER TABLE TACTION ADD 
        CONSTRAINT CHK_TACTION_LOG_LEVEL CHECK (LOG_LEVEL>0);

ALTER TABLE TEVENT ADD 
        CONSTRAINT CHK_TEVENT_PORT CHECK (EVENT_PORT BETWEEN 0 AND 65536);

/*  Exceptions */
CREATE EXCEPTION EX_ERRGEN '50999:';
COMMIT WORK;
SET AUTODDL OFF;
SET TERM ^ ;

/* Stored procedures */
CREATE PROCEDURE ADD_EVENT (I_TEVENT_ORIGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TEVENT_IP VARCHAR(255) CHARACTER SET UTF8 NOT NULL,
I_TEVENT_PORT INTEGER NOT NULL,
I_TACTION_ID INTEGER NOT NULL,
I_TEVENT_STATUS INTEGER NOT NULL,
I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_PARENT_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_LOGIN_BIB VARCHAR(50) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_IDI INTEGER NOT NULL DEFAULT 0,
I_TEVENT_GED_LIB VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_LEVEL INTEGER NOT NULL DEFAULT 0,
I_TEVENT_GED_N1 VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_N2 VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_N3 VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_N4 VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_N5 VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_N6 VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_ERROR VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_INFOS VARCHAR(1024) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (EVENT_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_ACTIONS (I_TACTION_ID INTEGER NOT NULL DEFAULT 0,
I_TACTION_WEB_SERVICE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TACTION_TYPE VARCHAR(10) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TACTION_LOG_LEVEL INTEGER NOT NULL DEFAULT 0)
RETURNS (ACTION_ID INTEGER,
ACTION_WEB_SERVICE VARCHAR(100) CHARACTER SET UTF8,
ACTION_TYPE VARCHAR(10) CHARACTER SET UTF8,
ACTION_NAME VARCHAR(255) CHARACTER SET UTF8,
ACTION_LOG_LEVEL INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_BD_EVENT_VERSION RETURNS (VERSION VARCHAR(5) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_DATE_STRING (I_DATE TIMESTAMP)
RETURNS (DATE_STRING VARCHAR(20) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE GET_EVENTS (I_TEVENT_ID INTEGER DEFAULT 0,
I_TEVENT_PARENT_ID INTEGER DEFAULT 0,
I_TEVENT_ORIGIN VARCHAR(100) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_IP VARCHAR(255) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_PORT INTEGER DEFAULT 0,
I_TEVENT_DATE_START VARCHAR(20) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_DATE_END VARCHAR(20) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_END_START VARCHAR(20) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_END_END VARCHAR(20) CHARACTER SET UTF8 DEFAULT '',
I_TACTION_ID INTEGER DEFAULT 0,
I_TACTION_LOGLEVEL INTEGER DEFAULT 0,
I_TACTION_TYPE VARCHAR(10) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_STATUS INTEGER DEFAULT -1,
I_TOWNER_ID INTEGER DEFAULT 0,
I_TLIBRARY_ID INTEGER DEFAULT 0,
I_TGEDUSER_ID INTEGER DEFAULT 0,
I_TEVENT_GED_IDI INTEGER DEFAULT 0,
I_MAX_ROWS INTEGER NOT NULL DEFAULT 0)
RETURNS (EVENT_ID INTEGER,
EVENT_ORIGIN VARCHAR(100) CHARACTER SET UTF8,
EVENT_IP VARCHAR(255) CHARACTER SET UTF8,
EVENT_PORT INTEGER,
EVENT_DATE VARCHAR(20) CHARACTER SET UTF8,
ACTION_ID INTEGER,
ACTION_LOGLEVEL INTEGER,
ACTION_TYPE VARCHAR(10) CHARACTER SET UTF8,
ACTION_NAME VARCHAR(255) CHARACTER SET UTF8,
EVENT_STATUS INTEGER,
OWNER_ID INTEGER,
OWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8,
EVENT_PARENT_ID INTEGER,
LIBRARY_ID INTEGER,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
GEDUSER_ID INTEGER,
GEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
EVENT_GED_LOGIN_BIB VARCHAR(50) CHARACTER SET UTF8,
EVENT_END VARCHAR(20) CHARACTER SET UTF8,
EVENT_GED_IDI INTEGER,
EVENT_GED_LIB VARCHAR(80) CHARACTER SET UTF8,
EVENT_GED_LEVEL INTEGER,
EVENT_GED_N1 VARCHAR(80) CHARACTER SET UTF8,
EVENT_GED_N2 VARCHAR(80) CHARACTER SET UTF8,
EVENT_GED_N3 VARCHAR(80) CHARACTER SET UTF8,
EVENT_GED_N4 VARCHAR(80) CHARACTER SET UTF8,
EVENT_GED_N5 VARCHAR(80) CHARACTER SET UTF8,
EVENT_GED_N6 VARCHAR(80) CHARACTER SET UTF8,
EVENT_ERROR VARCHAR(255) CHARACTER SET UTF8,
EVENT_INFOS VARCHAR(1024) CHARACTER SET UTF8)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE PURGE_EVENTS (I_TEVENT_DATE_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_DATE_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_ORIGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_IP VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_PORT INTEGER NOT NULL DEFAULT 0,
I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0)
RETURNS (EVENTS_DELETED INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_ACTION_INFOS (I_TACTION_ID INTEGER NOT NULL,
I_TACTION_WEB_SERVICE VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TACTION_TYPE VARCHAR(10) CHARACTER SET UTF8 NOT NULL,
I_TACTION_NAME VARCHAR(255) CHARACTER SET UTF8 NOT NULL,
I_TACTION_LOG_LEVEL INTEGER NOT NULL)
RETURNS (ACTION_ID INTEGER)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE SET_STRING_DATE (I_STRING VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (DATE_STRING TIMESTAMP)
AS 
BEGIN SUSPEND; END ^
CREATE PROCEDURE UPDATE_EVENT (I_TEVENT_ID INTEGER NOT NULL,
I_TEVENT_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL)
AS 
BEGIN EXIT; END ^

ALTER PROCEDURE ADD_EVENT (I_TEVENT_ORIGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TEVENT_IP VARCHAR(255) CHARACTER SET UTF8 NOT NULL,
I_TEVENT_PORT INTEGER NOT NULL,
I_TACTION_ID INTEGER NOT NULL,
I_TEVENT_STATUS INTEGER NOT NULL,
I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TOWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_DATE VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_PARENT_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TGEDUSER_ID INTEGER NOT NULL DEFAULT 0,
I_TGEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_LOGIN_BIB VARCHAR(50) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_IDI INTEGER NOT NULL DEFAULT 0,
I_TEVENT_GED_LIB VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_LEVEL INTEGER NOT NULL DEFAULT 0,
I_TEVENT_GED_N1 VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_N2 VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_N3 VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_N4 VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_N5 VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_GED_N6 VARCHAR(80) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_ERROR VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_INFOS VARCHAR(1024) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (EVENT_ID INTEGER)
AS 
/*
    Création d'un évènement (pas de mise à jour possible)
*/
BEGIN

    -- nettoyage des chaines
	I_TEVENT_ORIGIN=TRIM(:I_TEVENT_ORIGIN);
	I_TEVENT_IP=TRIM(:I_TEVENT_IP);
	I_TEVENT_DATE=TRIM(:I_TEVENT_DATE);
	I_TOWNER_SUBDOMAIN=TRIM(:I_TOWNER_SUBDOMAIN);
	I_TLIBRARY_TITLE=TRIM(:I_TLIBRARY_TITLE);
	I_TGEDUSER_LOGIN=TRIM(:I_TGEDUSER_LOGIN);
	I_TEVENT_GED_LOGIN_BIB=TRIM(:I_TEVENT_GED_LOGIN_BIB);
--	I_TEVENT_END=TRIM(:I_TEVENT_END); -- Mise à jour via UPDATE_EVENT
	I_TEVENT_GED_LIB=TRIM(:I_TEVENT_GED_LIB);
	I_TEVENT_GED_N1=TRIM(:I_TEVENT_GED_N1);
	I_TEVENT_GED_N2=TRIM(:I_TEVENT_GED_N2);
	I_TEVENT_GED_N3=TRIM(:I_TEVENT_GED_N3);
	I_TEVENT_GED_N4=TRIM(:I_TEVENT_GED_N4);
	I_TEVENT_GED_N5=TRIM(:I_TEVENT_GED_N5);
	I_TEVENT_GED_N6=TRIM(:I_TEVENT_GED_N6);
	I_TEVENT_ERROR=TRIM(:I_TEVENT_ERROR);
	I_TEVENT_INFOS=TRIM(:I_TEVENT_INFOS);
    
    INSERT INTO TEVENT(
--        ID,
        PARENT_ID,
        EVENT_ORIGIN, 
        EVENT_IP,
		EVENT_PORT,
        TOWNER_ID,
        TOWNER_SUBDOMAIN,
        TLIBRARY_ID,
        TLIBRARY_TITLE,
        TGEDUSER_ID,
        TGEDUSER_LOGIN,
        GED_LOGIN_BIB,
        EVENT_DATE,
--        EVENT_END,
        GED_IDI,
        GED_LIB,
        GED_LEVEL,
        GED_N1,
        GED_N2,
        GED_N3,
        GED_N4,
        GED_N5,
        GED_N6,
        TACTION_ID,
        EVENT_STATUS,
        EVENT_ERROR,
		EVENT_INFOS
    )
    VALUES (
--        NULLIF(:I_TEVENT_ID,0),
        NULLIF(:I_TEVENT_PARENT_ID,0),
        :I_TEVENT_ORIGIN,
        :I_TEVENT_IP,
		:I_TEVENT_PORT,
        NULLIF(:I_TOWNER_ID,0),
        NULLIF(:I_TOWNER_SUBDOMAIN,''),
        NULLIF(:I_TLIBRARY_ID,0),
        NULLIF(:I_TLIBRARY_TITLE,''),
        NULLIF(:I_TGEDUSER_ID,0),
        NULLIF(:I_TGEDUSER_LOGIN,''),
        NULLIF(:I_TEVENT_GED_LOGIN_BIB,''),
        COALESCE(CAST((SELECT DATE_STRING FROM SET_STRING_DATE(:I_TEVENT_DATE)) AS TIMESTAMP),CURRENT_TIMESTAMP), 
--        COALESCE(CAST((SELECT DATE_STRING FROM SET_STRING_DATE(:I_TEVENT_END)) AS TIMESTAMP),NULL), 
        
        NULLIF(:I_TEVENT_GED_IDI,0),
        NULLIF(:I_TEVENT_GED_LIB,''),
        NULLIF(:I_TEVENT_GED_LEVEL,0),
        NULLIF(:I_TEVENT_GED_N1,''),
        NULLIF(:I_TEVENT_GED_N2,''),
        NULLIF(:I_TEVENT_GED_N3,''),
        NULLIF(:I_TEVENT_GED_N4,''),
        NULLIF(:I_TEVENT_GED_N5,''),
        NULLIF(:I_TEVENT_GED_N6,''),
        :I_TACTION_ID,
        :I_TEVENT_STATUS,
        NULLIF(:I_TEVENT_ERROR,''),
        NULLIF(:I_TEVENT_INFOS,'')
    )
    RETURNING ID INTO EVENT_ID;

    SUSPEND;

    WHEN GDSCODE foreign_key DO EXCEPTION EX_ERRGEN 
        '50802:L''évènement parent n''existe pas dans la table TEVENT ou le paramètre d''action n''existe pas dans la table TACTION ';
    
END ^

ALTER PROCEDURE GET_ACTIONS (I_TACTION_ID INTEGER NOT NULL DEFAULT 0,
I_TACTION_WEB_SERVICE VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TACTION_TYPE VARCHAR(10) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TACTION_LOG_LEVEL INTEGER NOT NULL DEFAULT 0)
RETURNS (ACTION_ID INTEGER,
ACTION_WEB_SERVICE VARCHAR(100) CHARACTER SET UTF8,
ACTION_TYPE VARCHAR(10) CHARACTER SET UTF8,
ACTION_NAME VARCHAR(255) CHARACTER SET UTF8,
ACTION_LOG_LEVEL INTEGER)
AS 
/*
	Recherche d'actions dans la table TACTION...
*/

DECLARE VARIABLE SQL_WHERE VARCHAR(8000);

BEGIN

    SQL_WHERE='';
    
    -- Nettoyage des chaines...
    I_TACTION_WEB_SERVICE=TRIM(:I_TACTION_WEB_SERVICE);
    
    -- Cumul des conditions
    IF (:I_TACTION_ID != 0 ) THEN
        SQL_WHERE='TACTION.ID=' || :I_TACTION_ID;
    IF (:I_TACTION_WEB_SERVICE != '' ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TACTION.WEB_SERVICE=''' || :I_TACTION_WEB_SERVICE || '''';
    IF (:I_TACTION_LOG_LEVEL != 0 ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TACTION.LOG_LEVEL=' || :I_TACTION_LOG_LEVEL;
    IF (I_TACTION_TYPE != '' ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TACTION.TYPE=''' || :I_TACTION_TYPE|| '''';

        
    FOR EXECUTE STATEMENT
        'SELECT
            TACTION.ID,
            TACTION.WEB_SERVICE,
			TACTION.TYPE,
            TACTION.NAME,
            TACTION.LOG_LEVEL
        FROM TACTION ' || 
        IIF(SQL_WHERE !='', 'WHERE ' || :SQL_WHERE, '') ||
        'ORDER BY TACTION.WEB_SERVICE'
    INTO
        ACTION_ID,
        ACTION_WEB_SERVICE,
		ACTION_TYPE,
        ACTION_NAME,
        ACTION_LOG_LEVEL
    DO
		SUSPEND;

END ^

ALTER PROCEDURE GET_BD_EVENT_VERSION RETURNS (VERSION VARCHAR(5) CHARACTER SET UTF8)
AS 
/*
    Retourne la version en cours de la base event.fdb
    
    Le N° de version est stocké dans RDB$DATABASE.RDB$DESCRIPTION
    Il doit être mis à jour par une commande SQL telle que :
    UPDATE RDB$DATABASE
        SET RDB$DESCRIPTION =X;
    À chaque évolution...
*/
BEGIN
    SELECT TRIM(RDB$DESCRIPTION) FROM RDB$DATABASE INTO "VERSION";
    SUSPEND;
END ^

ALTER PROCEDURE GET_DATE_STRING (I_DATE TIMESTAMP)
RETURNS (DATE_STRING VARCHAR(20) CHARACTER SET UTF8)
AS 
/*
	Renvoie une chaine formatée SQL/Novaxel ('CCYY-MM-DD HH:NN:SS') par rapport à une date donnée

	Accepte une date ou timestamp

*/
BEGIN
    IF (I_DATE IS NULL) THEN
        DATE_STRING = '';
    ELSE
        DATE_STRING = LPAD(CAST(EXTRACT(YEAR FROM I_DATE) AS CHAR(4)),4,'0') ||'-'|| LPAD(EXTRACT(MONTH FROM I_DATE),2,'0')
            ||'-'|| LPAD(EXTRACT(DAY FROM I_DATE),2,'0') || ' ' || LPAD(EXTRACT(HOUR FROM I_DATE),2,'0')
            ||':'|| LPAD(EXTRACT(MINUTE FROM I_DATE),2,'0') ||':'|| LPAD(TRUNC(EXTRACT(SECOND FROM I_DATE)),2,'0');

    SUSPEND;
END ^

ALTER PROCEDURE GET_EVENTS (I_TEVENT_ID INTEGER DEFAULT 0,
I_TEVENT_PARENT_ID INTEGER DEFAULT 0,
I_TEVENT_ORIGIN VARCHAR(100) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_IP VARCHAR(255) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_PORT INTEGER DEFAULT 0,
I_TEVENT_DATE_START VARCHAR(20) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_DATE_END VARCHAR(20) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_END_START VARCHAR(20) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_END_END VARCHAR(20) CHARACTER SET UTF8 DEFAULT '',
I_TACTION_ID INTEGER DEFAULT 0,
I_TACTION_LOGLEVEL INTEGER DEFAULT 0,
I_TACTION_TYPE VARCHAR(10) CHARACTER SET UTF8 DEFAULT '',
I_TEVENT_STATUS INTEGER DEFAULT -1,
I_TOWNER_ID INTEGER DEFAULT 0,
I_TLIBRARY_ID INTEGER DEFAULT 0,
I_TGEDUSER_ID INTEGER DEFAULT 0,
I_TEVENT_GED_IDI INTEGER DEFAULT 0,
I_MAX_ROWS INTEGER NOT NULL DEFAULT 0)
RETURNS (EVENT_ID INTEGER,
EVENT_ORIGIN VARCHAR(100) CHARACTER SET UTF8,
EVENT_IP VARCHAR(255) CHARACTER SET UTF8,
EVENT_PORT INTEGER,
EVENT_DATE VARCHAR(20) CHARACTER SET UTF8,
ACTION_ID INTEGER,
ACTION_LOGLEVEL INTEGER,
ACTION_TYPE VARCHAR(10) CHARACTER SET UTF8,
ACTION_NAME VARCHAR(255) CHARACTER SET UTF8,
EVENT_STATUS INTEGER,
OWNER_ID INTEGER,
OWNER_SUBDOMAIN VARCHAR(100) CHARACTER SET UTF8,
EVENT_PARENT_ID INTEGER,
LIBRARY_ID INTEGER,
LIBRARY_TITLE VARCHAR(100) CHARACTER SET UTF8,
GEDUSER_ID INTEGER,
GEDUSER_LOGIN VARCHAR(100) CHARACTER SET UTF8,
EVENT_GED_LOGIN_BIB VARCHAR(50) CHARACTER SET UTF8,
EVENT_END VARCHAR(20) CHARACTER SET UTF8,
EVENT_GED_IDI INTEGER,
EVENT_GED_LIB VARCHAR(80) CHARACTER SET UTF8,
EVENT_GED_LEVEL INTEGER,
EVENT_GED_N1 VARCHAR(80) CHARACTER SET UTF8,
EVENT_GED_N2 VARCHAR(80) CHARACTER SET UTF8,
EVENT_GED_N3 VARCHAR(80) CHARACTER SET UTF8,
EVENT_GED_N4 VARCHAR(80) CHARACTER SET UTF8,
EVENT_GED_N5 VARCHAR(80) CHARACTER SET UTF8,
EVENT_GED_N6 VARCHAR(80) CHARACTER SET UTF8,
EVENT_ERROR VARCHAR(255) CHARACTER SET UTF8,
EVENT_INFOS VARCHAR(1024) CHARACTER SET UTF8)
AS 
/*
    Interrogation de la table des évènements

MAJ V2 :
	- Correction TOWNER_ID NULL en sortie...

MAJ V7 :
	- ORDER BY TEVENT.DATE => TEVENT.ID (éviter les problèmes de tri en affichage par défaut CSV/admin/etc...)
	
MAJ V8
    - Ajout de I_MAX_ROWS
    - ORDER BY TEVENT.ID DESC seulement
	- Correction sur TACTION.TYPE
*/

DECLARE VARIABLE SQL_WHERE VARCHAR(8000);

BEGIN

    SQL_WHERE='';
    
    -- nettoyage des chaines
	I_TEVENT_ORIGIN=TRIM(:I_TEVENT_ORIGIN);
	I_TEVENT_IP=TRIM(UPPER(:I_TEVENT_IP)); -- Enregistrement toujours en MAJ...
	I_TEVENT_DATE_START=TRIM(:I_TEVENT_DATE_START);
	I_TEVENT_DATE_END=TRIM(:I_TEVENT_DATE_END);
	
	I_TEVENT_END_START=TRIM(:I_TEVENT_END_START);
	I_TEVENT_END_END=TRIM(:I_TEVENT_END_END);

	I_TACTION_TYPE=TRIM(:I_TACTION_TYPE);
	
    
    -- Construction de la chaine de critères...
    IF (:I_TEVENT_ID != 0 ) THEN
        SQL_WHERE='TEVENT.ID=' || :I_TEVENT_ID;
    IF (:I_TEVENT_PARENT_ID != 0 ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.PARENT_ID=' || :I_TEVENT_PARENT_ID;
    IF (:I_TEVENT_ORIGIN != '' ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_ORIGIN=''' || :I_TEVENT_ORIGIN || '''';
    IF (:I_TEVENT_IP != '' ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_IP=''' || :I_TEVENT_IP || '''';
    IF (:I_TEVENT_PORT != 0 ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_PORT=' || :I_TEVENT_PORT;
    IF (:I_TEVENT_DATE_START != '' ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_DATE>=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TEVENT_DATE_START)) || '''';
    IF (:I_TEVENT_DATE_END != '' ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_DATE<=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TEVENT_DATE_END)) || '''';
    IF (:I_TEVENT_END_START != '' ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_END>=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TEVENT_END_START)) || '''';
    IF (:I_TEVENT_END_END != '' ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_END<=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TEVENT_END_END)) || '''';
    IF (:I_TACTION_ID != 0 ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.TACTION_ID=' || :I_TACTION_ID;
    IF (I_TACTION_TYPE != '' ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TACTION.TYPE=''' || :I_TACTION_TYPE || '''';
    IF (:I_TACTION_LOGLEVEL != 0 ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TACTION.LOG_LEVEL=' || :I_TACTION_LOGLEVEL;

    IF (:I_TEVENT_STATUS != -1 ) THEN
	BEGIN
		IF (:I_TEVENT_STATUS = -2 ) THEN -- Tous les events avec erreurs
			SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_STATUS<>0';
		ELSE -- Event correspondant au code d'erreur passé
			SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_STATUS=' || :I_TEVENT_STATUS;
	END

    IF (:I_TOWNER_ID != 0 ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.TOWNER_ID=' || :I_TOWNER_ID;
    IF (:I_TLIBRARY_ID != 0 ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.TLIBRARY_ID=' || :I_TLIBRARY_ID;
    IF (:I_TGEDUSER_ID != 0 ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.TGEDUSER_ID=' || :I_TGEDUSER_ID;
    IF (:I_TEVENT_GED_IDI != 0 ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.GED_IDI=' || :I_TEVENT_GED_IDI;
    
    -- Ouf ! ;-)

	/* 
	-- TODO : voir l'implémentation d'une sécurité si aucun argument de filtre passé (trop d'enregistrements retournés), par exemple
	IF (:SQL_WHERE = '') THEN DO EXCEPTION ib_error 
		'50810:Au moins un paramètre de filtrage doit être passé à la procédure GET_EVENTS ';
	*/

    FOR EXECUTE STATEMENT
        'SELECT 
            TEVENT.ID,
            COALESCE(TEVENT.PARENT_ID,0),
            TEVENT.EVENT_ORIGIN, 
            TEVENT.EVENT_IP,
			TEVENT.EVENT_PORT,
            COALESCE(TEVENT.TOWNER_ID,0),
            COALESCE(TEVENT.TOWNER_SUBDOMAIN,''''),
            COALESCE(TEVENT.TLIBRARY_ID,0),
            COALESCE(TEVENT.TLIBRARY_TITLE,''''),
            COALESCE(TEVENT.TGEDUSER_ID,0),
            COALESCE(TEVENT.TGEDUSER_LOGIN,''''),
            COALESCE(TEVENT.GED_LOGIN_BIB,''''),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TEVENT.EVENT_DATE)),
            (SELECT DATE_STRING FROM GET_DATE_STRING(TEVENT.EVENT_END)),
            COALESCE(TEVENT.GED_IDI,0),
            COALESCE(TEVENT.GED_LIB,''''),
            COALESCE(TEVENT.GED_LEVEL,0),
            COALESCE(TEVENT.GED_N1,''''),
            COALESCE(TEVENT.GED_N2,''''),
            COALESCE(TEVENT.GED_N3,''''),
            COALESCE(TEVENT.GED_N4,''''),
            COALESCE(TEVENT.GED_N5,''''),
            COALESCE(TEVENT.GED_N6,''''),
            TEVENT.TACTION_ID,
            TACTION.LOG_LEVEL,
			TACTION.TYPE,
			TACTION.NAME,
            TEVENT.EVENT_STATUS,
            COALESCE(TEVENT.EVENT_ERROR,''''),
            COALESCE(TEVENT.EVENT_INFOS,'''')
        FROM TEVENT INNER JOIN TACTION ON TEVENT.TACTION_ID=TACTION.ID ' ||
        IIF(:SQL_WHERE != '', ' WHERE ' || :SQL_WHERE, '') ||
        -- V 7 : ORDER BY TEVENT.EVENT_DATE => TEVENT.ID
        ' ORDER BY TEVENT.ID DESC ' ||
		IIF (:I_MAX_ROWS != 0 ,'ROWS 1 TO '|| :I_MAX_ROWS,'')
        
        
    INTO
        EVENT_ID,
        EVENT_PARENT_ID,
        EVENT_ORIGIN,
        EVENT_IP,
		EVENT_PORT,
        OWNER_ID,
        OWNER_SUBDOMAIN,
        LIBRARY_ID,
        LIBRARY_TITLE,
        GEDUSER_ID,
        GEDUSER_LOGIN,
        EVENT_GED_LOGIN_BIB,
        EVENT_DATE,
        EVENT_END,
        EVENT_GED_IDI,
        EVENT_GED_LIB,
        EVENT_GED_LEVEL,
        EVENT_GED_N1,
        EVENT_GED_N2,
        EVENT_GED_N3,
        EVENT_GED_N4,
        EVENT_GED_N5,
        EVENT_GED_N6,
        ACTION_ID,
        ACTION_LOGLEVEL,
		ACTION_TYPE,
		ACTION_NAME,
        EVENT_STATUS,
        EVENT_ERROR,
		EVENT_INFOS
    DO
        SUSPEND;

END ^

ALTER PROCEDURE PURGE_EVENTS (I_TEVENT_DATE_START VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_DATE_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_ORIGIN VARCHAR(100) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_IP VARCHAR(255) CHARACTER SET UTF8 NOT NULL DEFAULT '',
I_TEVENT_PORT INTEGER NOT NULL DEFAULT 0,
I_TOWNER_ID INTEGER NOT NULL DEFAULT 0,
I_TLIBRARY_ID INTEGER NOT NULL DEFAULT 0)
RETURNS (EVENTS_DELETED INTEGER)
AS 
/*
    Suppression d'évènements

V2 :
	- Création
*/

DECLARE VARIABLE SQL_WHERE VARCHAR(8000);
BEGIN

    SQL_WHERE='';

    -- nettoyage des chaines
	I_TEVENT_ORIGIN=TRIM(:I_TEVENT_ORIGIN);
	I_TEVENT_IP=TRIM(UPPER(:I_TEVENT_IP)); -- Enregistrement toujours en MAJ...
	I_TEVENT_DATE_START=TRIM(:I_TEVENT_DATE_START);
	I_TEVENT_DATE_END=TRIM(:I_TEVENT_DATE_END);
	
    -- Construction de la chaine de critères...
    IF (:I_TEVENT_ORIGIN != '' ) THEN
        SQL_WHERE='TEVENT.EVENT_ORIGIN=''' || :I_TEVENT_ORIGIN || '''';
    IF (:I_TEVENT_IP != '' ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_IP=''' || :I_TEVENT_IP || '''';
    IF (:I_TEVENT_PORT != 0 ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_PORT=' || :I_TEVENT_PORT;
    IF (:I_TEVENT_DATE_START != '' ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_DATE>=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TEVENT_DATE_START)) || '''';
    IF (:I_TEVENT_DATE_END != '' ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.EVENT_DATE<=''' || (SELECT DATE_STRING FROM SET_STRING_DATE(:I_TEVENT_DATE_END)) || '''';
    IF (:I_TOWNER_ID != 0 ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.TOWNER_ID=' || :I_TOWNER_ID;
    IF (:I_TLIBRARY_ID != 0 ) THEN
        SQL_WHERE=IIF (:SQL_WHERE != '' , SQL_WHERE || ' AND ' , '') || 'TEVENT.TLIBRARY_ID=' || :I_TLIBRARY_ID;

    EXECUTE STATEMENT 'SELECT COUNT(ID) FROM TEVENT ' || IIF(:SQL_WHERE != '', ' WHERE ' || :SQL_WHERE, '') INTO EVENTS_DELETED;

    EXECUTE STATEMENT
        'DELETE FROM TEVENT ' ||
        IIF(:SQL_WHERE != '', ' WHERE ' || :SQL_WHERE, '');

	SUSPEND;

END ^

ALTER PROCEDURE SET_ACTION_INFOS (I_TACTION_ID INTEGER NOT NULL,
I_TACTION_WEB_SERVICE VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
I_TACTION_TYPE VARCHAR(10) CHARACTER SET UTF8 NOT NULL,
I_TACTION_NAME VARCHAR(255) CHARACTER SET UTF8 NOT NULL,
I_TACTION_LOG_LEVEL INTEGER NOT NULL)
RETURNS (ACTION_ID INTEGER)
AS 
/*
	Ajout/Modification d'une action dans la table TACTION
*/
BEGIN
	UPDATE OR INSERT INTO TACTION (ID, WEB_SERVICE, "TYPE", NAME, LOG_LEVEL)
        VALUES (
            NULLIF(:I_TACTION_ID,0), -- NULL si 0 (insertion car non existant)
            :I_TACTION_WEB_SERVICE, -- Unique
			:I_TACTION_TYPE,
			:I_TACTION_NAME,
			:I_TACTION_LOG_LEVEL
        )
        MATCHING (ID)
        RETURNING ID INTO ACTION_ID;
        
        SUSPEND;

        /* webservice unique */
        WHEN GDSCODE unique_key_violation DO EXCEPTION EX_ERRGEN 
				'50800:Action déjà existante (webservice dupliqué) dans la table TACTION';

        WHEN GDSCODE check_constraint 
			DO EXCEPTION EX_ERRGEN 
				'50801:La valeur de LOG_LEVEL doit être supérieure à 0 dans la table TACTION';

END ^

ALTER PROCEDURE SET_STRING_DATE (I_STRING VARCHAR(20) CHARACTER SET UTF8 NOT NULL DEFAULT '')
RETURNS (DATE_STRING TIMESTAMP)
AS 
/*
    Renvoi un type timestamp (applicable aux date/time/timestamp)
    
    Si I_STRING='', renvoi NULL
    
    Si la chaine passé est incorrecte une erreur de conversion est levée par FB (GDSCODE 335544334)
    
    On renvoi la date correspondante à la chaine reçu sans traitement particulier...
*/
BEGIN
    IF (TRIM(I_STRING ) = '') THEN
        DATE_STRING=NULL;
    ELSE
        DATE_STRING=TRIM(I_STRING);
    
    SUSPEND;
END ^

ALTER PROCEDURE UPDATE_EVENT (I_TEVENT_ID INTEGER NOT NULL,
I_TEVENT_END VARCHAR(20) CHARACTER SET UTF8 NOT NULL)
AS 
	/* 
	Mise à jour de la date de fin d'un EVENT EXISTANT
	*/
BEGIN

	I_TEVENT_END =TRIM(:I_TEVENT_END);

	IF (NOT EXISTS (SELECT ID FROM TEVENT WHERE ID=:I_TEVENT_ID)) THEN
		EXCEPTION EX_ERRGEN '50803:L''évènement n''existe pas dans la table TEVENT';

	UPDATE TEVENT
	SET EVENT_END=CAST((SELECT DATE_STRING FROM SET_STRING_DATE(:I_TEVENT_END)) AS TIMESTAMP)
	WHERE TEVENT.ID=:I_TEVENT_ID;

END ^
SET TERM ; ^
COMMIT WORK ;
SET AUTODDL ON;
SET TERM ^ ;

/* Triggers only will work for SQL triggers */
CREATE TRIGGER AINC_TEVENT FOR TEVENT 
ACTIVE BEFORE INSERT OR UPDATE POSITION 100 
AS 
BEGIN 
  /* Mise à jour des données en insertion seulement */
    IF(INSERTING) THEN
    BEGIN
        /* MAJ ID*/
        IF (NEW.ID IS NULL) THEN NEW.ID=GEN_ID(SEQ_EVENT, 1); 
    END
END  ^

COMMIT WORK ^
SET TERM ; ^

/* Comments for database objects. */
COMMENT ON DATABASE     IS '8';
COMMENT ON TABLE        TACTION IS 'Actions à journaliser (en adéquation avec webservices NAS)';
COMMENT ON    COLUMN    TACTION.ID IS 'Identifiant numérique (automatique) de l''action';
COMMENT ON    COLUMN    TACTION.WEB_SERVICE IS 'Nom technique du webservice NAS correspondant à l''action (ie. identifiant unique webservice NAS)';
COMMENT ON    COLUMN    TACTION.TYPE IS 'Type d''action journalisée (GED ou DOMAIN)';
COMMENT ON    COLUMN    TACTION.NAME IS 'Libellé de l''action';
COMMENT ON    COLUMN    TACTION.LOG_LEVEL IS 'Niveau de journalisation associée à l''action';
COMMENT ON TABLE        TEVENT IS 'Évènements';
COMMENT ON    COLUMN    TEVENT.ID IS 'Identifiant numérique (automatique) de l''évènement';
COMMENT ON    COLUMN    TEVENT.PARENT_ID IS 'Identifiant de l''évènement parent (jointure réflexive)';
COMMENT ON    COLUMN    TEVENT.EVENT_PORT IS 'Port IP utilisé pour la requête (identification du serveur HTTP/HTTPS NAS, cf. novaappserver.conf)';
COMMENT ON    COLUMN    TEVENT.EVENT_ORIGIN IS 'Origine de l''évènement (session WEB, session client lourd, etc.)';
COMMENT ON    COLUMN    TEVENT.EVENT_IP IS 'Adresse IP (V4/V6) de l''origine de l''évènement';
COMMENT ON    COLUMN    TEVENT.TOWNER_ID IS 'Identifiant du propriétaire de la Bibilothèque de l''évènement';
COMMENT ON    COLUMN    TEVENT.TOWNER_SUBDOMAIN IS 'Sous-domaine du propriétaire de la Bibilothèque de l''évènement';
COMMENT ON    COLUMN    TEVENT.TLIBRARY_ID IS 'Identifiant de la Bibilothèque de l''évènement';
COMMENT ON    COLUMN    TEVENT.TLIBRARY_TITLE IS 'Titre de la Bibilothèque de l''évènement';
COMMENT ON    COLUMN    TEVENT.TGEDUSER_ID IS 'Identifiant de l''utilisateur GED de l''évènement';
COMMENT ON    COLUMN    TEVENT.TGEDUSER_LOGIN IS 'Login de l''utilisateur GED de l''évènement';
COMMENT ON    COLUMN    TEVENT.GED_LOGIN_BIB IS 'Login de l''utilisateur Novaxel utilisé pour l''accès à la Bibliothèque  de l''évènement';
COMMENT ON    COLUMN    TEVENT.EVENT_DATE IS 'Date/heure de l''évènement (date de début pour les événements "continus")';
COMMENT ON    COLUMN    TEVENT.EVENT_END IS 'Date/heure de Fin de l''évènement (utilisés seulement pour les événements "continus")';
COMMENT ON    COLUMN    TEVENT.GED_IDI IS 'Identifiant GED de l''item GED cible de l''évènement';
COMMENT ON    COLUMN    TEVENT.GED_LEVEL IS 'Niveau de l''item GED cible de l''évènement';
COMMENT ON    COLUMN    TEVENT.GED_N1 IS 'Premier niveau de l''arborescence GED de la cible de l''évènement';
COMMENT ON    COLUMN    TEVENT.GED_N2 IS 'Second niveau de l''arborescence GED de la cible de l''évènement';
COMMENT ON    COLUMN    TEVENT.GED_N3 IS 'Troisième niveau de l''arborescence GED de la cible de l''évènement';
COMMENT ON    COLUMN    TEVENT.GED_N4 IS 'Quatrième niveau de l''arborescence GED de la cible de l''évènement';
COMMENT ON    COLUMN    TEVENT.GED_N5 IS 'Cinquième niveau de l''arborescence GED de la cible de l''évènement';
COMMENT ON    COLUMN    TEVENT.GED_N6 IS 'Sixième niveau de l''arborescence GED de la cible de l''évènement';
COMMENT ON    COLUMN    TEVENT.EVENT_INFOS IS 'Informations complémentaires sur l''évènement';
COMMENT ON PROCEDURE    ADD_EVENT IS 'Ajout d''un évènement dans la table TEVENT';
COMMENT ON PROCEDURE    GET_ACTIONS IS 'Recherche d''actions dans la table TACTION';
COMMENT ON PROCEDURE    GET_BD_EVENT_VERSION IS 'Renvoie le N° de version de la base event.fdb';
COMMENT ON PROCEDURE    GET_DATE_STRING IS 'Technique - Renvoie une chaine formatée pour la gestion des date en CHAR (paramètres de procédure)';
COMMENT ON PROCEDURE    GET_EVENTS IS 'Recherche d''évènement(s) dans la table TEVENT';
COMMENT ON PROCEDURE    PURGE_EVENTS IS 'Suppression d''évènement(s) dans la table TEVENT';
COMMENT ON PROCEDURE    SET_ACTION_INFOS IS 'Ajout/Modification d''une action dans la table TACTION';
COMMENT ON PROCEDURE    SET_STRING_DATE IS 'Technique - Initialise une chaine formatée pour la gestion des date en CHAR (paramètres de procédure)';
COMMENT ON PROCEDURE    UPDATE_EVENT IS 'Mise à jour d''un event déjà existant (date de fin d''évènement)';
COMMENT ON TRIGGER      AINC_TEVENT IS 'MAJ ID SEQ_EVENT en insertion';
COMMENT ON GENERATOR    SEQ_EVENT IS 'Générateur d''ID pour la table TEVENT';
COMMIT WORK;
/* version 8 */

UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(1,'login','GED','Ouverture session utilisateur (Login)',1);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(2,'login_as_owner','GED','Connexion NAS en tant que Propriétaire',1);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(3,'connect','GED','Connexion sur une bibliothèque',1);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(4,'set_geduser_passwd','GED','Modification du mot de passe du geduser',2);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(5,'get_folder_for_idi','GED','Consultation dossier (sur idi)',4);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(6,'get_folder_for_criteria','GED','Consultation dossier (sur critères)',4);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(7,'get_document_content_for_idi','GED','Téléchargement du document',8);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(8,'get_document_preview_for_idi','GED','Téléchargement de l’aperçu',16);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(9,'clone_session','GED','Duplication de la session',32);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(10,'upload_documents_for_folder_idi','GED','Ajout de document',2);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(11,'add_item','GED','Ajout d’un item',2);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(12,'update_item','GED','Mise à jour d’un item',2);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(13,'delete_item','GED','Suppression d’un item',2);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(14,'undelete_item','GED','Restauration d’un item',2);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(15,'ts_upload_files_for_folder_idi','GED','Ajout de document dans la panière dossier',2);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(16,'ts_get_files_list_for_folder_idi','GED','Consultation de la panière dossier',4);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(17,'ts_get_file_content','GED','Téléchargement d’un fichier de la panière',8);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(18,'ts_delete_file','GED','Suppression d’un fichier de la panière',2);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(19,'exec_script_url','SERVICE','Exécution d''un script en mode non-connecté',32);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(20,'update_meta_item','GED','Mise à jour d''une information metadata',128);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(21,'delete_meta_item','GED','Suppression d''une information metadata',128);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(22,'get_accessparamvalues_for_domain','GED','Consultation de la valeur d''un paramètre GED avant la connexion',512);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(23,'get_accessparamblob','GED','Consultation de la valeur BLOB d''un paramètre GED avant la connexion',512);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(24,'log','GED','Journalisation d''évènement par le client',32);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(25,'get_domparam','GED','Consultation de la valeur d''un paramètre DOMAIN',512);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(26,'get_domparamvalueblob','GED','Consultation de la valeur BLOB d''un paramètre DOMAIN',512);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(27,'get_domparams','GED','Consultation de la liste des paramètres DOMAIN',512);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(28,'get_libraries','GED','Consultation de la liste des bibliothèques',256);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(29,'get_gedparamvalues_for_session','GED','Consultation de la valeur d''un paramètre GED lors de la connexion',512);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(30,'get_gedparamvalueblob','GED','Consultation de la valeur BLOB d''un paramètre GED lors de la connexion',512);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(31,'get_items','GED','Consultation de la liste filtrée des items à partir d''un item donné',256);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(32,'get_item_for_idi','GED','Consultation de la liste détaillée des items à partir d''un item donné',256);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(33,'get_item_for_criteria','GED','Consultation de la liste détaillée des items par rapport à des critères de recherche',256);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(34,'get_item_idi_for_lib','GED','Conultation de la liste des items pour une bibliothèque',256);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(35,'get_item_url_for_idi','GED','Génération d''un lien WEB sur une arborescence GED',32);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(36,'xcreate_session_to_item','GED','Consultation d''une arborescence par un lien de partage',64);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(37,'xget_document_content_for_idi','GED','Téléchargement document par un un lien de partage ',8);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(38,'get_session_ok','GED','Vérification d''une session engagée (reprise de session)',32);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(39,'get_bib_infos','GED','Consultation des informations détaillées d''une bibliothèque',256);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(40,'get_search_results','GED','Consultation des résultats d''une recherche GED',256);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(41,'ts_get_directories_for_folders','GED','Consultation de la liste des panières',256);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(42,'get_document_url_for_idi','GED','Génération d''un lien WEB sur un document GED',32);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(43,'set_contact_infos','GED','Mise à jour des informations',32);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(44,'get_geduser_infos','GED','Consultation des informaitons utilisateur GED',256);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(45,'retrieve_session','GED','Récupération des éléments d''une session par token',32);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(46,'create_branch','GED','Création d''une arborescence',2);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(47,'get_gedusers_for_share_groupid','GED','Liste des utilisateurs membre d''un groupe',256);
UPDATE OR INSERT INTO TACTION (ID,WEB_SERVICE,TYPE,NAME,LOG_LEVEL) VALUES(48,'ts_get_file_preview','GED','Téléchargement d’un aperçu de fichier de la panière',16);
COMMIT;

-- MAJ Version BD EVENT
UPDATE RDB$DATABASE
	SET RDB$DESCRIPTION =8;
COMMIT;
